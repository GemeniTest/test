/* eslint-disable */
import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type InputMaybe<T> = T | null | undefined;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
const defaultOptions = {} as const;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** A field whose value is a Currency: https://en.wikipedia.org/wiki/ISO_4217. */
  Currency: { input: any; output: any; }
  Date: { input: string; output: string; }
  /** A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format. */
  DateTime: { input: any; output: any; }
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: { input: object; output: object; }
  /** A field whose value is a generic Universally Unique Identifier: https://en.wikipedia.org/wiki/Universally_unique_identifier. */
  UUID: { input: string; output: string; }
};

export type AiLinkAppRecommendation = {
  readonly __typename: 'AILinkAppRecommendation';
  readonly ctaText?: Maybe<Scalars['String']['output']>;
  readonly description: Scalars['String']['output'];
  readonly linkAppId?: Maybe<Scalars['String']['output']>;
  readonly linkType?: Maybe<Scalars['String']['output']>;
  readonly name: Scalars['String']['output'];
  readonly type: AiLinkAppRecommendationType;
};

/** Type of AI link app recommendation */
export enum AiLinkAppRecommendationType {
  ClassicLink = 'CLASSIC_LINK',
  LinkApp = 'LINK_APP'
}

export type AiLinkAppRecommendationsResponse = {
  readonly __typename: 'AILinkAppRecommendationsResponse';
  readonly message?: Maybe<Scalars['String']['output']>;
  readonly recommendations: ReadonlyArray<AiLinkAppRecommendation>;
};

export type AcceptAccountWorkspaceInvitationResult = {
  readonly __typename: 'AcceptAccountWorkspaceInvitationResult';
  readonly accountUsername?: Maybe<Scalars['String']['output']>;
  readonly message?: Maybe<Scalars['String']['output']>;
  readonly workspaceName?: Maybe<Scalars['String']['output']>;
};

export type AcceptUserWorkspaceInvitationOutput = {
  readonly __typename: 'AcceptUserWorkspaceInvitationOutput';
  readonly message?: Maybe<Scalars['String']['output']>;
  readonly role?: Maybe<Scalars['String']['output']>;
  readonly workspaceName?: Maybe<Scalars['String']['output']>;
};

export type Account = {
  readonly __typename: 'Account';
  readonly accountPreviewPaidChanges?: Maybe<AccountPreviewPaidChanges>;
  readonly activeCard?: Maybe<Card>;
  readonly activeGates: ReadonlyArray<Scalars['String']['output']>;
  readonly admins: ReadonlyArray<User>;
  readonly affiliateTokens: ReadonlyArray<AffiliateToken>;
  readonly audienceNotificationsEmail: Scalars['String']['output'];
  /** If audience_support_email is null in the DB, the owning user's email is used. If account has no owning user, null is returned. */
  readonly audienceSupportEmail?: Maybe<Scalars['String']['output']>;
  readonly avatarMode: AvatarMode;
  readonly avatarModes: ReadonlyArray<AvatarMode>;
  readonly avatarType: AvatarType;
  readonly backgroundColor?: Maybe<Scalars['String']['output']>;
  readonly backgroundGradient?: Maybe<ReadonlyArray<Maybe<Scalars['String']['output']>>>;
  readonly backgroundGradientStyle?: Maybe<Scalars['String']['output']>;
  readonly backgroundHeroColor?: Maybe<Scalars['String']['output']>;
  readonly backgroundImage?: Maybe<Scalars['String']['output']>;
  readonly backgroundImageAttributes?: Maybe<Scalars['String']['output']>;
  readonly backgroundImageEffect?: Maybe<BackgroundImageEffect>;
  readonly backgroundNoise?: Maybe<Scalars['Boolean']['output']>;
  readonly backgroundPoster?: Maybe<Scalars['String']['output']>;
  readonly backgroundStyle?: Maybe<Scalars['String']['output']>;
  readonly backgroundTint?: Maybe<Scalars['Int']['output']>;
  readonly buttonColor?: Maybe<Scalars['String']['output']>;
  readonly buttonCornerStyle?: Maybe<Scalars['String']['output']>;
  readonly buttonShadowStyle?: Maybe<Scalars['String']['output']>;
  readonly buttonStyle?: Maybe<Scalars['String']['output']>;
  readonly buttonTextColor?: Maybe<Scalars['String']['output']>;
  /** @deprecated Will always resolve to true. Feature flag archived */
  readonly canAccessMonetizationTab?: Maybe<Scalars['Boolean']['output']>;
  readonly canvaAvatarDesignId?: Maybe<Scalars['String']['output']>;
  readonly canvaBackgroundDesignId?: Maybe<Scalars['String']['output']>;
  readonly cards: ReadonlyArray<Card>;
  readonly causeBanner?: Maybe<Scalars['String']['output']>;
  readonly colorPalette: AppearanceColorPaletteOption;
  readonly colorSchema?: Maybe<ColorSchema>;
  /** @deprecated Feature flag archived. Will always resolve to false. */
  readonly complementaryThemeProperties?: Maybe<Scalars['Boolean']['output']>;
  readonly contentWarning?: Maybe<ContentWarningType>;
  readonly country?: Maybe<Scalars['String']['output']>;
  readonly createdAt?: Maybe<Scalars['Date']['output']>;
  readonly customAvatar?: Maybe<Scalars['String']['output']>;
  readonly customAvatarAttributes?: Maybe<Scalars['String']['output']>;
  readonly customAvatarVideo?: Maybe<Scalars['String']['output']>;
  readonly customDomain?: Maybe<CustomDomain>;
  readonly defaultProfilePage?: Maybe<DefaultProfilePage>;
  readonly deleted?: Maybe<Scalars['Boolean']['output']>;
  readonly description?: Maybe<Scalars['String']['output']>;
  readonly design: Design;
  readonly donationsActive: Scalars['Boolean']['output'];
  readonly dynamicMetaDescription?: Maybe<Scalars['String']['output']>;
  readonly dynamicMetaTitle?: Maybe<Scalars['String']['output']>;
  readonly eligibleForMonetization?: Maybe<Scalars['String']['output']>;
  /** @deprecated property is deprecated in favor of experiment flag `isEligibleForProfileLinkAppRebuild` */
  readonly eligibleLinkAppContainersV2: LinkAppContainersV2;
  /** @deprecated Use `paymentEmail` instead */
  readonly emailAddress?: Maybe<Scalars['String']['output']>;
  readonly emailPreferences?: Maybe<EmailPreferences>;
  readonly enableDynamicProfilePageMetadata?: Maybe<Scalars['Boolean']['output']>;
  /** @deprecated Use getAccountEntitlementsQuery instead */
  readonly entitlements: AccountEntitlements;
  readonly expandableLinkCaret?: Maybe<Scalars['Boolean']['output']>;
  readonly facebookPixelId?: Maybe<Scalars['String']['output']>;
  /** @deprecated Will always resolve to false. Followers configuration is owned by ltfollowers. */
  readonly followersEnabled: Scalars['Boolean']['output'];
  readonly fontColor?: Maybe<Scalars['String']['output']>;
  readonly fontStyle?: Maybe<Scalars['String']['output']>;
  readonly glowUp?: Maybe<GlowUp>;
  readonly googleAnalyticsId?: Maybe<Scalars['String']['output']>;
  /** @deprecated Will always resolve to true. */
  readonly groupsEnabled: Scalars['Boolean']['output'];
  readonly hasAccessToPaidVersionOfPlann: Scalars['Boolean']['output'];
  readonly hasAccountPreviewChanges: Scalars['Boolean']['output'];
  readonly hasCustomBackgroundColor?: Maybe<Scalars['Boolean']['output']>;
  /** @deprecated This feature was deprecated. */
  readonly hasDummyLinkContext: Scalars['Boolean']['output'];
  readonly hasGeotargetingViews?: Maybe<Scalars['Boolean']['output']>;
  readonly hasReachedKajabiCourseLimit: Scalars['Boolean']['output'];
  readonly hasRedoChanges: Scalars['Boolean']['output'];
  readonly hasUndoChanges: Scalars['Boolean']['output'];
  readonly hasUsedFreeProTier: Scalars['Boolean']['output'];
  readonly hasVisitedDesignPage?: Maybe<Scalars['Boolean']['output']>;
  readonly headingColor?: Maybe<Scalars['String']['output']>;
  readonly headingEffect?: Maybe<HeadingEffect>;
  readonly headingFont?: Maybe<Scalars['String']['output']>;
  readonly headingLogo?: Maybe<Scalars['String']['output']>;
  readonly headingLogoSize?: Maybe<HeadingLogoSize>;
  readonly headingSize?: Maybe<HeadingSize>;
  readonly headingType?: Maybe<HeadingType>;
  readonly id: Scalars['Int']['output'];
  readonly inAppMessages: ReadonlyArray<InAppMessage>;
  readonly inPnpExperiment: Scalars['Boolean']['output'];
  readonly integrations: ReadonlyArray<Integration>;
  /** @deprecated Use the current logged in User to generate the Intercom hash instead. */
  readonly intercomHash?: Maybe<Scalars['String']['output']>;
  readonly isActive: Scalars['Boolean']['output'];
  /** @deprecated Will always resolve to true. Feature flag archived */
  readonly isAmazonAffiliateEnabled?: Maybe<Scalars['Boolean']['output']>;
  readonly isAppearanceRebrandEnabled?: Maybe<Scalars['Boolean']['output']>;
  readonly isAudienceEmailNotificationsEnabled: Scalars['Boolean']['output'];
  /** @deprecated Will always resolve to true. Feature flag archived */
  readonly isCookieBannerEnabled?: Maybe<Scalars['Boolean']['output']>;
  /** @deprecated Will always resolve to true. Experiment launched */
  readonly isEligibleForProfileLinkAppRebuild: Scalars['Boolean']['output'];
  readonly isEnterprise?: Maybe<Scalars['Boolean']['output']>;
  /** @deprecated Will always resolve to true. Feature flag archived */
  readonly isFetchCoMoFromLinktreeBackendEnabled: Scalars['Boolean']['output'];
  /** @deprecated Will always resolve to true. Feature flag archived */
  readonly isInitialsProfileEnabled?: Maybe<Scalars['Boolean']['output']>;
  readonly isLogoVisible: Scalars['Boolean']['output'];
  readonly isMediaKitEnabled: Scalars['Boolean']['output'];
  readonly isMessagingEnabled: Scalars['Boolean']['output'];
  readonly isOnlyfansSEOEnabled?: Maybe<Scalars['Boolean']['output']>;
  readonly isPaymentWarning: Scalars['Boolean']['output'];
  readonly isPro: Scalars['Boolean']['output'];
  readonly isProfilePreviewsLinkAppsEnabled: Scalars['Boolean']['output'];
  /** @deprecated Will always resolve to true. Feature flag archived */
  readonly isReportLinktreeEnabled?: Maybe<Scalars['Boolean']['output']>;
  readonly isSensitive?: Maybe<Scalars['Boolean']['output']>;
  readonly isSensitiveGracePeriodComplete?: Maybe<Scalars['Boolean']['output']>;
  readonly isSensitiveUpdatedAt?: Maybe<Scalars['String']['output']>;
  readonly isSensitiveWithGracePeriod?: Maybe<Scalars['Boolean']['output']>;
  readonly isShareButtonEnabled?: Maybe<Scalars['Boolean']['output']>;
  readonly isShareLinksEnabled?: Maybe<Scalars['Boolean']['output']>;
  /** @deprecated Will always resolve to true. Experiment shipped test variant */
  readonly isShareWithEllipsis?: Maybe<Scalars['Boolean']['output']>;
  /** @deprecated Will always resolve to true. Feature flag archived */
  readonly isSnapchatSocialShareEnabled?: Maybe<Scalars['Boolean']['output']>;
  readonly isSocialLinksPositionEditable: Scalars['Boolean']['output'];
  readonly isSquareWalletEnabled?: Maybe<Scalars['Boolean']['output']>;
  readonly isStoreTabEnabled?: Maybe<Scalars['Boolean']['output']>;
  readonly isV2?: Maybe<Scalars['Boolean']['output']>;
  readonly isVenmoEnabled?: Maybe<Scalars['Boolean']['output']>;
  /** @deprecated Will always resolve to true. Feature flag launched */
  readonly isVisualLinkPreviewsEnabled?: Maybe<Scalars['Boolean']['output']>;
  readonly isWhatsappNotificationsEnabled?: Maybe<Scalars['Boolean']['output']>;
  readonly kajabiUser?: Maybe<KajabiUser>;
  readonly linkPlatforms?: Maybe<ReadonlyArray<Maybe<Scalars['String']['output']>>>;
  readonly linkTypesForSEO?: Maybe<ReadonlyArray<Maybe<Scalars['String']['output']>>>;
  readonly links: ReadonlyArray<Link>;
  readonly luminance: Scalars['String']['output'];
  readonly manualTitleTag?: Maybe<Scalars['String']['output']>;
  readonly mediaKit?: Maybe<MediaKitMonolith>;
  readonly messagingSettings?: Maybe<MessagingSettings>;
  readonly metaAttributes?: Maybe<MetaAttributes>;
  readonly monetizationIntents?: Maybe<ReadonlyArray<Maybe<Scalars['String']['output']>>>;
  readonly onboardingGoals: ReadonlyArray<Scalars['String']['output']>;
  readonly onboardingState?: Maybe<OnboardingStateType>;
  readonly ownedBy?: Maybe<User>;
  /** @deprecated Use `ownedBy` instead */
  readonly owner: User;
  readonly pageMeta?: Maybe<PageMeta>;
  readonly pageTitle: Scalars['String']['output'];
  readonly paygateId?: Maybe<Scalars['String']['output']>;
  readonly paymentAddressCity?: Maybe<Scalars['String']['output']>;
  readonly paymentAddressCountry?: Maybe<Scalars['String']['output']>;
  readonly paymentAddressLine1?: Maybe<Scalars['String']['output']>;
  readonly paymentAddressLine2?: Maybe<Scalars['String']['output']>;
  readonly paymentAddressPostcode?: Maybe<Scalars['String']['output']>;
  readonly paymentAddressState?: Maybe<Scalars['String']['output']>;
  readonly paymentEmail?: Maybe<Scalars['String']['output']>;
  readonly paymentMethod: Scalars['String']['output'];
  readonly paymentName?: Maybe<Scalars['String']['output']>;
  readonly pendingAdmins: ReadonlyArray<Maybe<User>>;
  readonly planSubscription?: Maybe<PlanSubscription>;
  readonly profileBadges?: Maybe<ReadonlyArray<ProfileBadges>>;
  /** @deprecated Will always resolve to null. Feature flag archived */
  readonly profileDirectoryUrl?: Maybe<Scalars['String']['output']>;
  readonly profileDirectoryVerticalUrl?: Maybe<Scalars['String']['output']>;
  /** @deprecated Will always resolve to `dialog1`. Feature flag archived */
  readonly profileLinkContentDisplayType?: Maybe<Scalars['String']['output']>;
  /** @deprecated Legacy field. Use `customAvatar` instead. */
  readonly profilePicture?: Maybe<Scalars['String']['output']>;
  /** @deprecated Legacy field. Use `customAvatar` instead. */
  readonly profilePictureUrl?: Maybe<Scalars['String']['output']>;
  readonly profileToken?: Maybe<Scalars['String']['output']>;
  readonly realName?: Maybe<Scalars['String']['output']>;
  readonly shadowColor: Scalars['String']['output'];
  readonly shouldNoindexForSeo?: Maybe<Scalars['Boolean']['output']>;
  readonly showSignupOption?: Maybe<Scalars['Boolean']['output']>;
  readonly socialAiConsent: Scalars['Boolean']['output'];
  readonly socialFeeds: ReadonlyArray<SocialFeed>;
  readonly socialIntegrations: ReadonlyArray<SocialIntegration>;
  readonly socialLinks: ReadonlyArray<SocialLink>;
  readonly socialLinksPosition: SocialLinksPosition;
  readonly status?: Maybe<Scalars['String']['output']>;
  /** @deprecated Use `subscriptionV1` instead */
  readonly subscription?: Maybe<Subscription>;
  readonly subscriptionV1?: Maybe<SubscriptionV1>;
  readonly subscriptionV2?: Maybe<SubscriptionV2>;
  readonly theme: Theme;
  /** @deprecated themeV2 is deprecated. Use `theme` instead */
  readonly themeV2: ThemeV2;
  readonly tier?: Maybe<Scalars['String']['output']>;
  readonly tiktokPixelId?: Maybe<Scalars['String']['output']>;
  readonly timezone?: Maybe<Scalars['String']['output']>;
  readonly updatedAt?: Maybe<Scalars['Date']['output']>;
  readonly useSignupLink?: Maybe<Scalars['Boolean']['output']>;
  readonly username: Scalars['String']['output'];
  readonly utmParameter?: Maybe<UtmParameter>;
  readonly uuid: Scalars['String']['output'];
  readonly verticals?: Maybe<ReadonlyArray<Maybe<Scalars['String']['output']>>>;
  readonly verticalsV2?: Maybe<ReadonlyArray<Maybe<Scalars['String']['output']>>>;
};


export type AccountAvatarModeArgs = {
  isProfilePreview?: InputMaybe<Scalars['Boolean']['input']>;
};


export type AccountAvatarTypeArgs = {
  isProfilePreview?: InputMaybe<Scalars['Boolean']['input']>;
};


export type AccountBackgroundColorArgs = {
  isProfilePreview?: InputMaybe<Scalars['Boolean']['input']>;
};


export type AccountBackgroundGradientArgs = {
  isProfilePreview?: InputMaybe<Scalars['Boolean']['input']>;
};


export type AccountBackgroundGradientStyleArgs = {
  isProfilePreview?: InputMaybe<Scalars['Boolean']['input']>;
};


export type AccountBackgroundHeroColorArgs = {
  isProfilePreview?: InputMaybe<Scalars['Boolean']['input']>;
};


export type AccountBackgroundImageArgs = {
  isProfilePreview?: InputMaybe<Scalars['Boolean']['input']>;
};


export type AccountBackgroundImageAttributesArgs = {
  isProfilePreview?: InputMaybe<Scalars['Boolean']['input']>;
};


export type AccountBackgroundImageEffectArgs = {
  isProfilePreview?: InputMaybe<Scalars['Boolean']['input']>;
};


export type AccountBackgroundNoiseArgs = {
  isProfilePreview?: InputMaybe<Scalars['Boolean']['input']>;
};


export type AccountBackgroundPosterArgs = {
  isProfilePreview?: InputMaybe<Scalars['Boolean']['input']>;
};


export type AccountBackgroundStyleArgs = {
  isProfilePreview?: InputMaybe<Scalars['Boolean']['input']>;
};


export type AccountBackgroundTintArgs = {
  isProfilePreview?: InputMaybe<Scalars['Boolean']['input']>;
};


export type AccountButtonColorArgs = {
  isProfilePreview?: InputMaybe<Scalars['Boolean']['input']>;
};


export type AccountButtonCornerStyleArgs = {
  isProfilePreview?: InputMaybe<Scalars['Boolean']['input']>;
};


export type AccountButtonShadowStyleArgs = {
  isProfilePreview?: InputMaybe<Scalars['Boolean']['input']>;
};


export type AccountButtonStyleArgs = {
  isProfilePreview?: InputMaybe<Scalars['Boolean']['input']>;
};


export type AccountButtonTextColorArgs = {
  isProfilePreview?: InputMaybe<Scalars['Boolean']['input']>;
};


export type AccountCanvaAvatarDesignIdArgs = {
  isProfilePreview?: InputMaybe<Scalars['Boolean']['input']>;
};


export type AccountCanvaBackgroundDesignIdArgs = {
  isProfilePreview?: InputMaybe<Scalars['Boolean']['input']>;
};


export type AccountCustomAvatarArgs = {
  isProfilePreview?: InputMaybe<Scalars['Boolean']['input']>;
};


export type AccountCustomAvatarAttributesArgs = {
  isProfilePreview?: InputMaybe<Scalars['Boolean']['input']>;
};


export type AccountCustomAvatarVideoArgs = {
  isProfilePreview?: InputMaybe<Scalars['Boolean']['input']>;
};


export type AccountDescriptionArgs = {
  isProfilePreview?: InputMaybe<Scalars['Boolean']['input']>;
};


export type AccountFontColorArgs = {
  isProfilePreview?: InputMaybe<Scalars['Boolean']['input']>;
};


export type AccountFontStyleArgs = {
  isProfilePreview?: InputMaybe<Scalars['Boolean']['input']>;
};


export type AccountHeadingColorArgs = {
  isProfilePreview?: InputMaybe<Scalars['Boolean']['input']>;
};


export type AccountHeadingEffectArgs = {
  isProfilePreview?: InputMaybe<Scalars['Boolean']['input']>;
};


export type AccountHeadingFontArgs = {
  isProfilePreview?: InputMaybe<Scalars['Boolean']['input']>;
};


export type AccountHeadingLogoArgs = {
  isProfilePreview?: InputMaybe<Scalars['Boolean']['input']>;
};


export type AccountHeadingLogoSizeArgs = {
  isProfilePreview?: InputMaybe<Scalars['Boolean']['input']>;
};


export type AccountHeadingSizeArgs = {
  isProfilePreview?: InputMaybe<Scalars['Boolean']['input']>;
};


export type AccountHeadingTypeArgs = {
  isProfilePreview?: InputMaybe<Scalars['Boolean']['input']>;
};


export type AccountIntegrationsArgs = {
  filter?: InputMaybe<IntegrationsFilterInput>;
};


export type AccountIntercomHashArgs = {
  platform?: InputMaybe<Scalars['String']['input']>;
};


export type AccountIsLogoVisibleArgs = {
  isProfilePreview?: InputMaybe<Scalars['Boolean']['input']>;
};


export type AccountLinksArgs = {
  filter?: InputMaybe<LinksFilterInput>;
  isGlowUpPreview?: InputMaybe<Scalars['Boolean']['input']>;
  requestSource?: InputMaybe<RequestSourceInput>;
  view?: InputMaybe<ViewInput>;
};


export type AccountLuminanceArgs = {
  isProfilePreview?: InputMaybe<Scalars['Boolean']['input']>;
};


export type AccountPageTitleArgs = {
  isProfilePreview?: InputMaybe<Scalars['Boolean']['input']>;
};


export type AccountProfilePictureUrlArgs = {
  isProfilePreview?: InputMaybe<Scalars['Boolean']['input']>;
};


export type AccountShadowColorArgs = {
  isProfilePreview?: InputMaybe<Scalars['Boolean']['input']>;
};


export type AccountSocialFeedsArgs = {
  filter?: InputMaybe<SocialFeedFilterInput>;
};


export type AccountSocialIntegrationsArgs = {
  filter?: InputMaybe<SocialIntegrationsFilterInput>;
};


export type AccountSocialLinksArgs = {
  filter?: InputMaybe<SocialLinksFilterInput>;
};


export type AccountThemeArgs = {
  isGlowUpPreview?: InputMaybe<Scalars['Boolean']['input']>;
  isProfilePreview?: InputMaybe<Scalars['Boolean']['input']>;
};

export type AccountActivity = {
  readonly __typename: 'AccountActivity';
  readonly cityBreakdown?: Maybe<ReadonlyArray<CityBreakdown>>;
  readonly clickThroughRate: Scalars['Float']['output'];
  readonly countryBreakdown?: Maybe<ReadonlyArray<CountryBreakdown>>;
  readonly date: Scalars['String']['output'];
  readonly devicesBreakdown?: Maybe<ReadonlyArray<DeviceBreakdown>>;
  readonly notifications: Scalars['Int']['output'];
  readonly referrerBreakdown?: Maybe<ReadonlyArray<ReferrerBreakdown>>;
  readonly timeToClick: Scalars['Float']['output'];
  readonly totalClicks: Scalars['Int']['output'];
  readonly totalViews: Scalars['Int']['output'];
  readonly uniqueClicks?: Maybe<Scalars['Int']['output']>;
  readonly uniqueViews?: Maybe<Scalars['Int']['output']>;
};

export type AccountAnalytics = {
  readonly __typename: 'AccountAnalytics';
  readonly breakdown?: Maybe<ReadonlyArray<AccountActivity>>;
  readonly combinedContent?: Maybe<ReadonlyArray<Maybe<CombinedContentItem>>>;
  readonly conversions?: Maybe<AccountConversions>;
  readonly devices?: Maybe<AccountDevices>;
  readonly lifetime?: Maybe<AccountLifetime>;
  /** @deprecated Use `lifetime` instead */
  readonly lifetimeAnalytics?: Maybe<AccountAnalyticsLifetime>;
  readonly links?: Maybe<ReadonlyArray<Maybe<AccountLink>>>;
  readonly locations?: Maybe<AccountLocations>;
  readonly overview?: Maybe<AccountOverview>;
  readonly payments?: Maybe<AccountPayments>;
  readonly paymentsTransactions: AccountPaymentTransactions;
  readonly products?: Maybe<ReadonlyArray<Maybe<AccountProduct>>>;
  readonly referrers?: Maybe<AccountReferrers>;
  readonly signups?: Maybe<AccountSignups>;
  readonly socials?: Maybe<AccountSocials>;
  readonly subscribers?: Maybe<AccountSubscribers>;
  /** @deprecated Use `subscribers` instead */
  readonly subscribersAnalytics?: Maybe<SubscribersAnalytics>;
};

export type AccountAnalyticsInput = {
  readonly accountId: Scalars['Int']['input'];
};

export type AccountAnalyticsLifetime = {
  readonly __typename: 'AccountAnalyticsLifetime';
  readonly clickThroughRate: Scalars['Float']['output'];
  readonly clicks?: Maybe<AccountAnalyticsLifetimeClicks>;
  readonly payments?: Maybe<ReadonlyArray<Maybe<Payment>>>;
  readonly subscribers?: Maybe<AccountAnalyticsLifetimeSubscribers>;
  readonly timeToClick: Scalars['Float']['output'];
  readonly views?: Maybe<AccountAnalyticsLifetimeViews>;
};

export type AccountAnalyticsLifetimeClicks = {
  readonly __typename: 'AccountAnalyticsLifetimeClicks';
  readonly profile: Scalars['Int']['output'];
  readonly socials?: Maybe<Scalars['Int']['output']>;
  readonly storefront?: Maybe<Scalars['Int']['output']>;
  readonly total: Scalars['Int']['output'];
};

export type AccountAnalyticsLifetimeSubscribers = {
  readonly __typename: 'AccountAnalyticsLifetimeSubscribers';
  /** Number of new subscribes */
  readonly subscribes: Scalars['Int']['output'];
  /** Total number of current subscribers. It shall be equal to "subscribes" - "unsubscribes". */
  readonly total: Scalars['Int']['output'];
  /** Number of unsubscribes */
  readonly unsubscribes: Scalars['Int']['output'];
};

export type AccountAnalyticsLifetimeViews = {
  readonly __typename: 'AccountAnalyticsLifetimeViews';
  readonly total: Scalars['Int']['output'];
};

export type AccountCity = {
  readonly __typename: 'AccountCity';
  readonly clickThroughRate?: Maybe<Scalars['Float']['output']>;
  readonly clicks?: Maybe<AccountClicks>;
  readonly coordinates?: Maybe<ReadonlyArray<Maybe<Scalars['String']['output']>>>;
  readonly countryCode?: Maybe<Scalars['String']['output']>;
  readonly name?: Maybe<Scalars['String']['output']>;
  readonly views?: Maybe<AccountViews>;
};

export type AccountClicks = {
  readonly __typename: 'AccountClicks';
  readonly leaplink?: Maybe<Scalars['Int']['output']>;
  readonly profile?: Maybe<Scalars['Int']['output']>;
  readonly social?: Maybe<Scalars['Int']['output']>;
  readonly subscriber?: Maybe<Scalars['Int']['output']>;
  readonly total: Scalars['Int']['output'];
  readonly treelink?: Maybe<Scalars['Int']['output']>;
};

export type AccountCollections = {
  readonly __typename: 'AccountCollections';
  readonly collections: ReadonlyArray<CommerceCollection>;
};

export type AccountConversions = {
  readonly __typename: 'AccountConversions';
  readonly links?: Maybe<ReadonlyArray<Maybe<AccountConversionsLink>>>;
  readonly nodes?: Maybe<ReadonlyArray<Maybe<AccountConversionsNode>>>;
};

export type AccountConversionsLink = {
  readonly __typename: 'AccountConversionsLink';
  readonly referrer?: Maybe<Scalars['String']['output']>;
  readonly source?: Maybe<Scalars['String']['output']>;
  readonly target?: Maybe<Scalars['String']['output']>;
  readonly value: Scalars['Int']['output'];
};

export type AccountConversionsNode = {
  readonly __typename: 'AccountConversionsNode';
  readonly name?: Maybe<Scalars['String']['output']>;
};

export type AccountCountry = {
  readonly __typename: 'AccountCountry';
  readonly clickThroughRate?: Maybe<Scalars['Float']['output']>;
  readonly clicks?: Maybe<AccountClicks>;
  readonly countryCode?: Maybe<Scalars['String']['output']>;
  readonly name?: Maybe<Scalars['String']['output']>;
  readonly timeToClick?: Maybe<Scalars['Float']['output']>;
  readonly views?: Maybe<AccountViews>;
};

export type AccountDevice = {
  readonly __typename: 'AccountDevice';
  readonly clickThroughRate?: Maybe<Scalars['Float']['output']>;
  readonly clicks?: Maybe<AccountClicks>;
  readonly name?: Maybe<Scalars['String']['output']>;
  readonly timeToClick?: Maybe<Scalars['Float']['output']>;
  readonly views?: Maybe<AccountViews>;
};

export type AccountDevices = {
  readonly __typename: 'AccountDevices';
  readonly devices?: Maybe<ReadonlyArray<Maybe<AccountDevice>>>;
};

export type AccountEmailSummary = {
  readonly __typename: 'AccountEmailSummary';
  readonly downloadUrl?: Maybe<Scalars['String']['output']>;
  readonly message: Scalars['String']['output'];
  readonly success: Scalars['Boolean']['output'];
};

export type AccountEntitlement = {
  readonly __typename: 'AccountEntitlement';
  readonly cacheType: CacheType;
  readonly isQualified: Scalars['Boolean']['output'];
  readonly name: AccountEntitlementName;
  readonly quota?: Maybe<EntitlementQuota>;
  readonly rate?: Maybe<EntitlementRate>;
  readonly requiredProduct?: Maybe<EntitlementProduct>;
  readonly type: EntitlementType;
};

export enum AccountEntitlementName {
  AdminAccounts = 'AdminAccounts',
  AffiliateProgram = 'AffiliateProgram',
  AiProfileFilterStyle = 'AiProfileFilterStyle',
  AmazonAffiliate = 'AmazonAffiliate',
  AnalyticsExport = 'AnalyticsExport',
  AnalyticsExtendedDateRange90Days = 'AnalyticsExtendedDateRange90Days',
  AnalyticsExtendedDateRange365Days = 'AnalyticsExtendedDateRange365Days',
  AnalyticsIntegrations = 'AnalyticsIntegrations',
  AnimatedLinks = 'AnimatedLinks',
  AudienceAnalytics = 'AudienceAnalytics',
  AudienceGeographicData = 'AudienceGeographicData',
  AudienceIntegrationGoogleSheets = 'AudienceIntegrationGoogleSheets',
  AudienceIntegrationKit = 'AudienceIntegrationKit',
  AudienceIntegrationKlaviyo = 'AudienceIntegrationKlaviyo',
  AudienceIntegrationMailchimp = 'AudienceIntegrationMailchimp',
  AudienceTrafficSource = 'AudienceTrafficSource',
  AvatarStyle = 'AvatarStyle',
  Backgrounds = 'Backgrounds',
  BaseThemes = 'BaseThemes',
  Buttons = 'Buttons',
  CollectionLayout = 'CollectionLayout',
  Colorways = 'Colorways',
  CreateFeaturedLink = 'CreateFeaturedLink',
  CustomQrCode = 'CustomQrCode',
  CustomTandC = 'CustomTandC',
  FirstPartyForms = 'FirstPartyForms',
  FirstPartySellerFee = 'FirstPartySellerFee',
  Fonts = 'Fonts',
  GlowUp = 'GlowUp',
  Gradients = 'Gradients',
  HeadingFont = 'HeadingFont',
  HeroImage = 'HeroImage',
  HideLinktreeLogo = 'HideLinktreeLogo',
  InsightsAi = 'InsightsAI',
  InsightsActivityFilter = 'InsightsActivityFilter',
  InsightsAudienceInterests = 'InsightsAudienceInterests',
  InsightsContacts = 'InsightsContacts',
  InsightsContent = 'InsightsContent',
  InstagramDirectMessage = 'InstagramDirectMessage',
  LeapLinks = 'LeapLinks',
  LinkAnalytics = 'LinkAnalytics',
  LinktreeInsights = 'LinktreeInsights',
  MailingListIntegration = 'MailingListIntegration',
  MobileAppLinkApp = 'MobileAppLinkApp',
  PasscodeGate = 'PasscodeGate',
  PasswordGate = 'PasswordGate',
  Redirect = 'Redirect',
  RssFeed = 'RssFeed',
  SeoAccess = 'SEOAccess',
  ScheduledLinkNotifications = 'ScheduledLinkNotifications',
  ScheduledLinks = 'ScheduledLinks',
  SocialPlanner = 'SocialPlanner',
  StylePresets = 'StylePresets',
  SubscriberDetails = 'SubscriberDetails',
  TreeLinkShortenerBackHalves = 'TreeLinkShortenerBackHalves',
  TreeLinkShortenerSkipsContent = 'TreeLinkShortenerSkipsContent',
  TwitterProfileEmbed = 'TwitterProfileEmbed',
  TwitterStatusEmbed = 'TwitterStatusEmbed',
  YoutubeEmbed = 'YoutubeEmbed'
}

export type AccountEntitlements = {
  readonly __typename: 'AccountEntitlements';
  readonly isPaid: Scalars['Boolean']['output'];
};

export type AccountInput = {
  readonly id?: InputMaybe<Scalars['Int']['input']>;
  readonly includeBreakdownByFollowStatus?: InputMaybe<Scalars['Boolean']['input']>;
  /** If the result including "totalCountDiff". Using -7d for diff calculation */
  readonly includeTotalCountDiff?: InputMaybe<Scalars['Boolean']['input']>;
  /** If the result including trend. Using -7d for trending calculation */
  readonly includeTrend?: InputMaybe<Scalars['Boolean']['input']>;
  readonly username?: InputMaybe<Scalars['String']['input']>;
  readonly uuid?: InputMaybe<Scalars['String']['input']>;
};

export type AccountInvitableToWorkspace = {
  readonly __typename: 'AccountInvitableToWorkspace';
  readonly avatar?: Maybe<Scalars['String']['output']>;
  readonly isOwnedByCurrentUser: Scalars['Boolean']['output'];
  readonly name: Scalars['String']['output'];
  readonly owner: WorkspaceAccountOwner;
  readonly uuid: Scalars['String']['output'];
};

export type AccountLifetime = {
  readonly __typename: 'AccountLifetime';
  readonly clickThroughRate: Scalars['Float']['output'];
  readonly clicks?: Maybe<AccountLifetimeClicks>;
  readonly payments?: Maybe<ReadonlyArray<Maybe<AccountLifetimePayment>>>;
  readonly subscribers?: Maybe<AccountLifetimeSubscribers>;
  readonly timeToClick: Scalars['Float']['output'];
  readonly views?: Maybe<AccountLifetimeViews>;
};

export type AccountLifetimeClicks = {
  readonly __typename: 'AccountLifetimeClicks';
  readonly profile: Scalars['Int']['output'];
  readonly socials?: Maybe<Scalars['Int']['output']>;
  readonly storefront?: Maybe<Scalars['Int']['output']>;
  readonly total: Scalars['Int']['output'];
};

export type AccountLifetimePayment = {
  readonly __typename: 'AccountLifetimePayment';
  readonly currency: Scalars['String']['output'];
  readonly revenueGross: Scalars['Int']['output'];
  readonly revenueNet: Scalars['Int']['output'];
  readonly transactions: Scalars['Int']['output'];
};

export type AccountLifetimeSubscribers = {
  readonly __typename: 'AccountLifetimeSubscribers';
  /** Number of new subscribes */
  readonly subscribes: Scalars['Int']['output'];
  readonly subscribesTrend?: Maybe<AccountLifetimeSubscribersTrend>;
  /** Total number of current subscribers. It shall be equal to "subscribes" - "unsubscribes". */
  readonly total: Scalars['Int']['output'];
  readonly totalTrend?: Maybe<AccountLifetimeSubscribersTrend>;
  /** Number of unsubscribes */
  readonly unsubscribes: Scalars['Int']['output'];
  readonly unsubscribesTrend?: Maybe<AccountLifetimeSubscribersTrend>;
};

export type AccountLifetimeSubscribersTrend = {
  readonly __typename: 'AccountLifetimeSubscribersTrend';
  readonly currentWeekCount?: Maybe<Scalars['Int']['output']>;
  readonly previousWeekCount?: Maybe<Scalars['Int']['output']>;
  readonly rate?: Maybe<Scalars['Float']['output']>;
  readonly trend: Scalars['Int']['output'];
};

export type AccountLifetimeViews = {
  readonly __typename: 'AccountLifetimeViews';
  readonly total: Scalars['Int']['output'];
};

export type AccountLink = {
  readonly __typename: 'AccountLink';
  readonly breakdown?: Maybe<ReadonlyArray<Maybe<AccountLinkBreakdown>>>;
  readonly clicks?: Maybe<AccountClicks>;
  readonly id: Scalars['Int']['output'];
};

export type AccountLinkBreakdown = {
  readonly __typename: 'AccountLinkBreakdown';
  readonly clicks?: Maybe<AccountClicks>;
  readonly date?: Maybe<Scalars['String']['output']>;
};

export type AccountListFilterInput = {
  /** Only show account with this id, will overwrite other filters if provided */
  readonly id?: InputMaybe<Scalars['Int']['input']>;
  /** Only show accounts subscribed to the weekly digest */
  readonly subscribedToDigest?: InputMaybe<Scalars['Boolean']['input']>;
  /** Only show accounts with this tier */
  readonly tier?: InputMaybe<Scalars['String']['input']>;
  /** Only show account with this uuid, will overwrite other filters if provided */
  readonly uuid?: InputMaybe<Scalars['String']['input']>;
};

export type AccountLocations = {
  readonly __typename: 'AccountLocations';
  readonly cities?: Maybe<ReadonlyArray<Maybe<AccountCity>>>;
  readonly countries?: Maybe<ReadonlyArray<Maybe<AccountCountry>>>;
};

export type AccountOverview = {
  readonly __typename: 'AccountOverview';
  readonly clickThroughBenchmark: Scalars['Float']['output'];
  readonly clickThroughRate: Scalars['Float']['output'];
  readonly timeToClick: Scalars['Float']['output'];
  readonly timeseries: ReadonlyArray<AccountActivity>;
  readonly totalClicks: Scalars['Int']['output'];
  readonly totalViews: Scalars['Int']['output'];
};

export type AccountPayment = {
  readonly __typename: 'AccountPayment';
  readonly clickCount?: Maybe<Scalars['Int']['output']>;
  readonly conversionRate?: Maybe<Scalars['Float']['output']>;
  /** @deprecated Use `clickCount` instead */
  readonly count?: Maybe<Scalars['Int']['output']>;
  readonly currency?: Maybe<Scalars['String']['output']>;
  readonly date?: Maybe<Scalars['String']['output']>;
  readonly revenueGross?: Maybe<Scalars['Float']['output']>;
  readonly revenueNet?: Maybe<Scalars['Float']['output']>;
  readonly transactions?: Maybe<Scalars['Int']['output']>;
};

export type AccountPaymentTransactions = {
  readonly __typename: 'AccountPaymentTransactions';
  readonly breakdown?: Maybe<ReadonlyArray<AccountPaymentTransactionsBreakdown>>;
  readonly count?: Maybe<Scalars['Int']['output']>;
  readonly grossAmount?: Maybe<Scalars['Float']['output']>;
  readonly netAmount?: Maybe<Scalars['Float']['output']>;
};

export type AccountPaymentTransactionsBreakdown = {
  readonly __typename: 'AccountPaymentTransactionsBreakdown';
  readonly count?: Maybe<Scalars['Int']['output']>;
  readonly date?: Maybe<Scalars['String']['output']>;
};

export type AccountPayments = {
  readonly __typename: 'AccountPayments';
  readonly currency?: Maybe<Scalars['String']['output']>;
  readonly revenueGross?: Maybe<Scalars['Float']['output']>;
  readonly revenueNet?: Maybe<Scalars['Float']['output']>;
  readonly timeseries?: Maybe<ReadonlyArray<Maybe<AccountPayment>>>;
  readonly transactions?: Maybe<Scalars['Int']['output']>;
};

export type AccountPreviewPaidChanges = {
  readonly __typename: 'AccountPreviewPaidChanges';
  readonly hasPremiumFeatures: Scalars['Boolean']['output'];
  readonly hasProFeatures: Scalars['Boolean']['output'];
};

export type AccountProduct = {
  readonly __typename: 'AccountProduct';
  readonly clicks?: Maybe<AccountClicks>;
  readonly productId: Scalars['String']['output'];
  readonly sales?: Maybe<AccountProductSales>;
};

export type AccountProductSales = {
  readonly __typename: 'AccountProductSales';
  readonly total: Scalars['Int']['output'];
};

export type AccountProducts = {
  readonly __typename: 'AccountProducts';
  readonly accountProducts: ReadonlyArray<CommerceAccountProduct>;
};

export type AccountReferrer = {
  readonly __typename: 'AccountReferrer';
  readonly clickThroughRate?: Maybe<Scalars['Float']['output']>;
  readonly clicks?: Maybe<AccountClicks>;
  readonly name?: Maybe<Scalars['String']['output']>;
  readonly timeToClick?: Maybe<Scalars['Float']['output']>;
  readonly views?: Maybe<AccountViews>;
};

export type AccountReferrers = {
  readonly __typename: 'AccountReferrers';
  readonly referrers?: Maybe<ReadonlyArray<Maybe<AccountReferrer>>>;
};

export type AccountSettings = {
  readonly __typename: 'AccountSettings';
  readonly botRole?: Maybe<Scalars['String']['output']>;
  readonly commStyle?: Maybe<Scalars['String']['output']>;
  readonly embeddingType: Scalars['String']['output'];
  readonly llmProvider: Scalars['String']['output'];
  readonly model?: Maybe<Scalars['String']['output']>;
  readonly styleSampleLinkIds?: Maybe<ReadonlyArray<Scalars['Float']['output']>>;
};

export type AccountSettingsInput = {
  readonly botRole?: InputMaybe<Scalars['String']['input']>;
  readonly commStyle?: InputMaybe<Scalars['String']['input']>;
  readonly embeddingType?: InputMaybe<Scalars['String']['input']>;
  readonly llmProvider?: InputMaybe<Scalars['String']['input']>;
  readonly model?: InputMaybe<Scalars['String']['input']>;
  readonly styleSampleLinkIds?: InputMaybe<ReadonlyArray<Scalars['Float']['input']>>;
};

export type AccountSignup = {
  readonly __typename: 'AccountSignup';
  readonly date?: Maybe<Scalars['String']['output']>;
  readonly total: Scalars['Int']['output'];
};

export type AccountSignups = {
  readonly __typename: 'AccountSignups';
  readonly emailSignups?: Maybe<ReadonlyArray<Maybe<AccountSignup>>>;
  readonly interval?: Maybe<Interval>;
  readonly smsSignups?: Maybe<ReadonlyArray<Maybe<AccountSignup>>>;
};

export type AccountSocial = {
  readonly __typename: 'AccountSocial';
  readonly clickThroughRate?: Maybe<Scalars['Float']['output']>;
  readonly clicks?: Maybe<AccountClicks>;
  readonly date?: Maybe<Scalars['String']['output']>;
  readonly name?: Maybe<Scalars['String']['output']>;
  readonly views?: Maybe<AccountViews>;
};

export type AccountSocials = {
  readonly __typename: 'AccountSocials';
  readonly socials?: Maybe<ReadonlyArray<Maybe<AccountSocial>>>;
  readonly timeseries?: Maybe<ReadonlyArray<Maybe<AccountSocial>>>;
};

export type AccountStatsigCloudDynamicConfig = {
  readonly __typename: 'AccountStatsigCloudDynamicConfig';
  readonly name?: Maybe<Scalars['String']['output']>;
  readonly value?: Maybe<Scalars['String']['output']>;
};

export type AccountStatsigCloudExperiment = {
  readonly __typename: 'AccountStatsigCloudExperiment';
  readonly name?: Maybe<Scalars['String']['output']>;
  readonly value?: Maybe<Scalars['String']['output']>;
};

export type AccountStatsigCloudFeatureGate = {
  readonly __typename: 'AccountStatsigCloudFeatureGate';
  readonly name?: Maybe<Scalars['String']['output']>;
  readonly value?: Maybe<Scalars['Boolean']['output']>;
};

export type AccountStatsigResult = {
  readonly __typename: 'AccountStatsigResult';
  readonly accountUsername?: Maybe<Scalars['String']['output']>;
  readonly cloudDynamicConfigs?: Maybe<ReadonlyArray<Maybe<AccountStatsigCloudDynamicConfig>>>;
  readonly cloudExperiments?: Maybe<ReadonlyArray<Maybe<AccountStatsigCloudExperiment>>>;
  readonly cloudFeatureGates?: Maybe<ReadonlyArray<Maybe<AccountStatsigCloudFeatureGate>>>;
  readonly userUsername?: Maybe<Scalars['String']['output']>;
  readonly warehouseNativeDynamicConfigs?: Maybe<ReadonlyArray<Maybe<AccountStatsigWarehouseNativeDynamicConfig>>>;
  readonly warehouseNativeExperiments?: Maybe<ReadonlyArray<Maybe<AccountStatsigWarehouseNativeExperiment>>>;
  readonly warehouseNativeFeatureGates?: Maybe<ReadonlyArray<Maybe<AccountStatsigWarehouseNativeFeatureGate>>>;
};

export type AccountStatsigWarehouseNativeDynamicConfig = {
  readonly __typename: 'AccountStatsigWarehouseNativeDynamicConfig';
  readonly name?: Maybe<Scalars['String']['output']>;
  readonly value?: Maybe<Scalars['String']['output']>;
};

export type AccountStatsigWarehouseNativeExperiment = {
  readonly __typename: 'AccountStatsigWarehouseNativeExperiment';
  readonly name?: Maybe<Scalars['String']['output']>;
  readonly value?: Maybe<Scalars['String']['output']>;
};

export type AccountStatsigWarehouseNativeFeatureGate = {
  readonly __typename: 'AccountStatsigWarehouseNativeFeatureGate';
  readonly name?: Maybe<Scalars['String']['output']>;
  readonly value?: Maybe<Scalars['Boolean']['output']>;
};

export type AccountSubscriber = {
  readonly __typename: 'AccountSubscriber';
  readonly dailyTotal?: Maybe<Scalars['Int']['output']>;
  readonly date: Scalars['String']['output'];
  readonly notifications?: Maybe<ReadonlyArray<Maybe<AccountSubscriberNotification>>>;
  readonly subscribersClicks: Scalars['Int']['output'];
  readonly subscribersTotal: Scalars['Int']['output'];
};

export type AccountSubscriberNotification = {
  readonly __typename: 'AccountSubscriberNotification';
  readonly title?: Maybe<Scalars['String']['output']>;
};

export type AccountSubscribers = {
  readonly __typename: 'AccountSubscribers';
  readonly emailSubscribers?: Maybe<ReadonlyArray<AccountSubscriber>>;
  readonly interval?: Maybe<Interval>;
  readonly smsSubscribers?: Maybe<ReadonlyArray<AccountSubscriber>>;
  readonly subscribers?: Maybe<ReadonlyArray<AccountSubscriber>>;
  readonly total?: Maybe<AccountSubscribersTotal>;
};

export type AccountSubscribersTotal = {
  readonly __typename: 'AccountSubscribersTotal';
  readonly clicks?: Maybe<Scalars['Int']['output']>;
  readonly ctr?: Maybe<Scalars['Float']['output']>;
  readonly notificationRecipients?: Maybe<Scalars['Int']['output']>;
  readonly subscribers?: Maybe<Scalars['Int']['output']>;
};

export type AccountViews = {
  readonly __typename: 'AccountViews';
  readonly leaplink?: Maybe<Scalars['Int']['output']>;
  readonly profile?: Maybe<Scalars['Int']['output']>;
  readonly subscriber?: Maybe<Scalars['Int']['output']>;
  readonly total: Scalars['Int']['output'];
};

export type AccountWorkspaceInvitation = {
  readonly __typename: 'AccountWorkspaceInvitation';
  readonly account: Account;
  readonly createdAt?: Maybe<Scalars['Date']['output']>;
  readonly status: WorkspaceInvitationStatus;
  readonly updatedAt?: Maybe<Scalars['Date']['output']>;
  readonly workspace: Workspace;
};

export type AccountsAccountOverview = {
  readonly __typename: 'AccountsAccountOverview';
  readonly accountId: Scalars['Int']['output'];
  readonly clickThroughBenchmark: Scalars['Float']['output'];
  readonly clickThroughRate: Scalars['Float']['output'];
  readonly timeToClick: Scalars['Float']['output'];
  readonly timeseries: ReadonlyArray<AccountActivity>;
  readonly totalClicks: Scalars['Int']['output'];
  readonly totalViews: Scalars['Int']['output'];
};

export type AccountsAnalytics = {
  readonly __typename: 'AccountsAnalytics';
  readonly lifetime: AccountsLifetime;
  readonly overview: AccountsOverview;
};

export type AccountsLifetime = {
  readonly __typename: 'AccountsLifetime';
  readonly clickThroughRate: Scalars['Float']['output'];
  readonly clicks?: Maybe<AccountsLifetimeClicks>;
  readonly timeToClick: Scalars['Float']['output'];
  readonly views?: Maybe<AccountsLifetimeViews>;
};

export type AccountsLifetimeClicks = {
  readonly __typename: 'AccountsLifetimeClicks';
  readonly profile: Scalars['Int']['output'];
  readonly total: Scalars['Int']['output'];
};

export type AccountsLifetimeViews = {
  readonly __typename: 'AccountsLifetimeViews';
  readonly total: Scalars['Int']['output'];
};

export type AccountsOverview = {
  readonly __typename: 'AccountsOverview';
  readonly accounts: ReadonlyArray<AccountsAccountOverview>;
};

export type ActiveWalletConnection = BaseWalletConnection & {
  readonly __typename: 'ActiveWalletConnection';
  readonly accountId: Scalars['String']['output'];
  readonly countryCode?: Maybe<Scalars['String']['output']>;
  readonly currency: Scalars['String']['output'];
  readonly dashboardUrl?: Maybe<Scalars['String']['output']>;
  readonly program: Scalars['String']['output'];
  readonly provider: Scalars['String']['output'];
  readonly status: Scalars['String']['output'];
  readonly updatedAt: Scalars['Float']['output'];
};

export type ActivityByBookPlatformByLinkTotals = {
  readonly __typename: 'ActivityByBookPlatformByLinkTotals';
  readonly clickThroughRate: Scalars['Float']['output'];
  readonly clicks: Scalars['Int']['output'];
  readonly platform: Scalars['String']['output'];
};

export type ActivityByCountryByLinkTotals = {
  readonly __typename: 'ActivityByCountryByLinkTotals';
  readonly clickThroughRate: Scalars['Float']['output'];
  readonly clicks: Scalars['Int']['output'];
  readonly countryCode: Scalars['String']['output'];
};

export type ActivityByDeviceByLinkTotals = {
  readonly __typename: 'ActivityByDeviceByLinkTotals';
  readonly clickThroughRate: Scalars['Float']['output'];
  readonly clicks: Scalars['Int']['output'];
  readonly device: Scalars['String']['output'];
};

export type ActivityByLinkDaily = {
  readonly __typename: 'ActivityByLinkDaily';
  readonly clickThroughRate: Scalars['Float']['output'];
  readonly conversionCount: Scalars['Int']['output'];
  readonly conversionRate: Scalars['Float']['output'];
  readonly count: Scalars['Int']['output'];
  readonly date: Scalars['String']['output'];
  readonly notifications: ReadonlyArray<Notification>;
  readonly timeToClick: Scalars['Float']['output'];
};

export type ActivityByLinkTotals = {
  readonly __typename: 'ActivityByLinkTotals';
  readonly clickThroughRate: Scalars['Float']['output'];
  readonly conversionCount: Scalars['Int']['output'];
  readonly conversionRate: Scalars['Float']['output'];
  readonly count: Scalars['Int']['output'];
  readonly timeToClick: Scalars['Float']['output'];
  readonly viewCount: Scalars['Int']['output'];
};

export type ActivityByMobileAppPlatformByLinkTotals = {
  readonly __typename: 'ActivityByMobileAppPlatformByLinkTotals';
  readonly clickThroughRate: Scalars['Float']['output'];
  readonly clicks: Scalars['Int']['output'];
  readonly platform: Scalars['String']['output'];
};

export type ActivityByMusicPlatformByLinkTotals = {
  readonly __typename: 'ActivityByMusicPlatformByLinkTotals';
  readonly clickThroughRate: Scalars['Float']['output'];
  readonly clicks: Scalars['Int']['output'];
  readonly platform: Scalars['String']['output'];
};

export type ActivityByPodcastPlatformByLinkTotals = {
  readonly __typename: 'ActivityByPodcastPlatformByLinkTotals';
  readonly clickThroughRate: Scalars['Float']['output'];
  readonly clicks: Scalars['Int']['output'];
  readonly platform: Scalars['String']['output'];
};

export type ActivityByPresavePlatformByLinkTotals = {
  readonly __typename: 'ActivityByPresavePlatformByLinkTotals';
  readonly clickThroughRate: Scalars['Float']['output'];
  readonly clicks: Scalars['Int']['output'];
  readonly platform: Scalars['String']['output'];
  readonly presaves: Scalars['Int']['output'];
};

export type ActivityByReferrerByLinkTotals = {
  readonly __typename: 'ActivityByReferrerByLinkTotals';
  readonly clickThroughRate: Scalars['Float']['output'];
  readonly clicks: Scalars['Int']['output'];
  readonly referrer: Scalars['String']['output'];
};

export type AddAccountProductsToCollectionInput = {
  readonly accountProductIds: ReadonlyArray<Scalars['String']['input']>;
  readonly accountUuid: Scalars['String']['input'];
  readonly collectionId: Scalars['String']['input'];
};

export type AddCommerceBrandProfileRateArgs = {
  /** The account uuid of the brand profile owner */
  readonly accountUuid: Scalars['String']['input'];
  /** The rate to add to the brand profile */
  readonly rate: CommerceBrandProfileRateInput;
};

export type AddCommerceCollectionFromTemplateInput = {
  /** UUID of the account creating the collection */
  readonly accountUuid: Scalars['String']['input'];
  /** Whether the collection should be active (defaults to false, may auto-activate if collection has products and a title) */
  readonly active?: InputMaybe<Scalars['Boolean']['input']>;
  /** UUID of the collection template to duplicate from */
  readonly templateId: Scalars['String']['input'];
  /** Optional custom title for the collection (defaults to template title) */
  readonly title?: InputMaybe<Scalars['String']['input']>;
};

export type AddCommerceCollectionInput = {
  readonly accountProductIds?: InputMaybe<ReadonlyArray<Scalars['String']['input']>>;
  readonly accountUuid: Scalars['String']['input'];
  readonly active?: InputMaybe<Scalars['Boolean']['input']>;
  readonly title?: InputMaybe<Scalars['String']['input']>;
  readonly type?: InputMaybe<Scalars['String']['input']>;
  readonly ugcContent?: InputMaybe<ReadonlyArray<UgcContentInput>>;
};

export type AddCommercePreviewForUserInput = {
  readonly accountUuid: Scalars['String']['input'];
  readonly addAsStandalones?: InputMaybe<Scalars['Boolean']['input']>;
  readonly collectionTitle?: InputMaybe<Scalars['String']['input']>;
  readonly previewId: Scalars['String']['input'];
  readonly selectedOriginalUrls?: InputMaybe<ReadonlyArray<Scalars['String']['input']>>;
};

export type AddCommerceStoreProductInput = {
  readonly accountUuid: Scalars['String']['input'];
  readonly active?: InputMaybe<Scalars['Boolean']['input']>;
  readonly addedStandalone?: InputMaybe<Scalars['Boolean']['input']>;
  readonly catalogInstanceId?: InputMaybe<Scalars['String']['input']>;
  readonly catalogProductId?: InputMaybe<Scalars['String']['input']>;
  readonly currency?: InputMaybe<Scalars['String']['input']>;
  readonly image?: InputMaybe<Scalars['String']['input']>;
  /** This field should be populated by the FE when a store product is added. It should be the original url that the user inputted. Used by the BE for regenerating affiliate urls that depend on accountProductId for tracking. */
  readonly originalUserInputtedUrl?: InputMaybe<Scalars['String']['input']>;
  readonly position?: InputMaybe<Scalars['Float']['input']>;
  readonly price?: InputMaybe<Scalars['Int']['input']>;
  readonly priceVisible?: InputMaybe<Scalars['Boolean']['input']>;
  readonly title?: InputMaybe<Scalars['String']['input']>;
  readonly url?: InputMaybe<Scalars['String']['input']>;
  readonly vendor?: InputMaybe<Scalars['String']['input']>;
};

export type AddCommerceStoreProductsInput = {
  readonly accountUuid: Scalars['String']['input'];
  readonly productDetails: ReadonlyArray<AddCommerceStoreProductsInputProductDetails>;
};

export type AddCommerceStoreProductsInputProductDetails = {
  readonly active?: InputMaybe<Scalars['Boolean']['input']>;
  readonly addedStandalone?: InputMaybe<Scalars['Boolean']['input']>;
  readonly catalogInstanceId?: InputMaybe<Scalars['String']['input']>;
  readonly catalogProductId?: InputMaybe<Scalars['String']['input']>;
  readonly currency?: InputMaybe<Scalars['String']['input']>;
  readonly image?: InputMaybe<Scalars['String']['input']>;
  readonly position?: InputMaybe<Scalars['Float']['input']>;
  readonly price?: InputMaybe<Scalars['Int']['input']>;
  readonly priceVisible?: InputMaybe<Scalars['Boolean']['input']>;
  readonly title?: InputMaybe<Scalars['String']['input']>;
  readonly url?: InputMaybe<Scalars['String']['input']>;
  readonly vendor?: InputMaybe<Scalars['String']['input']>;
};

export type AddCommerceStoreProductsToCollectionInput = {
  readonly accountUuid: Scalars['String']['input'];
  readonly collectionId: Scalars['String']['input'];
  readonly ids: ReadonlyArray<Scalars['String']['input']>;
};

export type AddCommerceStoreProductsToCollectionsInput = {
  /** AccountProduct IDs */
  readonly accountProductIds: ReadonlyArray<Scalars['String']['input']>;
  readonly accountUuid: Scalars['String']['input'];
  /** Collection IDs */
  readonly collectionIds: ReadonlyArray<Scalars['String']['input']>;
};

export type AddCommerceStoreProductsToCollectionsOutput = {
  readonly __typename: 'AddCommerceStoreProductsToCollectionsOutput';
  readonly collections: ReadonlyArray<CommerceCollection>;
};

export type AddCommerceStoreProductsToStorefrontPostsInput = {
  /** AccountProduct IDs */
  readonly accountProductIds: ReadonlyArray<Scalars['String']['input']>;
  readonly accountUuid: Scalars['String']['input'];
  readonly postIds: ReadonlyArray<Scalars['String']['input']>;
};

export type AddCommerceStoreProductsToStorefrontPostsOutput = {
  readonly __typename: 'AddCommerceStoreProductsToStorefrontPostsOutput';
  readonly posts: ReadonlyArray<CommerceStorefrontPost>;
};

export type AddCommerceStorefrontPostInput = {
  readonly accountProductIds?: InputMaybe<ReadonlyArray<Scalars['String']['input']>>;
  readonly accountUuid: Scalars['String']['input'];
  readonly active?: InputMaybe<Scalars['Boolean']['input']>;
  readonly title?: InputMaybe<Scalars['String']['input']>;
  readonly ugcContent?: InputMaybe<ReadonlyArray<UgcContentInput>>;
};

export type AddCommerceUgcContentToCollectionInput = {
  readonly accountUuid: Scalars['String']['input'];
  readonly collectionId: Scalars['String']['input'];
  readonly ugcContent: ReadonlyArray<UgcContentInput>;
};

export type AddCommerceUgcContentToStorefrontPostInput = {
  readonly accountUuid: Scalars['String']['input'];
  readonly postId: Scalars['String']['input'];
  readonly ugcContent: ReadonlyArray<UgcContentInput>;
};

export type AddCommerceUserSelectedVendorAffinitiesInput = {
  readonly accountUuid: Scalars['String']['input'];
  readonly vendors: ReadonlyArray<Scalars['String']['input']>;
};

export type AddDocumentResult = {
  readonly __typename: 'AddDocumentResult';
  readonly id?: Maybe<Scalars['String']['output']>;
};

export type AddFieldsToFormInput = {
  readonly accountUuid: Scalars['String']['input'];
  readonly fields?: InputMaybe<ReadonlyArray<CreateFormFieldInput>>;
  readonly formId: Scalars['String']['input'];
};

export type AddFieldsToFormOutput = {
  readonly __typename: 'AddFieldsToFormOutput';
  readonly form?: Maybe<FormModel>;
};

export type AddLinkInput = {
  readonly active?: InputMaybe<Scalars['Boolean']['input']>;
  readonly extensionLinkContext?: InputMaybe<ExtensionLinkContextInput>;
  readonly hidden?: InputMaybe<Scalars['Boolean']['input']>;
  readonly linkTypeId?: InputMaybe<Scalars['String']['input']>;
  readonly meta?: InputMaybe<AddLinkMetaInput>;
  readonly modifiers?: InputMaybe<LinkModifiersInput>;
  /** The parent link ID when adding a link to a collection */
  readonly parentId?: InputMaybe<Scalars['Int']['input']>;
  readonly position?: InputMaybe<Scalars['Int']['input']>;
  readonly provider?: InputMaybe<Scalars['String']['input']>;
  readonly title?: InputMaybe<Scalars['String']['input']>;
  readonly url?: InputMaybe<Scalars['String']['input']>;
};

export type AddLinkMetaInput = {
  readonly channel?: InputMaybe<Scalars['String']['input']>;
  readonly communityPlatform?: InputMaybe<Scalars['String']['input']>;
  readonly linkRecs?: InputMaybe<LinkRecsMetaInput>;
  readonly recommendedLinkType?: InputMaybe<Scalars['String']['input']>;
  readonly recommendedLinkTypeId?: InputMaybe<Scalars['String']['input']>;
  readonly section?: InputMaybe<Scalars['String']['input']>;
  readonly source?: InputMaybe<Scalars['String']['input']>;
};

export type AddLinkMutationInput = {
  readonly accountId?: InputMaybe<Scalars['Int']['input']>;
  readonly input?: InputMaybe<AddLinkInput>;
  readonly type: LinkType;
};

export type AddMultipleLinksResult = {
  readonly __typename: 'AddMultipleLinksResult';
  readonly links?: Maybe<ReadonlyArray<Maybe<Link>>>;
};

export type AddMutipleSocialLinksResult = {
  readonly __typename: 'AddMutipleSocialLinksResult';
  readonly errors?: Maybe<ReadonlyArray<Maybe<Scalars['String']['output']>>>;
  readonly user?: Maybe<User>;
};

export type AddSocialContentToLinkAssociationsInput = {
  readonly associateMethod?: InputMaybe<Scalars['String']['input']>;
  readonly associationMethods?: InputMaybe<Scalars['String']['input']>;
  readonly similarityScore?: InputMaybe<Scalars['Int']['input']>;
  readonly socialContentId: Scalars['String']['input'];
  readonly socialIntegrationId: Scalars['String']['input'];
  readonly socialPlatform: Scalars['String']['input'];
  readonly source: Scalars['String']['input'];
  readonly sourceId: Scalars['String']['input'];
};

export type AddedVendorToCatalogResult = {
  readonly __typename: 'AddedVendorToCatalogResult';
  readonly error?: Maybe<Scalars['String']['output']>;
  readonly notificationId?: Maybe<Scalars['String']['output']>;
  readonly success: Scalars['Boolean']['output'];
  readonly vendorSlug: Scalars['String']['output'];
};

export type AdminInvitation = {
  readonly __typename: 'AdminInvitation';
  readonly createdAt?: Maybe<Scalars['Date']['output']>;
  readonly id: Scalars['Int']['output'];
  readonly identifier?: Maybe<Scalars['String']['output']>;
  readonly invitationId: Scalars['String']['output'];
  readonly invitationStatus?: Maybe<AdminInvitationStatus>;
  readonly updatedAt?: Maybe<Scalars['Date']['output']>;
};

export enum AdminInvitationInviteeRole {
  Admin = 'ADMIN',
  Owner = 'OWNER'
}

export enum AdminInvitationStatus {
  Accepted = 'ACCEPTED',
  Declined = 'DECLINED',
  Pending = 'PENDING'
}

export enum AffiliateAdvertiserType {
  AmazonAe = 'amazonAe',
  AmazonAu = 'amazonAu',
  AmazonBr = 'amazonBr',
  AmazonCa = 'amazonCa',
  AmazonCn = 'amazonCn',
  AmazonDe = 'amazonDe',
  AmazonEs = 'amazonEs',
  AmazonFr = 'amazonFr',
  AmazonGb = 'amazonGb',
  AmazonIn = 'amazonIn',
  AmazonIt = 'amazonIt',
  AmazonJp = 'amazonJp',
  AmazonMx = 'amazonMx',
  AmazonNl = 'amazonNl',
  AmazonPl = 'amazonPl',
  AmazonSa = 'amazonSa',
  AmazonSe = 'amazonSe',
  AmazonSg = 'amazonSg',
  AmazonUs = 'amazonUs',
  BarnesAndNoble = 'barnesAndNoble',
  BetterWorldBooks = 'betterWorldBooks',
  BooksAMillion = 'booksAMillion',
  Deezer = 'deezer',
  Tidal = 'tidal'
}

export enum AffiliateProgramType {
  Amazon = 'amazon',
  Apple = 'apple',
  Awin = 'awin',
  CommissionJunction = 'commissionJunction'
}

export type AffiliateToken = {
  readonly __typename: 'AffiliateToken';
  readonly advertiser?: Maybe<AffiliateAdvertiserType>;
  readonly aid?: Maybe<Scalars['String']['output']>;
  readonly program: AffiliateProgramType;
  readonly token: Scalars['String']['output'];
};

export type AffiliateTransaction = {
  readonly __typename: 'AffiliateTransaction';
  readonly amount: Scalars['Float']['output'];
  readonly commissionRate: Scalars['Float']['output'];
  readonly created: Scalars['DateTime']['output'];
  readonly currency: Scalars['String']['output'];
  readonly description: Scalars['String']['output'];
  readonly id: Scalars['String']['output'];
  readonly image: Scalars['String']['output'];
  readonly listPrice: Scalars['Float']['output'];
  readonly status: Scalars['String']['output'];
};

export type AgeGateRule = {
  readonly __typename: 'AgeGateRule';
  readonly message?: Maybe<Scalars['String']['output']>;
  readonly minAge?: Maybe<Scalars['Int']['output']>;
};

export type AgeGateRuleInput = {
  readonly message?: InputMaybe<Scalars['String']['input']>;
  readonly minAge?: InputMaybe<Scalars['Int']['input']>;
};

export type AgreeToShareModel = {
  readonly __typename: 'AgreeToShareModel';
  readonly agreeToShare: Scalars['Boolean']['output'];
};

export type AmazonAffiliate = {
  readonly __typename: 'AmazonAffiliate';
  readonly style: AmazonAffiliateStyle;
  readonly type: AmazonAffiliateType;
};

export type AmazonAffiliateInput = {
  readonly style: AmazonAffiliateStyle;
  readonly type: AmazonAffiliateType;
};

export enum AmazonAffiliateStyle {
  Dot = 'DOT',
  Full = 'FULL',
  None = 'NONE'
}

export enum AmazonAffiliateType {
  Eligible = 'ELIGIBLE',
  Handmade = 'HANDMADE',
  Influencer = 'INFLUENCER'
}

export type AmazonTrackingIdInput = {
  readonly __typename: 'AmazonTrackingIdInput';
  readonly accountUuid: Scalars['String']['output'];
  readonly id?: Maybe<Scalars['String']['output']>;
};

export type AnalyticsChatCompletionResponse = {
  readonly __typename: 'AnalyticsChatCompletionResponse';
  readonly activityMessage?: Maybe<Scalars['String']['output']>;
  readonly chat: ReadonlyArray<Chat>;
  readonly commerceMessage?: Maybe<Scalars['String']['output']>;
  readonly conversationId: Scalars['String']['output'];
};

export type AnalyticsInsights = {
  readonly __typename: 'AnalyticsInsights';
  readonly clicks: Scalars['Int']['output'];
  readonly views: Scalars['Int']['output'];
};

export type AnimateLinkPreviousStateLink = {
  readonly __typename: 'AnimateLinkPreviousStateLink';
  readonly animation?: Maybe<ButtonHighlightType>;
  readonly linkId: Scalars['Int']['output'];
};

export type AnimatedBackground = {
  readonly __typename: 'AnimatedBackground';
  readonly color: Scalars['String']['output'];
  readonly style: BackgroundStyle;
  readonly type: BackgroundType;
};

export type AppearanceBackgroundOption = {
  readonly __typename: 'AppearanceBackgroundOption';
  readonly assetUrl?: Maybe<Scalars['String']['output']>;
  readonly featureFlag?: Maybe<Scalars['String']['output']>;
  readonly id: Scalars['String']['output'];
  readonly subOptions?: Maybe<ReadonlyArray<Maybe<AppearanceBackgroundSubOptions>>>;
  readonly title: Scalars['String']['output'];
  readonly visibility: Scalars['String']['output'];
};

export type AppearanceBackgroundSubOptionOptions = {
  readonly __typename: 'AppearanceBackgroundSubOptionOptions';
  readonly assetUrl?: Maybe<Scalars['String']['output']>;
  readonly featureFlag?: Maybe<Scalars['String']['output']>;
  readonly id: Scalars['String']['output'];
  readonly title: Scalars['String']['output'];
  readonly visibility: Scalars['String']['output'];
};

export type AppearanceBackgroundSubOptions = {
  readonly __typename: 'AppearanceBackgroundSubOptions';
  readonly options?: Maybe<ReadonlyArray<Maybe<AppearanceBackgroundSubOptionOptions>>>;
  readonly title: Scalars['String']['output'];
};

export type AppearanceButtonCornerOption = {
  readonly __typename: 'AppearanceButtonCornerOption';
  readonly featureFlag?: Maybe<Scalars['String']['output']>;
  readonly id: Scalars['String']['output'];
  readonly title: Scalars['String']['output'];
  readonly visibility: Scalars['String']['output'];
};

export type AppearanceButtonOption = {
  readonly __typename: 'AppearanceButtonOption';
  readonly featureFlag?: Maybe<Scalars['String']['output']>;
  readonly group: Scalars['String']['output'];
  readonly id: Scalars['String']['output'];
  readonly title: Scalars['String']['output'];
  readonly visibility: Scalars['String']['output'];
};

export type AppearanceButtonShadowOption = {
  readonly __typename: 'AppearanceButtonShadowOption';
  readonly featureFlag?: Maybe<Scalars['String']['output']>;
  readonly id: Scalars['String']['output'];
  readonly title: Scalars['String']['output'];
  readonly visibility: Scalars['String']['output'];
};

export type AppearanceButtonStyleOption = {
  readonly __typename: 'AppearanceButtonStyleOption';
  readonly featureFlag?: Maybe<Scalars['String']['output']>;
  readonly id: Scalars['String']['output'];
  readonly title: Scalars['String']['output'];
  readonly visibility: Scalars['String']['output'];
};

export type AppearanceColorPaletteOption = {
  readonly __typename: 'AppearanceColorPaletteOption';
  readonly alternatePalette: ReadonlyArray<Scalars['String']['output']>;
  readonly palette: ReadonlyArray<Scalars['String']['output']>;
};

export type AppearanceFontOption = {
  readonly __typename: 'AppearanceFontOption';
  readonly assetUrl: Scalars['String']['output'];
  readonly featureFlag?: Maybe<Scalars['String']['output']>;
  readonly fontSize: Scalars['String']['output'];
  readonly fontWeight: Scalars['String']['output'];
  readonly group: Scalars['String']['output'];
  readonly id: Scalars['String']['output'];
  readonly letterSpacing: Scalars['String']['output'];
  readonly title: Scalars['String']['output'];
  readonly unpaddedAssetUrl?: Maybe<Scalars['String']['output']>;
  readonly visibility: Scalars['String']['output'];
};

export type AppearanceGradientOption = {
  readonly __typename: 'AppearanceGradientOption';
  readonly assetUrl: Scalars['String']['output'];
  readonly assetUrlWebp: Scalars['String']['output'];
  readonly colors: ReadonlyArray<Maybe<Scalars['String']['output']>>;
  readonly featureFlag?: Maybe<Scalars['String']['output']>;
  readonly hideAnimated?: Maybe<Scalars['Boolean']['output']>;
  readonly id: Scalars['String']['output'];
  readonly title: Scalars['String']['output'];
  readonly visibility: Scalars['String']['output'];
};

export type AppearanceHeadingEffect = {
  readonly __typename: 'AppearanceHeadingEffect';
  readonly label?: Maybe<Scalars['String']['output']>;
  readonly value?: Maybe<Scalars['String']['output']>;
};

export type AppearanceHeadingFonts = {
  readonly __typename: 'AppearanceHeadingFonts';
  readonly other: ReadonlyArray<AppearanceFontOption>;
  readonly suggested: ReadonlyArray<AppearanceFontOption>;
};

export type AppearanceHeadingLogoSize = {
  readonly __typename: 'AppearanceHeadingLogoSize';
  readonly classname?: Maybe<Scalars['String']['output']>;
  readonly label?: Maybe<Scalars['String']['output']>;
  readonly value?: Maybe<Scalars['String']['output']>;
};

export type AppearanceHeadingOption = {
  readonly __typename: 'AppearanceHeadingOption';
  readonly fonts: AppearanceHeadingFonts;
  readonly options: AppearanceHeadingOptions;
};

export type AppearanceHeadingOptions = {
  readonly __typename: 'AppearanceHeadingOptions';
  readonly effects: ReadonlyArray<AppearanceHeadingEffect>;
  readonly logoSizes: ReadonlyArray<AppearanceHeadingLogoSize>;
  readonly sizes: ReadonlyArray<AppearanceHeadingSize>;
  readonly types: ReadonlyArray<AppearanceHeadingType>;
};

export type AppearanceHeadingSize = {
  readonly __typename: 'AppearanceHeadingSize';
  readonly classname?: Maybe<Scalars['String']['output']>;
  readonly label?: Maybe<Scalars['String']['output']>;
  readonly value?: Maybe<Scalars['String']['output']>;
};

export type AppearanceHeadingType = {
  readonly __typename: 'AppearanceHeadingType';
  readonly label?: Maybe<Scalars['String']['output']>;
  readonly value?: Maybe<Scalars['String']['output']>;
};

export type AppearanceImageBackgroundEffect = {
  readonly __typename: 'AppearanceImageBackgroundEffect';
  readonly label?: Maybe<Scalars['String']['output']>;
  readonly value?: Maybe<Scalars['String']['output']>;
};

export type AppearanceOptions = {
  readonly __typename: 'AppearanceOptions';
  readonly backgroundImageEffects: ReadonlyArray<AppearanceImageBackgroundEffect>;
  readonly backgrounds: ReadonlyArray<AppearanceBackgroundOption>;
  readonly buttonCornerStyles: ReadonlyArray<AppearanceButtonCornerOption>;
  readonly buttonShadowStyles: ReadonlyArray<AppearanceButtonShadowOption>;
  readonly buttonStyles: ReadonlyArray<AppearanceButtonStyleOption>;
  readonly buttons: ReadonlyArray<AppearanceButtonOption>;
  readonly colorPalette: AppearanceColorPaletteOption;
  readonly fonts: ReadonlyArray<AppearanceFontOption>;
  readonly gradients: ReadonlyArray<AppearanceGradientOption>;
  readonly heading: AppearanceHeadingOption;
  readonly stylePresets: ReadonlyArray<AppearanceStylePresetOption>;
  readonly themes: ReadonlyArray<AppearanceThemeOption>;
};

export type AppearanceSettings = {
  readonly __typename: 'AppearanceSettings';
  readonly avatarMode: AvatarMode;
  readonly backgroundColor: Scalars['String']['output'];
  readonly backgroundHeroColor?: Maybe<Scalars['String']['output']>;
  readonly backgroundImage?: Maybe<Scalars['String']['output']>;
  readonly backgroundPoster?: Maybe<Scalars['String']['output']>;
  readonly backgroundStyle: Scalars['String']['output'];
  readonly buttonColor: Scalars['String']['output'];
  readonly buttonCornerStyle: Scalars['String']['output'];
  readonly buttonShadowStyle: Scalars['String']['output'];
  readonly buttonStyle: Scalars['String']['output'];
  readonly buttonTextColor: Scalars['String']['output'];
  readonly description?: Maybe<Scalars['String']['output']>;
  readonly fontColor: Scalars['String']['output'];
  readonly fontStyle?: Maybe<Scalars['String']['output']>;
  readonly isLogoVisible: Scalars['Boolean']['output'];
  readonly luminance: Scalars['String']['output'];
  readonly metaAttributes?: Maybe<MetaAttributes>;
  readonly pageTitle?: Maybe<Scalars['String']['output']>;
  readonly profilePicture?: Maybe<Scalars['String']['output']>;
  readonly shadowColor: Scalars['String']['output'];
  readonly theme: Scalars['String']['output'];
};

export type AppearanceStylePresetOption = {
  readonly __typename: 'AppearanceStylePresetOption';
  readonly assetUrl?: Maybe<Scalars['String']['output']>;
  readonly buttonCornerStyle: Scalars['String']['output'];
  readonly buttonShadowStyle: Scalars['String']['output'];
  readonly buttonStyle: Scalars['String']['output'];
  readonly featureFlag?: Maybe<Scalars['String']['output']>;
  readonly fontStyle: Scalars['String']['output'];
  readonly id: Scalars['String']['output'];
  readonly isPro: Scalars['Boolean']['output'];
  readonly title: Scalars['String']['output'];
  readonly visibility: Scalars['String']['output'];
};

export type AppearanceThemeOption = {
  readonly __typename: 'AppearanceThemeOption';
  readonly assetUrl?: Maybe<Scalars['String']['output']>;
  readonly assetUrlWebp?: Maybe<Scalars['String']['output']>;
  readonly backgroundAssetUrl?: Maybe<Scalars['String']['output']>;
  readonly backgroundAssetUrlWebp?: Maybe<Scalars['String']['output']>;
  readonly baseThemeVisibility?: Maybe<Scalars['String']['output']>;
  readonly category?: Maybe<Scalars['String']['output']>;
  readonly defaultFont?: Maybe<Scalars['String']['output']>;
  readonly editable: Scalars['Boolean']['output'];
  readonly featureFlag?: Maybe<Scalars['String']['output']>;
  readonly id: Scalars['String']['output'];
  readonly isBaseThemePro?: Maybe<Scalars['Boolean']['output']>;
  readonly thumbnailUrl?: Maybe<Scalars['String']['output']>;
  readonly title: Scalars['String']['output'];
  readonly visibility: Scalars['String']['output'];
};

export type ArchiveAllInactiveLinksResult = {
  readonly __typename: 'ArchiveAllInactiveLinksResult';
  readonly archivedCount?: Maybe<Scalars['Int']['output']>;
  readonly success?: Maybe<Scalars['Boolean']['output']>;
};

export type ArchiveSponsoredLinksResult = {
  readonly __typename: 'ArchiveSponsoredLinksResult';
  readonly archivedCount?: Maybe<Scalars['Int']['output']>;
  readonly message?: Maybe<Scalars['String']['output']>;
  readonly success?: Maybe<Scalars['Boolean']['output']>;
};

export type Asset = {
  readonly __typename: 'Asset';
  readonly communityPlatform?: Maybe<Scalars['String']['output']>;
  readonly items?: Maybe<ReadonlyArray<AssetItem>>;
  readonly primaryUrl?: Maybe<Scalars['String']['output']>;
  readonly status: AssetStatus;
  /** When the URL expires. If expired, the URL will be redirected to visitor hub. */
  readonly urlExpiredAt?: Maybe<Scalars['DateTime']['output']>;
};

export type AssetItem = {
  readonly __typename: 'AssetItem';
  readonly extension?: Maybe<Scalars['String']['output']>;
  readonly filename?: Maybe<Scalars['String']['output']>;
  readonly id?: Maybe<Scalars['String']['output']>;
  readonly mimeType?: Maybe<Scalars['String']['output']>;
  readonly size?: Maybe<Scalars['Int']['output']>;
  readonly url: Scalars['String']['output'];
};

/** The status of the asset */
export enum AssetStatus {
  Active = 'ACTIVE',
  Inactive = 'INACTIVE'
}

export type AssistantMessage = {
  readonly __typename: 'AssistantMessage';
  readonly content: Scalars['String']['output'];
  readonly role: Scalars['String']['output'];
};

export type AssistantResponse = {
  readonly __typename: 'AssistantResponse';
  readonly chat: ReadonlyArray<AssistantMessage>;
  readonly conversationId: Scalars['String']['output'];
  readonly done: Scalars['Boolean']['output'];
  readonly responseId?: Maybe<Scalars['String']['output']>;
  readonly toolId?: Maybe<Scalars['String']['output']>;
};

export type AssociationMethodHistory = {
  readonly __typename: 'AssociationMethodHistory';
  readonly action: Scalars['String']['output'];
  readonly method: Scalars['String']['output'];
  readonly ts: Scalars['String']['output'];
};

export type AssociationMethodState = {
  readonly __typename: 'AssociationMethodState';
  readonly method: Scalars['String']['output'];
  readonly similarity_score: Scalars['Int']['output'];
  readonly status: Scalars['String']['output'];
};

export type AssociationMethods = {
  readonly __typename: 'AssociationMethods';
  readonly history?: Maybe<ReadonlyArray<Maybe<AssociationMethodHistory>>>;
  readonly state?: Maybe<ReadonlyArray<Maybe<AssociationMethodState>>>;
};

export type AttributeStorageLocation = {
  readonly __typename: 'AttributeStorageLocation';
  readonly s3?: Maybe<S3BucketInformation>;
};

export type AudienceManagerSubscriberTableColumnModel = {
  readonly __typename: 'AudienceManagerSubscriberTableColumnModel';
  /** If the field shall be selected by default. */
  readonly checked: Scalars['Boolean']['output'];
  readonly columnId: Scalars['String']['output'];
  /** The ID of the form field. Note one field can be re-used by multiple forms. This is only applicable if type is FORM_FIELD. */
  readonly formFieldId?: Maybe<Scalars['String']['output']>;
  /** The label of the form field. This is only applicable if type is FORM_FIELD. */
  readonly formFieldLabel?: Maybe<Scalars['String']['output']>;
  readonly type: AudienceManagerSubscriberTableColumnType;
};

export type AudienceManagerSubscriberTableColumnModelEdge = {
  readonly __typename: 'AudienceManagerSubscriberTableColumnModelEdge';
  readonly cursor?: Maybe<Scalars['String']['output']>;
  readonly node: AudienceManagerSubscriberTableColumnModel;
};

export type AudienceManagerSubscriberTableColumnModelPage = {
  readonly __typename: 'AudienceManagerSubscriberTableColumnModelPage';
  readonly edges: ReadonlyArray<AudienceManagerSubscriberTableColumnModelEdge>;
  readonly pageInfo?: Maybe<LtFollowersApiPageInfo>;
};

/** The type of column in the audience manager subscriber table. */
export enum AudienceManagerSubscriberTableColumnType {
  FollowerDateOfBirth = 'FOLLOWER_DATE_OF_BIRTH',
  FollowerEmail = 'FOLLOWER_EMAIL',
  FollowerName = 'FOLLOWER_NAME',
  FollowerPhone = 'FOLLOWER_PHONE',
  FollowCountry = 'FOLLOW_COUNTRY',
  FollowCreatedAt = 'FOLLOW_CREATED_AT',
  FollowSource = 'FOLLOW_SOURCE',
  FollowStatus = 'FOLLOW_STATUS',
  FormField = 'FORM_FIELD',
  TransactionCount = 'TRANSACTION_COUNT'
}

export enum AvatarMode {
  CircleMedium = 'CIRCLE_MEDIUM',
  CircleSmall = 'CIRCLE_SMALL',
  Hero = 'HERO',
  None = 'NONE'
}

export enum AvatarType {
  Image = 'IMAGE',
  Video = 'VIDEO'
}

export type Background = AnimatedBackground | ColorBackground | DefaultBackground | GradientBackground | ImageBackground | VideoBackground;

export enum BackgroundGradientStyle {
  Bloom = 'BLOOM',
  Custom = 'CUSTOM',
  Glow = 'GLOW',
  Green = 'GREEN',
  Noir = 'NOIR',
  Orange = 'ORANGE',
  Pink = 'PINK',
  Rainbow = 'RAINBOW',
  Rise = 'RISE',
  Twilight = 'TWILIGHT'
}

export enum BackgroundImageEffect {
  Blur = 'BLUR',
  Halftone = 'HALFTONE',
  Mono = 'MONO',
  None = 'NONE'
}

export enum BackgroundStyle {
  Blur = 'BLUR',
  Colordown = 'COLORDOWN',
  Colorup = 'COLORUP',
  Custom = 'CUSTOM',
  Default = 'DEFAULT',
  Fill = 'FILL',
  Flat = 'FLAT',
  Gradient = 'GRADIENT',
  Gradientanimated = 'GRADIENTANIMATED',
  Gradientradial = 'GRADIENTRADIAL',
  Gradientstill = 'GRADIENTSTILL',
  Grid = 'GRID',
  Hero = 'HERO',
  Image = 'IMAGE',
  Matrix = 'MATRIX',
  Morph = 'MORPH',
  Organic = 'ORGANIC',
  Pattern = 'PATTERN',
  Patternanimated = 'PATTERNANIMATED',
  Patternstill = 'PATTERNSTILL',
  Polka = 'POLKA',
  Stripe = 'STRIPE',
  Video = 'VIDEO',
  Videoanimated = 'VIDEOANIMATED',
  Waves = 'WAVES',
  Zigzag = 'ZIGZAG'
}

export enum BackgroundType {
  Animated = 'ANIMATED',
  Color = 'COLOR',
  Default = 'DEFAULT',
  Gradient = 'GRADIENT',
  Image = 'IMAGE',
  Video = 'VIDEO'
}

export type BarChartData = {
  readonly __typename: 'BarChartData';
  readonly x: Scalars['String']['output'];
  readonly y: Scalars['Int']['output'];
};

export type BarChartGraphic = {
  readonly __typename: 'BarChartGraphic';
  readonly chartData: ReadonlyArray<BarChartData>;
};

export type BaseTheme = {
  readonly __typename: 'BaseTheme';
  /** Avatar mode. */
  readonly avatarMode?: Maybe<AvatarMode>;
  /** Avatar type. */
  readonly avatarType?: Maybe<AvatarType>;
  /** URL for the background asset. */
  readonly backgroundAssetUrl?: Maybe<Scalars['String']['output']>;
  /** Background color hex code. */
  readonly backgroundColor?: Maybe<Scalars['String']['output']>;
  /** Array of hex colors for background gradient. */
  readonly backgroundGradient?: Maybe<ReadonlyArray<Maybe<Scalars['String']['output']>>>;
  /** Background gradient style. */
  readonly backgroundGradientStyle?: Maybe<BackgroundGradientStyle>;
  /** Background hero color hex code. */
  readonly backgroundHeroColor?: Maybe<Scalars['String']['output']>;
  /** Background image effect. */
  readonly backgroundImageEffect?: Maybe<BackgroundImageEffect>;
  /** Background noise. */
  readonly backgroundNoise?: Maybe<Scalars['Boolean']['output']>;
  /** URL for the background poster image. */
  readonly backgroundPosterUrl?: Maybe<Scalars['String']['output']>;
  /** Background style. */
  readonly backgroundStyle?: Maybe<BackgroundStyle>;
  /** Background tint. */
  readonly backgroundTint?: Maybe<Scalars['Int']['output']>;
  /** Button color hex code. */
  readonly buttonColor?: Maybe<Scalars['String']['output']>;
  /** Button corner style. */
  readonly buttonCorners?: Maybe<ButtonCornerType>;
  /** Button shadow style. */
  readonly buttonShadow?: Maybe<ButtonShadowType>;
  /** Button shadow color hex code. */
  readonly buttonShadowColor?: Maybe<Scalars['String']['output']>;
  /** Button style. */
  readonly buttonStyle?: Maybe<ButtonType>;
  /** Button text color hex code. */
  readonly buttonTextColor?: Maybe<Scalars['String']['output']>;
  /** Color palette. */
  readonly colorPalette?: Maybe<ReadonlyArray<Maybe<Scalars['String']['output']>>>;
  /** Color schema. */
  readonly colorSchema?: Maybe<ColorSchema>;
  /** The date when the base theme was created. */
  readonly createdAt?: Maybe<Scalars['Date']['output']>;
  /** Custom avatar URL. */
  readonly customAvatar?: Maybe<Scalars['String']['output']>;
  /** Custom avatar video URL. */
  readonly customAvatarVideo?: Maybe<Scalars['String']['output']>;
  /** Font color hex code. */
  readonly fontColor?: Maybe<Scalars['String']['output']>;
  /** Font style. */
  readonly fontStyle?: Maybe<Scalars['String']['output']>;
  /** Custom color for the footer. */
  readonly footerCustomColor?: Maybe<Scalars['String']['output']>;
  /** URL for the footer logo. */
  readonly footerLogoUrl?: Maybe<Scalars['String']['output']>;
  /** URL for the footer link. */
  readonly footerUrl?: Maybe<Scalars['String']['output']>;
  /** H1 text color hex code. */
  readonly h1TextColor?: Maybe<Scalars['String']['output']>;
  /** H2 text color hex code. */
  readonly h2TextColor?: Maybe<Scalars['String']['output']>;
  /** H3 text color hex code. */
  readonly h3TextColor?: Maybe<Scalars['String']['output']>;
  /** Heading color. */
  readonly headingColor?: Maybe<Scalars['String']['output']>;
  /** Heading effect. */
  readonly headingEffect?: Maybe<HeadingEffect>;
  /** Heading font family. */
  readonly headingFont?: Maybe<Scalars['String']['output']>;
  /** Heading logo URL. */
  readonly headingLogo?: Maybe<Scalars['String']['output']>;
  /** Heading logo size. */
  readonly headingLogoSize?: Maybe<HeadingSize>;
  /** Heading size. */
  readonly headingSize?: Maybe<HeadingSize>;
  /** Heading type. */
  readonly headingType?: Maybe<HeadingType>;
  /** The unique identifier of the base theme. */
  readonly id: Scalars['ID']['output'];
  /** Whether the theme is editable by the user. */
  readonly isEditable: Scalars['Boolean']['output'];
  /** Luminance of the theme (e.g., light, dark). */
  readonly luminance?: Maybe<Scalars['String']['output']>;
  /** Mouse cursor of the theme. */
  readonly mouseCursor?: Maybe<Scalars['String']['output']>;
  /** Social link color hex code. */
  readonly socialLinkColor?: Maybe<Scalars['String']['output']>;
  /** Tags associated with the theme. */
  readonly tags?: Maybe<ReadonlyArray<Maybe<Scalars['String']['output']>>>;
  /** The unique key for the base theme. */
  readonly themeKey: Scalars['String']['output'];
  /** Thumbnail URL of the theme. */
  readonly thumbnailUrl?: Maybe<Scalars['String']['output']>;
  /** Tier of the theme. */
  readonly tier: Tier;
  /** The title of the base theme. */
  readonly title: Scalars['String']['output'];
  /** The date when the base theme was last updated. */
  readonly updatedAt?: Maybe<Scalars['Date']['output']>;
  /** The visibility status of the theme. */
  readonly visibility: ThemeVisibility;
};

export type BaseWalletConnection = {
  readonly accountId: Scalars['String']['output'];
  readonly countryCode?: Maybe<Scalars['String']['output']>;
  readonly currency: Scalars['String']['output'];
  readonly dashboardUrl?: Maybe<Scalars['String']['output']>;
  readonly program: Scalars['String']['output'];
  readonly provider: Scalars['String']['output'];
  readonly status: Scalars['String']['output'];
  readonly updatedAt: Scalars['Float']['output'];
};

export type BillingDetailsInput = {
  readonly paymentAddressCity?: InputMaybe<Scalars['String']['input']>;
  readonly paymentAddressCountry?: InputMaybe<Scalars['String']['input']>;
  readonly paymentAddressLine1?: InputMaybe<Scalars['String']['input']>;
  readonly paymentAddressLine2?: InputMaybe<Scalars['String']['input']>;
  readonly paymentAddressPostcode?: InputMaybe<Scalars['String']['input']>;
  readonly paymentAddressState?: InputMaybe<Scalars['String']['input']>;
  readonly paymentEmail: Scalars['String']['input'];
  readonly paymentName: Scalars['String']['input'];
};

export type BillingInfo = {
  readonly __typename: 'BillingInfo';
  readonly accountId: Scalars['Int']['output'];
  readonly paymentAddressCity?: Maybe<Scalars['String']['output']>;
  readonly paymentAddressCountry?: Maybe<Scalars['String']['output']>;
  readonly paymentAddressLine1?: Maybe<Scalars['String']['output']>;
  readonly paymentAddressLine2?: Maybe<Scalars['String']['output']>;
  readonly paymentAddressPostcode?: Maybe<Scalars['String']['output']>;
  readonly paymentAddressState?: Maybe<Scalars['String']['output']>;
  readonly paymentEmail?: Maybe<Scalars['String']['output']>;
  readonly paymentName?: Maybe<Scalars['String']['output']>;
};

export type BookLinkContext = {
  readonly __typename: 'BookLinkContext';
  readonly displayPrices: Scalars['Boolean']['output'];
  readonly embedOption?: Maybe<LinkEmbedOptions>;
  readonly includeUsedCopiesInResult: Scalars['Boolean']['output'];
  readonly options: ReadonlyArray<BookLinkOption>;
  readonly productReference?: Maybe<Scalars['String']['output']>;
};


export type BookLinkContextOptionsArgs = {
  evaluateGate?: InputMaybe<Scalars['Boolean']['input']>;
  includeHidden?: InputMaybe<Scalars['Boolean']['input']>;
};


export type BookLinkContextProductReferenceArgs = {
  evaluateGate?: InputMaybe<Scalars['Boolean']['input']>;
};

export type BookLinkContextInput = {
  readonly displayPrices?: InputMaybe<Scalars['Boolean']['input']>;
  readonly embedOption?: InputMaybe<LinkEmbedOptions>;
  readonly includeUsedCopiesInResult?: InputMaybe<Scalars['Boolean']['input']>;
  readonly options?: InputMaybe<ReadonlyArray<BookLinkOptionInput>>;
  readonly productReference?: InputMaybe<Scalars['String']['input']>;
};

export type BookLinkFormat = {
  readonly __typename: 'BookLinkFormat';
  readonly format: Scalars['String']['output'];
  readonly url?: Maybe<Scalars['String']['output']>;
  readonly visible: Scalars['Boolean']['output'];
};

export type BookLinkFormatInput = {
  readonly format: Scalars['String']['input'];
  readonly url?: InputMaybe<Scalars['String']['input']>;
  readonly visible: Scalars['Boolean']['input'];
};

export type BookLinkOption = {
  readonly __typename: 'BookLinkOption';
  readonly formats?: Maybe<ReadonlyArray<BookLinkFormat>>;
  readonly type: Scalars['String']['output'];
  readonly visible: Scalars['Boolean']['output'];
};

export type BookLinkOptionInput = {
  readonly formats?: InputMaybe<ReadonlyArray<BookLinkFormatInput>>;
  readonly type: Scalars['String']['input'];
  readonly visible: Scalars['Boolean']['input'];
};

export type Breakdown = {
  readonly count?: Maybe<Scalars['Int']['output']>;
  readonly date?: Maybe<Scalars['String']['output']>;
};

export type BulkAccountCreationResult = {
  readonly __typename: 'BulkAccountCreationResult';
  readonly user?: Maybe<User>;
};

export type BulkPasswordResetResult = {
  readonly __typename: 'BulkPasswordResetResult';
  readonly success?: Maybe<Scalars['Boolean']['output']>;
  readonly username?: Maybe<Scalars['String']['output']>;
};

export type BulkUpdateLinkTitlesInput = {
  readonly linkId?: InputMaybe<Scalars['Int']['input']>;
  readonly linkPreviewId?: InputMaybe<Scalars['Int']['input']>;
  readonly title: Scalars['String']['input'];
};

export type BusinessInstagramAccounts = {
  readonly __typename: 'BusinessInstagramAccounts';
  readonly followersCount?: Maybe<Scalars['Int']['output']>;
  readonly id: Scalars['String']['output'];
  readonly mediaCount?: Maybe<Scalars['Int']['output']>;
  readonly name?: Maybe<Scalars['String']['output']>;
  readonly posts?: Maybe<ReadonlyArray<Maybe<GetInstagramBusinessAccountPost>>>;
  readonly profilePictureUrl?: Maybe<Scalars['String']['output']>;
  readonly username?: Maybe<Scalars['String']['output']>;
};


export type BusinessInstagramAccountsPostsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  instagramMediaType?: InputMaybe<InstagramMediaType>;
  numberOfPostsToFetch?: InputMaybe<Scalars['Int']['input']>;
};

export type ButtonBackgroundStyle = {
  readonly __typename: 'ButtonBackgroundStyle';
  readonly color: Scalars['String']['output'];
};

export type ButtonCornerStyle = {
  readonly __typename: 'ButtonCornerStyle';
  readonly type: ButtonCornerType;
};

export enum ButtonCornerType {
  Curved = 'CURVED',
  Default = 'DEFAULT',
  Round = 'ROUND',
  RoundedFull = 'ROUNDED_FULL',
  RoundedLg = 'ROUNDED_LG',
  RoundedNone = 'ROUNDED_NONE',
  RoundedSm = 'ROUNDED_SM',
  Sharp = 'SHARP'
}

export enum ButtonHighlightType {
  Buzz = 'BUZZ',
  Pop = 'POP',
  Spotlight = 'SPOTLIGHT',
  Swipe = 'SWIPE',
  Wobble = 'WOBBLE'
}

export type ButtonShadowStyle = {
  readonly __typename: 'ButtonShadowStyle';
  readonly color: Scalars['String']['output'];
  readonly type: ButtonShadowType;
};

export enum ButtonShadowType {
  Default = 'DEFAULT',
  Hard = 'HARD',
  None = 'NONE',
  ShadowFull = 'SHADOW_FULL',
  ShadowLg = 'SHADOW_LG',
  ShadowNone = 'SHADOW_NONE',
  ShadowSm = 'SHADOW_SM',
  Soft = 'SOFT',
  Subtle = 'SUBTLE'
}

export type ButtonStyle = {
  readonly __typename: 'ButtonStyle';
  readonly backgroundStyle: ButtonBackgroundStyle;
  readonly cornerStyle?: Maybe<ButtonCornerStyle>;
  readonly shadowStyle?: Maybe<ButtonShadowStyle>;
  readonly textStyle?: Maybe<ButtonTextStyle>;
  readonly type: ButtonType;
};

export type ButtonTextStyle = {
  readonly __typename: 'ButtonTextStyle';
  readonly color: Scalars['String']['output'];
};

export enum ButtonType {
  AlternatingShapes = 'ALTERNATING_SHAPES',
  Default = 'DEFAULT',
  Fill = 'FILL',
  FillCircular = 'FILL_CIRCULAR',
  FillRounded = 'FILL_ROUNDED',
  Formal2Stroke = 'FORMAL2_STROKE',
  Frost = 'FROST',
  Glass = 'GLASS',
  Hardshadow = 'HARDSHADOW',
  HardshadowCircular = 'HARDSHADOW_CIRCULAR',
  HardshadowRounded = 'HARDSHADOW_ROUNDED',
  JigglyEdges = 'JIGGLY_EDGES',
  Outline = 'OUTLINE',
  OutlineCircular = 'OUTLINE_CIRCULAR',
  OutlineRounded = 'OUTLINE_ROUNDED',
  Softshadow = 'SOFTSHADOW',
  SoftshadowCircular = 'SOFTSHADOW_CIRCULAR',
  SoftshadowRounded = 'SOFTSHADOW_ROUNDED',
  TornEdges = 'TORN_EDGES',
  Vector = 'VECTOR'
}

export enum CacheType {
  Default = 'Default',
  Link = 'Link',
  Subscription = 'Subscription'
}

export type CanAccessGoogleSheets = {
  readonly __typename: 'CanAccessGoogleSheets';
  readonly canAccessGoogleSheets: Scalars['Boolean']['output'];
};

export type CanAccessGoogleYouTube = {
  readonly __typename: 'CanAccessGoogleYouTube';
  readonly canAccessGoogleYouTube: Scalars['Boolean']['output'];
};

export type CanvaAsset = {
  readonly __typename: 'CanvaAsset';
  readonly id?: Maybe<Scalars['String']['output']>;
  readonly name?: Maybe<Scalars['String']['output']>;
  readonly thumbnailUrl?: Maybe<Scalars['String']['output']>;
};

export type CanvaAssetUploadJobResult = {
  readonly __typename: 'CanvaAssetUploadJobResult';
  readonly canvaAsset?: Maybe<CanvaAsset>;
  readonly error?: Maybe<Scalars['String']['output']>;
  readonly jobId?: Maybe<Scalars['String']['output']>;
  readonly status?: Maybe<Scalars['String']['output']>;
};

export type CanvaDesign = {
  readonly __typename: 'CanvaDesign';
  readonly editUrl?: Maybe<Scalars['String']['output']>;
  readonly exportFormats?: Maybe<CanvaDesignExportFormats>;
  readonly id?: Maybe<Scalars['String']['output']>;
  readonly pageCount?: Maybe<Scalars['Int']['output']>;
  readonly pages?: Maybe<ReadonlyArray<Maybe<CanvaDesignPage>>>;
  readonly thumbnailUrl?: Maybe<Scalars['String']['output']>;
  readonly title?: Maybe<Scalars['String']['output']>;
  readonly viewUrl?: Maybe<Scalars['String']['output']>;
};

export type CanvaDesignExportFormats = {
  readonly __typename: 'CanvaDesignExportFormats';
  /** png, jpg, or gif */
  readonly imageFormats?: Maybe<ReadonlyArray<Maybe<Scalars['String']['output']>>>;
  /** mp4 */
  readonly videoFormats?: Maybe<ReadonlyArray<Maybe<Scalars['String']['output']>>>;
};

export type CanvaDesignExportJobResult = {
  readonly __typename: 'CanvaDesignExportJobResult';
  readonly canvaDesignUrls?: Maybe<ReadonlyArray<Maybe<Scalars['String']['output']>>>;
  readonly error?: Maybe<Scalars['String']['output']>;
  readonly jobId?: Maybe<Scalars['String']['output']>;
  readonly status?: Maybe<Scalars['String']['output']>;
};

export type CanvaDesignList = {
  readonly __typename: 'CanvaDesignList';
  readonly continuation?: Maybe<Scalars['String']['output']>;
  readonly items?: Maybe<ReadonlyArray<Maybe<CanvaDesign>>>;
};

export type CanvaDesignPage = {
  readonly __typename: 'CanvaDesignPage';
  readonly index?: Maybe<Scalars['Int']['output']>;
  readonly thumbnailUrl?: Maybe<Scalars['String']['output']>;
};

export type CanvaIntegrationContext = {
  readonly __typename: 'CanvaIntegrationContext';
  readonly accessToken?: Maybe<Scalars['String']['output']>;
  readonly asset?: Maybe<CanvaAsset>;
  readonly createdAt?: Maybe<Scalars['Int']['output']>;
  readonly design?: Maybe<CanvaDesign>;
  readonly designs?: Maybe<CanvaDesignList>;
  readonly expiresIn?: Maybe<Scalars['Int']['output']>;
  readonly isAuthenticated?: Maybe<Scalars['Boolean']['output']>;
  readonly refreshToken?: Maybe<Scalars['String']['output']>;
  readonly scope?: Maybe<Scalars['String']['output']>;
  readonly tokenType?: Maybe<Scalars['String']['output']>;
  readonly user?: Maybe<CanvaUser>;
};


export type CanvaIntegrationContextAssetArgs = {
  id?: InputMaybe<Scalars['String']['input']>;
};


export type CanvaIntegrationContextDesignArgs = {
  id?: InputMaybe<Scalars['String']['input']>;
  returnNavigation?: InputMaybe<Scalars['String']['input']>;
};


export type CanvaIntegrationContextDesignsArgs = {
  continuation?: InputMaybe<Scalars['String']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  returnNavigation?: InputMaybe<Scalars['String']['input']>;
};

export type CanvaUser = {
  readonly __typename: 'CanvaUser';
  readonly userId?: Maybe<Scalars['String']['output']>;
};

export type Card = {
  readonly __typename: 'Card';
  readonly brand?: Maybe<Scalars['String']['output']>;
  readonly createdAt?: Maybe<Scalars['Date']['output']>;
  readonly email?: Maybe<Scalars['String']['output']>;
  readonly expMonth?: Maybe<Scalars['Int']['output']>;
  readonly expYear?: Maybe<Scalars['Int']['output']>;
  readonly id: Scalars['Int']['output'];
  readonly isExpired: Scalars['Boolean']['output'];
  readonly lastFour?: Maybe<Scalars['String']['output']>;
  readonly name?: Maybe<Scalars['String']['output']>;
  readonly type: PaymentSourceType;
  readonly updatedAt?: Maybe<Scalars['Date']['output']>;
};

export type CardInfo = {
  readonly __typename: 'CardInfo';
  /** @deprecated Use `availableV2` instead. */
  readonly available: Scalars['Float']['output'];
  readonly availableV2: Scalars['Int']['output'];
  /** @deprecated Use `balanceV2` instead. */
  readonly balance: Scalars['Float']['output'];
  readonly balanceV2?: Maybe<Scalars['Int']['output']>;
  readonly currency: Scalars['String']['output'];
  /** @deprecated Use `transferEligibilityErrors` instead. The equivalent error is a combination of `CONNECTION_DOES_NOT_EXIST` and `CONNECTION_IS_NOT_ACTIVE`. */
  readonly isStripeSetup: Scalars['Boolean']['output'];
  readonly lifetime: Scalars['Int']['output'];
  readonly nextPayoutDate: Scalars['DateTime']['output'];
  readonly payoutSchedule: WalletPayoutSchedule;
  readonly pending: Scalars['Int']['output'];
  readonly transferEligibilityErrors: ReadonlyArray<WalletTransferEligibilityErrors>;
};

export type CatalogLayoutSectionConnection = {
  readonly __typename: 'CatalogLayoutSectionConnection';
  readonly edges: ReadonlyArray<CommerceCatalogLayoutSectionEdge>;
  readonly pageInfo: PageInfo;
};

export type CatalogProductsFilters = {
  readonly brands?: InputMaybe<ReadonlyArray<Scalars['String']['input']>>;
  readonly category?: InputMaybe<ReadonlyArray<Scalars['String']['input']>>;
  readonly createdAfter?: InputMaybe<Scalars['DateTime']['input']>;
  readonly createdBefore?: InputMaybe<Scalars['DateTime']['input']>;
  readonly maxPrice?: InputMaybe<Scalars['Int']['input']>;
  readonly minPrice?: InputMaybe<Scalars['Int']['input']>;
  readonly query?: InputMaybe<Scalars['String']['input']>;
  /** Tag slugs. These are not displayed to users */
  readonly tags?: InputMaybe<ReadonlyArray<Scalars['String']['input']>>;
  readonly vendors?: InputMaybe<ReadonlyArray<Scalars['String']['input']>>;
};

export type CatalogProductsInput = {
  readonly accountUuid: Scalars['String']['input'];
  /** If set to true, results will be blended across vendors. Otherwise, results may or may not be grouped by vendors */
  readonly blendResults?: InputMaybe<Scalars['Boolean']['input']>;
  readonly channel?: InputMaybe<CatalogSearchChannel>;
  readonly filters?: InputMaybe<CatalogProductsFilters>;
  readonly initiator?: InputMaybe<CatalogSearchInitiator>;
  readonly page?: InputMaybe<Scalars['Int']['input']>;
  readonly pageSize?: InputMaybe<Scalars['Int']['input']>;
};

export type CatalogProductsList = {
  readonly __typename: 'CatalogProductsList';
  readonly storeProducts: ReadonlyArray<CommerceStoreProduct>;
  readonly totalPages: Scalars['Int']['output'];
  readonly totalProducts: Scalars['Int']['output'];
};

export enum CatalogSearchChannel {
  MobileApp = 'MOBILE_APP',
  Retool = 'RETOOL',
  Unknown = 'UNKNOWN',
  Web = 'WEB'
}

export enum CatalogSearchInitiator {
  Api = 'API',
  System = 'SYSTEM',
  Unknown = 'UNKNOWN',
  User = 'USER'
}

export type CelebrityTheme = Theme & {
  readonly __typename: 'CelebrityTheme';
  readonly background: Background;
  readonly editable: Scalars['Boolean']['output'];
  readonly key: Scalars['ID']['output'];
  readonly socialStyle: SocialStyle;
};

export type ChargebeeAddon = {
  readonly __typename: 'ChargebeeAddon';
  readonly id?: Maybe<Scalars['String']['output']>;
  readonly quantity?: Maybe<Scalars['Int']['output']>;
  readonly unit_price?: Maybe<Scalars['Int']['output']>;
};

export enum ChargebeeAutoCollectionType {
  Off = 'off',
  On = 'on'
}

export enum ChargebeeBillingPeriodUnitType {
  Day = 'day',
  Month = 'month',
  Week = 'week',
  Year = 'year'
}

export type ChargebeeCoupon = {
  readonly __typename: 'ChargebeeCoupon';
  readonly applied_count?: Maybe<Scalars['Int']['output']>;
  readonly apply_till?: Maybe<Scalars['Int']['output']>;
  readonly coupon_code?: Maybe<Scalars['String']['output']>;
  readonly coupon_id?: Maybe<Scalars['String']['output']>;
};

export type ChargebeeSubscription = {
  readonly __typename: 'ChargebeeSubscription';
  readonly activated_at?: Maybe<Scalars['Int']['output']>;
  readonly addons?: Maybe<ReadonlyArray<Maybe<ChargebeeAddon>>>;
  readonly auto_collection?: Maybe<ChargebeeAutoCollectionType>;
  readonly billing_period?: Maybe<Scalars['Int']['output']>;
  readonly billing_period_unit?: Maybe<ChargebeeBillingPeriodUnitType>;
  readonly cancelled_at?: Maybe<Scalars['Int']['output']>;
  readonly coupons?: Maybe<ReadonlyArray<Maybe<ChargebeeCoupon>>>;
  readonly created_at?: Maybe<Scalars['Int']['output']>;
  readonly currency_code: Scalars['String']['output'];
  readonly current_term_end?: Maybe<Scalars['Int']['output']>;
  readonly current_term_start?: Maybe<Scalars['Int']['output']>;
  readonly customer_id: Scalars['String']['output'];
  readonly deleted?: Maybe<Scalars['Boolean']['output']>;
  readonly due_invoices_count?: Maybe<Scalars['Int']['output']>;
  readonly due_since?: Maybe<Scalars['Int']['output']>;
  readonly has_scheduled_advance_invoices: Scalars['Boolean']['output'];
  readonly has_scheduled_changes: Scalars['Boolean']['output'];
  readonly id: Scalars['String']['output'];
  readonly meta_data?: Maybe<Scalars['String']['output']>;
  readonly mrr?: Maybe<Scalars['Int']['output']>;
  readonly next_billing_at?: Maybe<Scalars['Int']['output']>;
  readonly object: Scalars['String']['output'];
  readonly pause_date?: Maybe<Scalars['Int']['output']>;
  /** @deprecated This field is deprecated to avoid integer overflow, use plan_amount_string instead */
  readonly plan_amount?: Maybe<Scalars['Int']['output']>;
  readonly plan_amount_string?: Maybe<Scalars['String']['output']>;
  readonly plan_free_quantity?: Maybe<Scalars['Int']['output']>;
  readonly plan_id: Scalars['String']['output'];
  readonly plan_quantity: Scalars['Int']['output'];
  /** @deprecated This field is deprecated to avoid integer overflow, use plan_unit_price_string instead */
  readonly plan_unit_price?: Maybe<Scalars['Int']['output']>;
  readonly plan_unit_price_string?: Maybe<Scalars['String']['output']>;
  readonly remaining_billing_cycles?: Maybe<Scalars['Int']['output']>;
  readonly resource_version?: Maybe<Scalars['Int']['output']>;
  readonly resume_date?: Maybe<Scalars['Int']['output']>;
  readonly started_at?: Maybe<Scalars['Int']['output']>;
  readonly status: ChargebeeSubscriptionStatusType;
  readonly total_dues?: Maybe<Scalars['Int']['output']>;
  readonly trial_end?: Maybe<Scalars['Int']['output']>;
  readonly trial_start?: Maybe<Scalars['Int']['output']>;
  readonly updated_at?: Maybe<Scalars['Int']['output']>;
};

export enum ChargebeeSubscriptionStatusType {
  Active = 'active',
  Cancelled = 'cancelled',
  Future = 'future',
  InTrial = 'in_trial',
  NonRenewing = 'non_renewing',
  Paused = 'paused'
}

export type Chat = {
  readonly __typename: 'Chat';
  readonly content: Scalars['String']['output'];
  readonly contentHTML?: Maybe<Scalars['String']['output']>;
  readonly conversationId: Scalars['String']['output'];
  readonly dateTime: Scalars['DateTime']['output'];
  readonly questionId?: Maybe<Scalars['String']['output']>;
  readonly role: Role;
};

export type ChatCompletionResponse = {
  readonly __typename: 'ChatCompletionResponse';
  readonly answer: Scalars['String']['output'];
  readonly answerHTML?: Maybe<Scalars['String']['output']>;
  readonly command?: Maybe<Command>;
  readonly conversationId?: Maybe<Scalars['String']['output']>;
  readonly questionId: Scalars['String']['output'];
  readonly sources: ReadonlyArray<Scalars['String']['output']>;
  readonly suggestedPrompts?: Maybe<ReadonlyArray<Scalars['String']['output']>>;
};

export type ChatDocument = {
  readonly __typename: 'ChatDocument';
  readonly accountUuid?: Maybe<Scalars['String']['output']>;
  readonly content: Scalars['String']['output'];
  readonly createdAt?: Maybe<Scalars['DateTime']['output']>;
  readonly expiry?: Maybe<Scalars['DateTime']['output']>;
  readonly id: Scalars['String']['output'];
  readonly parentId?: Maybe<Scalars['String']['output']>;
  readonly profile: Scalars['String']['output'];
  readonly sourceType?: Maybe<Scalars['String']['output']>;
  readonly updatedAt?: Maybe<Scalars['DateTime']['output']>;
  readonly url: Scalars['String']['output'];
};

export type ChatEmbeddingIndexOptions = {
  readonly cacheTTLMinutes?: InputMaybe<Scalars['Int']['input']>;
  readonly chunkSize?: InputMaybe<Scalars['Int']['input']>;
  readonly skipCache?: InputMaybe<Scalars['Boolean']['input']>;
  readonly styleSampleLinkIds?: InputMaybe<ReadonlyArray<Scalars['Int']['input']>>;
  readonly updateExistingDocs?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ChatEmbeddingQueryResult = {
  readonly __typename: 'ChatEmbeddingQueryResult';
  readonly content: Scalars['String']['output'];
  readonly id: Scalars['String']['output'];
  readonly metadata?: Maybe<Scalars['JSON']['output']>;
  readonly similarity: Scalars['Float']['output'];
};

export type ChatIndexedLink = {
  readonly __typename: 'ChatIndexedLink';
  readonly docId?: Maybe<Scalars['String']['output']>;
  readonly isStyleSample?: Maybe<Scalars['Boolean']['output']>;
  readonly linkId?: Maybe<Scalars['Float']['output']>;
  readonly linkType?: Maybe<Scalars['String']['output']>;
  readonly title?: Maybe<Scalars['String']['output']>;
  readonly url?: Maybe<Scalars['String']['output']>;
};

export type ChatIndexingReport = {
  readonly __typename: 'ChatIndexingReport';
  readonly commStyle?: Maybe<Scalars['String']['output']>;
  readonly indexedLinks?: Maybe<ReadonlyArray<ChatIndexedLink>>;
  readonly linkerType?: Maybe<Scalars['String']['output']>;
  readonly questions?: Maybe<ReadonlyArray<ChatQuestionAnswer>>;
  readonly stats?: Maybe<ChatIndexingStats>;
  readonly status?: Maybe<Scalars['String']['output']>;
  readonly statusMessage?: Maybe<Scalars['String']['output']>;
  readonly styleSampleLinkIds?: Maybe<ReadonlyArray<Scalars['Float']['output']>>;
};

export type ChatIndexingStats = {
  readonly __typename: 'ChatIndexingStats';
  readonly numDocs?: Maybe<Scalars['Float']['output']>;
};

export type ChatMessage = {
  readonly content: Scalars['String']['input'];
  readonly createdAt?: InputMaybe<Scalars['String']['input']>;
  readonly id?: InputMaybe<Scalars['String']['input']>;
  readonly role: Scalars['String']['input'];
};

export type ChatQuestionAnswer = {
  readonly __typename: 'ChatQuestionAnswer';
  readonly answer: Scalars['String']['output'];
  readonly question: Scalars['String']['output'];
};

export type ChatQuestionAnswerInput = {
  readonly answer: Scalars['String']['input'];
  readonly question: Scalars['String']['input'];
};

export type ChatQuestionAnswerList = {
  readonly questions: ReadonlyArray<ChatQuestionAnswerInput>;
};

export type ChatQuestionFeedback = {
  readonly feedbackContent?: InputMaybe<Scalars['String']['input']>;
  readonly questionId: Scalars['String']['input'];
  readonly rating: Scalars['Float']['input'];
};

export type ChatRequest = {
  readonly conversationId?: InputMaybe<Scalars['String']['input']>;
  readonly dialogueExamples?: InputMaybe<ReadonlyArray<ChatbotDialogueExample>>;
  readonly messages: ReadonlyArray<ChatMessage>;
  readonly useCase?: InputMaybe<Scalars['String']['input']>;
};

export type ChatbotDialogueExample = {
  readonly prompt: Scalars['String']['input'];
  readonly response: Scalars['String']['input'];
};

export type ChatbotDialogueExampleInput = {
  readonly prompt?: InputMaybe<Scalars['String']['input']>;
  readonly response?: InputMaybe<Scalars['String']['input']>;
};

export type ChatbotDialogueExampleObject = {
  readonly __typename: 'ChatbotDialogueExampleObject';
  readonly prompt: Scalars['String']['output'];
  readonly response: Scalars['String']['output'];
};

export type ChatbotLinkContext = {
  readonly __typename: 'ChatbotLinkContext';
  readonly dialogueExamples?: Maybe<ReadonlyArray<Maybe<ChatbotDialogueExampleObject>>>;
  readonly embedOption?: Maybe<LinkEmbedOptions>;
  readonly examplePrompts: ReadonlyArray<Scalars['String']['output']>;
  readonly externalUrls?: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  readonly initialMessage: Scalars['String']['output'];
  readonly inputPlaceholder: Scalars['String']['output'];
};

export type ChatbotLinkContextInput = {
  readonly dialogueExamples?: InputMaybe<ReadonlyArray<InputMaybe<ChatbotDialogueExampleInput>>>;
  readonly embedOption?: InputMaybe<LinkEmbedOptions>;
  readonly examplePrompts?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']['input']>>>;
  readonly externalUrls?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']['input']>>>;
};

export type CheckAccountNotificationLimitsInput = {
  readonly accountUuid: Scalars['String']['input'];
};

export type CheckAccountNotificationLimitsResultModel = {
  readonly __typename: 'CheckAccountNotificationLimitsResultModel';
  readonly error?: Maybe<SendNotificationErrorModel>;
  readonly withinLimits: Scalars['Boolean']['output'];
};

export type CheckSocialNotificationCoTriggerInput = {
  /** Account UUID of the configuration owner */
  readonly accountUuid: Scalars['String']['input'];
  /** Config UUID to exclude */
  readonly excludeId?: InputMaybe<Scalars['String']['input']>;
  /** Linktree social integration id */
  readonly socialIntegrationId: Scalars['String']['input'];
  /** Linktree social integration type, such as FACEBOOK, TIKTOK */
  readonly socialIntegrationType: Scalars['String']['input'];
  /** The input trigger */
  readonly trigger: SocialNotificationConfigTriggerInput;
};

export type CheckSocialNotificationCoTriggerOutput = {
  readonly __typename: 'CheckSocialNotificationCoTriggerOutput';
  /** If the account has any other config with a trigger, which is possible to be triggered at the same time. */
  readonly hasPossibleCoTrigger: Scalars['Boolean']['output'];
};

export type CheckSocialNotificationConfigPostNextAliveAllowedInput = {
  /** Account UUID of the configuration owner */
  readonly accountUuid: Scalars['String']['input'];
  /** Config UUID to exclude */
  readonly excludeId?: InputMaybe<Scalars['String']['input']>;
};

export type CheckSocialNotificationConfigPostNextAliveAllowedOutput = {
  readonly __typename: 'CheckSocialNotificationConfigPostNextAliveAllowedOutput';
  readonly allowed: Scalars['Boolean']['output'];
};

export type ChildGroupInput = {
  readonly childIds: ReadonlyArray<Scalars['Int']['input']>;
  readonly modifiers?: InputMaybe<LinkModifiersInput>;
  readonly parentGroupContext?: InputMaybe<GroupLinkContextInput>;
  readonly position: Scalars['Int']['input'];
  readonly title?: InputMaybe<Scalars['String']['input']>;
};

export type CityBreakdown = {
  readonly __typename: 'CityBreakdown';
  readonly city?: Maybe<Scalars['String']['output']>;
  readonly clickThroughRate?: Maybe<Scalars['Float']['output']>;
  readonly clicks?: Maybe<Scalars['Int']['output']>;
  readonly date: Scalars['String']['output'];
  readonly views?: Maybe<Scalars['Int']['output']>;
};

export type ClickTrend = {
  readonly __typename: 'ClickTrend';
  readonly currentWeek: Scalars['Int']['output'];
  readonly trend: Scalars['Int']['output'];
};

export type ClickTrendsForV2 = {
  readonly __typename: 'ClickTrendsForV2';
  readonly clickTrend?: Maybe<ClickTrend>;
  readonly lifetime?: Maybe<LifetimeClickCount>;
};

export type ClubhouseLinkContext = {
  readonly __typename: 'ClubhouseLinkContext';
  readonly embedOption?: Maybe<LinkEmbedOptions>;
};

export type ClubhouseLinkContextInput = {
  readonly embedOption?: InputMaybe<LinkEmbedOptions>;
};

export type CoachingLinkContext = {
  readonly __typename: 'CoachingLinkContext';
  readonly campaignId?: Maybe<Scalars['String']['output']>;
  readonly hasCompletedSetup?: Maybe<Scalars['Boolean']['output']>;
};

export type CoachingLinkContextInput = {
  readonly campaignId?: InputMaybe<Scalars['String']['input']>;
  readonly hasCompletedSetup?: InputMaybe<Scalars['Boolean']['input']>;
};

export type CollectionAnalytics = {
  readonly __typename: 'CollectionAnalytics';
  readonly collectionId?: Maybe<Scalars['String']['output']>;
  readonly insights?: Maybe<CollectionInsights>;
};

export type CollectionInsights = {
  readonly __typename: 'CollectionInsights';
  readonly clicks: CollectionInsightsClicks;
  readonly views: CollectionInsightsViews;
};

export type CollectionInsightsClicks = {
  readonly __typename: 'CollectionInsightsClicks';
  /** Total number of clicks for the current range */
  readonly total: Scalars['Int']['output'];
};

export type CollectionInsightsViews = {
  readonly __typename: 'CollectionInsightsViews';
  /** Total number of storefront views for the current range */
  readonly total: Scalars['Int']['output'];
};

export type ColorBackground = {
  readonly __typename: 'ColorBackground';
  readonly color: Scalars['String']['output'];
  readonly noise: Scalars['Boolean']['output'];
  readonly style: BackgroundStyle;
  readonly type: BackgroundType;
};

export enum ColorSchema {
  Subtle = 'subtle',
  Vibrant = 'vibrant'
}

export type ColorSchemaOptions = {
  readonly __typename: 'ColorSchemaOptions';
  readonly buttonBackgroundColor?: Maybe<Scalars['String']['output']>;
  readonly buttonTextColor?: Maybe<Scalars['String']['output']>;
  readonly colorSchema?: Maybe<ColorSchema>;
  readonly themeColor?: Maybe<Scalars['String']['output']>;
};

export type CombinedContentItem = {
  readonly __typename: 'CombinedContentItem';
  readonly link?: Maybe<AccountLink>;
  readonly product?: Maybe<AccountProduct>;
  readonly social?: Maybe<AccountSocial>;
  readonly type: ContentType;
};

export type Command = {
  readonly __typename: 'Command';
  readonly payload?: Maybe<Scalars['String']['output']>;
  readonly type: CommandType;
};

export enum CommandType {
  GenerateBackgroundImage = 'generate_background_image',
  GenerateColorPalette = 'generate_color_palette',
  GenerateProfileImage = 'generate_profile_image',
  RefreshProfile = 'refresh_profile',
  RenderChart = 'render_chart',
  SetBackgroundColor = 'set_background_color',
  SetBackgroundGradient = 'set_background_gradient',
  SetButtonColors = 'set_button_colors',
  SetButtonStyle = 'set_button_style',
  SetFontColor = 'set_font_color',
  SetProfileBio = 'set_profile_bio',
  SetTextFont = 'set_text_font',
  UpdateProfile = 'update_profile',
  UploadBgMedia = 'upload_bg_media',
  UploadProfileImage = 'upload_profile_image'
}

export type CommerceAccountProduct = {
  readonly __typename: 'CommerceAccountProduct';
  readonly accountUuid: Scalars['String']['output'];
  readonly active: Scalars['Boolean']['output'];
  readonly affiliateUrl?: Maybe<Scalars['String']['output']>;
  readonly currency?: Maybe<Scalars['String']['output']>;
  readonly id: Scalars['String']['output'];
  readonly image?: Maybe<Scalars['String']['output']>;
  readonly position?: Maybe<Scalars['Float']['output']>;
  readonly price?: Maybe<Scalars['Int']['output']>;
  readonly priceVisible?: Maybe<Scalars['Boolean']['output']>;
  readonly shortLinkUuid?: Maybe<Scalars['String']['output']>;
  readonly title?: Maybe<Scalars['String']['output']>;
  readonly url: Scalars['String']['output'];
  readonly vendor?: Maybe<Scalars['String']['output']>;
};

/** The account's information within the SoCo rewards program */
export type CommerceAccountRewards = {
  readonly __typename: 'CommerceAccountRewards';
  /** The account's achievements and progress */
  readonly achievements: ReadonlyArray<CommerceRewardsProgramAchievement>;
  /** All tiers available in the rewards program */
  readonly allTiers: ReadonlyArray<CommerceRewardsProgramTier>;
  /** The date that the currentPoints were calculated */
  readonly calculatedAt: Scalars['DateTime']['output'];
  /** The account's challenge progress */
  readonly challenges: ReadonlyArray<CommerceRewardsProgramChallenge>;
  /** The number of points that the account currently has in the rewards program */
  readonly currentPoints: Scalars['Int']['output'];
  /** Current points are calculated by adding up the points earned between pointsWindowStart and pointsWindowEnd */
  readonly pointsWindowEnd: Scalars['DateTime']['output'];
  /** Current points are calculated by adding up the points earned between pointsWindowStart and pointsWindowEnd */
  readonly pointsWindowStart: Scalars['DateTime']['output'];
  /** The available rewards program segments in display order */
  readonly segments: ReadonlyArray<CommerceRewardsProgramSegment>;
  /** The account's tier within the rewards program */
  readonly tier: CommerceRewardsProgramTier;
};

/** An event that contributes with points to the rewards program */
export type CommerceAccountRewardsPointsEvent = {
  readonly __typename: 'CommerceAccountRewardsPointsEvent';
  /** The date when the event occurred */
  readonly createdAt: Scalars['DateTime']['output'];
  /** The id of the source sqs event that triggered these points */
  readonly eventId: Scalars['String']['output'];
  /** The type of event that occurred */
  readonly eventType: Scalars['String']['output'];
  /** The unique identifier for the event */
  readonly id: Scalars['String']['output'];
  /** Json serialized metadata about the event */
  readonly metadata: Scalars['String']['output'];
  /** The number of points that the event contributes */
  readonly points: Scalars['Int']['output'];
};

export type CommerceAccountRewardsPointsEventConnection = {
  readonly __typename: 'CommerceAccountRewardsPointsEventConnection';
  readonly edges: ReadonlyArray<CommerceAccountRewardsPointsEventEdge>;
  readonly pageInfo: PageInfo;
};

export type CommerceAccountRewardsPointsEventEdge = {
  readonly __typename: 'CommerceAccountRewardsPointsEventEdge';
  readonly cursor: Scalars['String']['output'];
  readonly node: CommerceAccountRewardsPointsEvent;
};

/** The account's information within the SoCo rewards program */
export type CommerceAccountRewardsStatusRecon = {
  readonly __typename: 'CommerceAccountRewardsStatusRecon';
  /** The unique identifier for the account */
  readonly accountUuid: Scalars['String']['output'];
  /** The account's achievements and progress */
  readonly achievements: ReadonlyArray<CommerceRewardsProgramAchievement>;
  /** All tiers available in the rewards program */
  readonly allTiers: ReadonlyArray<CommerceRewardsProgramTier>;
  /** The date that the currentPoints were calculated */
  readonly calculatedAt: Scalars['DateTime']['output'];
  /** The account's challenge progress */
  readonly challenges: ReadonlyArray<CommerceRewardsProgramChallenge>;
  /** The number of points that the account currently has in the rewards program */
  readonly currentPoints: Scalars['Int']['output'];
  /** The current tier standing of the account */
  readonly currentTierStanding: Scalars['String']['output'];
  /** The account's cash bonus payouts */
  readonly payouts: ReadonlyArray<CommerceRewardsPayout>;
  /** The events that contributed to the points */
  readonly pointsEvents: CommerceAccountRewardsPointsEventConnection;
  /** Current points are calculated by adding up the points earned between pointsWindowStart and pointsWindowEnd */
  readonly pointsWindowEnd: Scalars['DateTime']['output'];
  /** The unique identifier for the points window */
  readonly pointsWindowId: Scalars['String']['output'];
  /** Current points are calculated by adding up the points earned between pointsWindowStart and pointsWindowEnd */
  readonly pointsWindowStart: Scalars['DateTime']['output'];
  /** The available rewards program segments in display order */
  readonly segments: ReadonlyArray<CommerceRewardsProgramSegment>;
  /** The account's tier within the rewards program */
  readonly tier: CommerceRewardsProgramTier;
};

export type CommerceAccountRewardsStatusReconEdge = {
  readonly __typename: 'CommerceAccountRewardsStatusReconEdge';
  readonly cursor: Scalars['String']['output'];
  readonly node: CommerceAccountRewardsStatusRecon;
};

/** The strategy for auto affiliate links */
export enum CommerceAutoAffiliateLinksStrategy {
  /** Convert all links to affiliate links */
  All = 'ALL',
  /** Convert non affiliate links to affiliate links */
  NonAffiliate = 'NON_AFFILIATE'
}

export type CommerceBannerInfoUserEarningBoost = {
  readonly __typename: 'CommerceBannerInfoUserEarningBoost';
  readonly clicks: Scalars['String']['output'];
  readonly id: Scalars['String']['output'];
  readonly potentialEarnings: Scalars['String']['output'];
};

export type CommerceBannerUserGroup = {
  readonly __typename: 'CommerceBannerUserGroup';
  readonly accountUuid: Scalars['String']['output'];
  readonly bannerUserGroups: ReadonlyArray<Scalars['String']['output']>;
};

export type CommerceBatchAnalyticsInput = {
  readonly account: AccountAnalyticsInput;
  readonly collectionIds?: InputMaybe<ReadonlyArray<Scalars['String']['input']>>;
  readonly productIds?: InputMaybe<ReadonlyArray<Scalars['String']['input']>>;
};

/** Batched analytics response for social-commerce. The returned 'productAnalytics' and 'collectionAnalytics' are 1:1 mappint to the input productIds and collectionIds. */
export type CommerceBatchAnalyticsOutput = {
  readonly __typename: 'CommerceBatchAnalyticsOutput';
  readonly collectionAnalytics?: Maybe<ReadonlyArray<CommerceBatchCollectionAnalytics>>;
  readonly productAnalytics?: Maybe<ReadonlyArray<CommerceBatchProductAnalytics>>;
};

export type CommerceBatchCollectionAnalytics = {
  readonly __typename: 'CommerceBatchCollectionAnalytics';
  readonly collectionId?: Maybe<Scalars['String']['output']>;
  readonly insights?: Maybe<CommerceBatchCollectionInsights>;
};

export type CommerceBatchCollectionInsights = {
  readonly __typename: 'CommerceBatchCollectionInsights';
  readonly clicks: CollectionInsightsClicks;
  readonly views: CollectionInsightsClicks;
};

export type CommerceBatchProductAnalytics = {
  readonly __typename: 'CommerceBatchProductAnalytics';
  readonly insights?: Maybe<CommerceBatchProductInsights>;
  readonly productId?: Maybe<Scalars['String']['output']>;
};

export type CommerceBatchProductInsights = {
  readonly __typename: 'CommerceBatchProductInsights';
  readonly clicks: ProductInsightsClicks;
  readonly views: ProductInsightsViews;
};

export type CommerceBrandProfile = {
  readonly __typename: 'CommerceBrandProfile';
  readonly accountUuid?: Maybe<Scalars['String']['output']>;
  readonly collaborationInterests: ReadonlyArray<CommerceBrandProfileCollaborationInterest>;
  readonly createdAt?: Maybe<Scalars['DateTime']['output']>;
  readonly creatorInfo: CommerceBrandProfileCreatorInfo;
  readonly id?: Maybe<Scalars['String']['output']>;
  readonly mailingAddress: CommerceBrandProfileMailingAddress;
  readonly personalInformation: CommerceBrandProfilePersonalInformation;
  readonly previousCollaborations: ReadonlyArray<CommerceBrandProfilePreviousCollaboration>;
  readonly professionalInformation: CommerceBrandProfileProfessionalInformation;
  readonly rates: ReadonlyArray<CommerceBrandProfileRate>;
  readonly setupStatus: CommerceBrandProfileSetupStatus;
  readonly updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

/** Categories that a brand profile can select to describe their content */
export enum CommerceBrandProfileCategories {
  Animals = 'Animals',
  Art = 'Art',
  Automobiles = 'Automobiles',
  Bars = 'Bars',
  Beauty = 'Beauty',
  Books = 'Books',
  Business = 'Business',
  Celebrities = 'Celebrities',
  Comedy = 'Comedy',
  Communication = 'Communication',
  Curate = 'Curate',
  Education = 'Education',
  Events = 'Events',
  Fashion = 'Fashion',
  Finance = 'Finance',
  Fitness = 'Fitness',
  Food = 'Food',
  Health = 'Health',
  Holidays = 'Holidays',
  Home = 'Home',
  Laws = 'Laws',
  Movies = 'Movies',
  Music = 'Music',
  People = 'People',
  Real = 'Real',
  Relationships = 'Relationships',
  Science = 'Science',
  Social = 'Social',
  Sports = 'Sports',
  Tabletop = 'Tabletop',
  Technology = 'Technology',
  Travel = 'Travel',
  Video = 'Video'
}

export type CommerceBrandProfileCollaborationInterest = {
  readonly __typename: 'CommerceBrandProfileCollaborationInterest';
  /** The icon representing the collaboration interest */
  readonly icon: Scalars['String']['output'];
  /** Indicates if the collaboration interest is checked */
  readonly isChecked: Scalars['Boolean']['output'];
  /** The subtitle of the collaboration interest */
  readonly subtitle: Scalars['String']['output'];
  /** The title of the collaboration interest */
  readonly title: Scalars['String']['output'];
  /** The type of collaboration interest */
  readonly type: CommerceBrandProfileCollaborationType;
};

/** Types of collaborations a brand profile can be interested in */
export enum CommerceBrandProfileCollaborationType {
  AffiliateProducts = 'affiliateProducts',
  GiftedCollaborations = 'giftedCollaborations',
  PaidCollaboration = 'paidCollaboration',
  SponsoredLinks = 'sponsoredLinks'
}

export type CommerceBrandProfileCreatorCategory = {
  readonly __typename: 'CommerceBrandProfileCreatorCategory';
  /** Indicates if the category is selected */
  readonly isSelected: Scalars['Boolean']['output'];
  /** The category label text */
  readonly label: Scalars['String']['output'];
  /** The type of the category */
  readonly type: CommerceBrandProfileCategories;
};

export type CommerceBrandProfileCreatorInfo = {
  readonly __typename: 'CommerceBrandProfileCreatorInfo';
  /** The brand profiles bio section */
  readonly bio?: Maybe<Scalars['String']['output']>;
  /** The brand profiles content categories */
  readonly categories: ReadonlyArray<CommerceBrandProfileCreatorCategory>;
  /** The brand profiles location */
  readonly location?: Maybe<Scalars['String']['output']>;
};

/** The brand proflie owner's gender */
export enum CommerceBrandProfileGender {
  Female = 'female',
  Male = 'male',
  NonBinary = 'nonBinary',
  PreferNotToSay = 'preferNotToSay'
}

export type CommerceBrandProfileMailingAddress = {
  readonly __typename: 'CommerceBrandProfileMailingAddress';
  readonly city?: Maybe<Scalars['String']['output']>;
  readonly state?: Maybe<Scalars['String']['output']>;
  readonly street?: Maybe<Scalars['String']['output']>;
  readonly zipcode?: Maybe<Scalars['String']['output']>;
};

export type CommerceBrandProfilePersonalInformation = {
  readonly __typename: 'CommerceBrandProfilePersonalInformation';
  readonly birthday?: Maybe<Scalars['DateTime']['output']>;
  readonly email?: Maybe<Scalars['String']['output']>;
  readonly fullName?: Maybe<Scalars['String']['output']>;
  readonly gender?: Maybe<CommerceBrandProfileGender>;
  readonly phone?: Maybe<Scalars['String']['output']>;
  /** Indicates if the brand profile is willing to share personal information with brands */
  readonly shareWithBrands: Scalars['Boolean']['output'];
};

export type CommerceBrandProfilePreviousCollaboration = {
  readonly __typename: 'CommerceBrandProfilePreviousCollaboration';
  /** The name of the brand */
  readonly brandName?: Maybe<Scalars['String']['output']>;
  /** The types of collaborations with this brand */
  readonly types: ReadonlyArray<CommerceBrandProfileCollaborationType>;
  /** The vendor ID of the brand */
  readonly vendorId?: Maybe<Scalars['String']['output']>;
};

export type CommerceBrandProfilePreviousCollaborationInput = {
  /** The name of the brand */
  readonly brandName?: InputMaybe<Scalars['String']['input']>;
  /** The types of collaborations with this brand */
  readonly types: ReadonlyArray<CommerceBrandProfileCollaborationType>;
  /** The vendor ID of the brand */
  readonly vendorId?: InputMaybe<Scalars['String']['input']>;
};

export type CommerceBrandProfileProfessionalInformation = {
  readonly __typename: 'CommerceBrandProfileProfessionalInformation';
  readonly jobTitle?: Maybe<Scalars['String']['output']>;
  readonly languages?: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  readonly occupation?: Maybe<Scalars['String']['output']>;
};

export type CommerceBrandProfileRate = {
  readonly __typename: 'CommerceBrandProfileRate';
  /** The brand profile owner's rate for the given deliverable */
  readonly amount: Scalars['String']['output'];
  /** The deliverable type for the rate */
  readonly deliverable: CommerceBrandProfileRatesDeliverable;
  /** The unique identifier of the rate */
  readonly id: Scalars['String']['output'];
  /** Additional notes for the rate */
  readonly notes?: Maybe<Scalars['String']['output']>;
  /** The social media platform for the rate */
  readonly platform: CommerceBrandProfileSocialPlatform;
};

export type CommerceBrandProfileRateInput = {
  /** The brand profile owner's rate for the given deliverable */
  readonly amount: Scalars['String']['input'];
  /** The deliverable type for the rate */
  readonly deliverable: CommerceBrandProfileRatesDeliverable;
  /** Additional notes for the rate */
  readonly notes?: InputMaybe<Scalars['String']['input']>;
  /** The social media platform for the rate */
  readonly platform: CommerceBrandProfileSocialPlatform;
};

/** Brand Profile deliverable types for rates */
export enum CommerceBrandProfileRatesDeliverable {
  FeedPost = 'feed_post',
  Other = 'other',
  PhotoCarousel = 'photo_carousel',
  Reel = 'reel',
  StoryPost = 'story_post',
  TiktokVideo = 'tiktok_video'
}

export type CommerceBrandProfileSetupCards = {
  readonly __typename: 'CommerceBrandProfileSetupCards';
  readonly icon?: Maybe<Scalars['String']['output']>;
  readonly id?: Maybe<Scalars['String']['output']>;
  readonly isComplete: Scalars['Boolean']['output'];
  readonly title?: Maybe<Scalars['String']['output']>;
};

export type CommerceBrandProfileSetupStatus = {
  readonly __typename: 'CommerceBrandProfileSetupStatus';
  readonly cards: ReadonlyArray<CommerceBrandProfileSetupCards>;
  readonly hasConnectedSocials: Scalars['Boolean']['output'];
};

/** Social media platform for describing rates */
export enum CommerceBrandProfileSocialPlatform {
  Instagram = 'instagram',
  Tiktok = 'tiktok'
}

export type CommerceCatalogLayout = {
  readonly __typename: 'CommerceCatalogLayout';
  /** @deprecated Use 'sections' instead. */
  readonly items: ReadonlyArray<CommerceCatalogLayoutItem>;
  readonly sections: CatalogLayoutSectionConnection;
};


export type CommerceCatalogLayoutSectionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
};

export type CommerceCatalogLayoutBannerSection = {
  readonly __typename: 'CommerceCatalogLayoutBannerSection';
  readonly backgroundColor: Scalars['String']['output'];
  readonly id: Scalars['String']['output'];
  readonly imageAsset: Scalars['String']['output'];
  readonly nextLayout: Scalars['String']['output'];
  readonly subtitle: Scalars['String']['output'];
  readonly title: Scalars['String']['output'];
};

export type CommerceCatalogLayoutInput = {
  readonly accountUuid: Scalars['String']['input'];
  readonly id?: InputMaybe<Scalars['String']['input']>;
  readonly pageType?: InputMaybe<CommercePageLayoutType>;
};

export type CommerceCatalogLayoutItem = {
  readonly __typename: 'CommerceCatalogLayoutItem';
  readonly filters?: Maybe<CommerceCatalogSearchFilter>;
  readonly id: Scalars['String']['output'];
  readonly storeProducts: ReadonlyArray<CommerceStoreProduct>;
  readonly title: Scalars['String']['output'];
  readonly type: CommerceCatalogLayoutItemType;
};

export enum CommerceCatalogLayoutItemType {
  ProductCarousel = 'PRODUCT_CAROUSEL',
  RetailersGrid = 'RETAILERS_GRID'
}

export type CommerceCatalogLayoutProductsSection = {
  readonly __typename: 'CommerceCatalogLayoutProductsSection';
  readonly filters?: Maybe<CommerceCatalogSearchFilter>;
  readonly header: Scalars['String']['output'];
  readonly id: Scalars['String']['output'];
  readonly storeProducts: CommerceStoreProductConnection;
  readonly subHeader?: Maybe<Scalars['String']['output']>;
};


export type CommerceCatalogLayoutProductsSectionStoreProductsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
};

export type CommerceCatalogLayoutSection = CommerceCatalogLayoutBannerSection | CommerceCatalogLayoutProductsSection | CommerceCatalogLayoutVendorsSection;

export type CommerceCatalogLayoutSectionEdge = {
  readonly __typename: 'CommerceCatalogLayoutSectionEdge';
  readonly cursor: Scalars['String']['output'];
  readonly node: CommerceCatalogLayoutSection;
};

export type CommerceCatalogLayoutVendorsSection = {
  readonly __typename: 'CommerceCatalogLayoutVendorsSection';
  readonly header: Scalars['String']['output'];
  readonly id: Scalars['String']['output'];
  readonly vendors: CommerceVendorConnection;
};


export type CommerceCatalogLayoutVendorsSectionVendorsArgs = {
  accountUuid?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
};

export type CommerceCatalogProductsCategory = {
  readonly __typename: 'CommerceCatalogProductsCategory';
  readonly count: Scalars['Int']['output'];
  readonly name: Scalars['String']['output'];
};

export type CommerceCatalogProductsMetadata = {
  readonly __typename: 'CommerceCatalogProductsMetadata';
  readonly categories: ReadonlyArray<CommerceCatalogProductsCategory>;
  readonly prices: ReadonlyArray<CommerceCatalogProductsPriceRange>;
  readonly retailers: ReadonlyArray<CommerceCatalogProductsRetailer>;
};

export type CommerceCatalogProductsPriceRange = {
  readonly __typename: 'CommerceCatalogProductsPriceRange';
  readonly count: Scalars['Int']['output'];
  readonly maximum: Scalars['Int']['output'];
  readonly minimum: Scalars['Int']['output'];
};

export type CommerceCatalogProductsRetailer = {
  readonly __typename: 'CommerceCatalogProductsRetailer';
  readonly label: Scalars['String']['output'];
  readonly name: Scalars['String']['output'];
};

export type CommerceCatalogProductsWithMetadata = {
  readonly __typename: 'CommerceCatalogProductsWithMetadata';
  readonly metadata: CommerceCatalogProductsMetadata;
  readonly products: CommerceStoreProductConnection;
};

export type CommerceCatalogSearchFilter = {
  readonly __typename: 'CommerceCatalogSearchFilter';
  readonly brands?: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  readonly category?: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  readonly createdAfter?: Maybe<Scalars['String']['output']>;
  readonly createdBefore?: Maybe<Scalars['String']['output']>;
  readonly maxPrice?: Maybe<Scalars['Int']['output']>;
  readonly minPrice?: Maybe<Scalars['Int']['output']>;
  readonly query?: Maybe<Scalars['String']['output']>;
  readonly tags?: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  readonly vendors?: Maybe<ReadonlyArray<Scalars['String']['output']>>;
};

export type CommerceChatChannel = {
  readonly __typename: 'CommerceChatChannel';
  /** The Sendbird channel id */
  readonly id: Scalars['String']['output'];
  readonly participants: ReadonlyArray<CommerceChatUser>;
};

export type CommerceChatSessionToken = {
  readonly __typename: 'CommerceChatSessionToken';
  /** The expiration time of the session token in Unix ms */
  readonly expires_at: Scalars['Float']['output'];
  /** The Sendbird session token */
  readonly token: Scalars['String']['output'];
};

export type CommerceChatUser = {
  readonly __typename: 'CommerceChatUser';
  /** The id of the user. Depending on `ChatUserType` this will be an accountUuid or a vendor slug */
  readonly id: Scalars['String']['output'];
  readonly type: CommerceChatUserType;
};

export type CommerceChatUserMetadata = {
  /** The nickname of the user. */
  readonly nickname: Scalars['String']['input'];
  /** The profile picture url of the user. */
  readonly profilePictureUrl: Scalars['String']['input'];
};

/** The type of user in the chat channel */
export enum CommerceChatUserType {
  /** A Linker user */
  Linker = 'LINKER',
  /** A vendor user */
  Vendor = 'VENDOR'
}

export type CommerceCollection = {
  readonly __typename: 'CommerceCollection';
  readonly accountUuid: Scalars['String']['output'];
  readonly active: Scalars['Boolean']['output'];
  readonly analytics?: Maybe<AnalyticsInsights>;
  readonly hasCommissionProducts: Scalars['Boolean']['output'];
  readonly id: Scalars['String']['output'];
  readonly position?: Maybe<Scalars['Float']['output']>;
  readonly storeProducts: ReadonlyArray<CommerceStoreProduct>;
  readonly title?: Maybe<Scalars['String']['output']>;
  /** COLLECTION or POST. It matches CommerceStorefrontItemType. */
  readonly type: Scalars['String']['output'];
  readonly ugcContent: ReadonlyArray<UgcContent>;
};

export type CommerceCollectionPreview = {
  readonly __typename: 'CommerceCollectionPreview';
  readonly createdAt?: Maybe<Scalars['DateTime']['output']>;
  readonly id: Scalars['String']['output'];
  readonly products: ReadonlyArray<CommerceProductPreview>;
  readonly source: Scalars['String']['output'];
  readonly title: Scalars['String']['output'];
};

export type CommerceCollectionShortLink = {
  readonly __typename: 'CommerceCollectionShortLink';
  readonly destinationUrl: Scalars['String']['output'];
  readonly linkUuid: Scalars['String']['output'];
  readonly shortId: Scalars['String']['output'];
};

export type CommerceCollectionTemplate = {
  readonly __typename: 'CommerceCollectionTemplate';
  readonly createdAt: Scalars['DateTime']['output'];
  readonly id: Scalars['String']['output'];
  readonly products: CommerceStoreProductConnection;
  readonly title: Scalars['String']['output'];
  readonly updatedAt: Scalars['DateTime']['output'];
};


export type CommerceCollectionTemplateProductsArgs = {
  accountUuid: Scalars['String']['input'];
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
};

export type CommerceCollectionTemplateConnection = {
  readonly __typename: 'CommerceCollectionTemplateConnection';
  readonly edges: ReadonlyArray<CommerceCollectionTemplateEdge>;
  readonly pageInfo: PageInfo;
};

export type CommerceCollectionTemplateEdge = {
  readonly __typename: 'CommerceCollectionTemplateEdge';
  readonly cursor: Scalars['String']['output'];
  readonly node: CommerceCollectionTemplate;
};

export type CommerceCollectionTemplateGroup = {
  readonly __typename: 'CommerceCollectionTemplateGroup';
  readonly createdAt: Scalars['DateTime']['output'];
  readonly id: Scalars['String']['output'];
  readonly templates: CommerceCollectionTemplateConnection;
  readonly title: Scalars['String']['output'];
  readonly updatedAt: Scalars['DateTime']['output'];
};


export type CommerceCollectionTemplateGroupTemplatesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
};

export type CommerceCollectionTemplateGroupConnection = {
  readonly __typename: 'CommerceCollectionTemplateGroupConnection';
  readonly edges: ReadonlyArray<CommerceCollectionTemplateGroupEdge>;
  readonly pageInfo: PageInfo;
};

export type CommerceCollectionTemplateGroupEdge = {
  readonly __typename: 'CommerceCollectionTemplateGroupEdge';
  readonly cursor: Scalars['String']['output'];
  readonly node: CommerceCollectionTemplateGroup;
};

export type CommerceCollections = {
  readonly __typename: 'CommerceCollections';
  readonly collections: ReadonlyArray<CommerceCollection>;
};

/** The concierge shop state onboarding */
export enum CommerceConciergeShopState {
  /** Not started */
  Type_1 = 'TYPE_1',
  /** In progress */
  Type_2 = 'TYPE_2',
  /** Ready */
  Type_3 = 'TYPE_3'
}

export type CommerceConciergeStore = {
  readonly __typename: 'CommerceConciergeStore';
  readonly accountUuid: Scalars['String']['output'];
  readonly conciergeOptInTime?: Maybe<Scalars['DateTime']['output']>;
  readonly conciergeShopState?: Maybe<CommerceConciergeShopState>;
  readonly lastUpdateToConciergeState?: Maybe<Scalars['DateTime']['output']>;
  readonly onboardingCohort?: Maybe<CommerceOnboardingCohort>;
};

export type CommerceConciergeStoreConnection = {
  readonly __typename: 'CommerceConciergeStoreConnection';
  readonly edges: ReadonlyArray<CommerceConciergeStoreEdge>;
  readonly pageInfo: PageInfo;
};

export type CommerceConciergeStoreEdge = {
  readonly __typename: 'CommerceConciergeStoreEdge';
  readonly cursor: Scalars['String']['output'];
  readonly node: CommerceConciergeStore;
};

export type CommerceDateRange = {
  readonly from: Scalars['DateTime']['input'];
  readonly to: Scalars['DateTime']['input'];
};

export type CommerceLinkFees = {
  readonly __typename: 'CommerceLinkFees';
  readonly feePercentage?: Maybe<Scalars['Float']['output']>;
};

export type CommerceMonetizationTerms = {
  readonly __typename: 'CommerceMonetizationTerms';
  readonly needsAccept: Scalars['Boolean']['output'];
};

export type CommerceMonetizationVariation = {
  readonly __typename: 'CommerceMonetizationVariation';
  readonly accountUuid: Scalars['String']['output'];
  readonly variation: Scalars['String']['output'];
};

/** Different cohorts available in the commerce onboarding process */
export enum CommerceOnboardingCohort {
  /** Cohort 1 */
  Type_1 = 'TYPE_1',
  /** Cohort 2A */
  Type_2 = 'TYPE_2',
  /** Cohort 2B */
  Type_3 = 'TYPE_3',
  /** Cohort 3 */
  Type_4 = 'TYPE_4',
  /** Cohort 4A */
  Type_5 = 'TYPE_5',
  /** Cohort 4B */
  Type_6 = 'TYPE_6'
}

export enum CommerceOnboardingEventType {
  ShopAmazonOnboardingCompleted = 'SHOP_AMAZON_ONBOARDING_COMPLETED',
  ShopApplicationApproved = 'SHOP_APPLICATION_APPROVED',
  ShopApplicationDenied = 'SHOP_APPLICATION_DENIED',
  ShopReady = 'SHOP_READY',
  SocialCommerceLinker = 'SOCIAL_COMMERCE_LINKER'
}

export enum CommerceOnboardingFlowStyle {
  Full = 'FULL',
  Medium = 'MEDIUM',
  Short = 'SHORT'
}

export enum CommerceOnboardingTabBadge {
  ApplyToShops = 'APPLY_TO_SHOPS',
  ClaimShop = 'CLAIM_SHOP',
  CreateYourShop = 'CREATE_YOUR_SHOP',
  ShopReady = 'SHOP_READY'
}

export enum CommercePageLayoutType {
  EarnTab = 'EARN_TAB'
}

export type CommercePayLinkContext = {
  readonly __typename: 'CommercePayLinkContext';
  readonly allowCustomAmount: Scalars['Boolean']['output'];
  readonly allowNote: Scalars['Boolean']['output'];
  readonly descriptionMessage?: Maybe<Scalars['String']['output']>;
  readonly helpCoverFees?: Maybe<Scalars['Boolean']['output']>;
  readonly presetAmounts: ReadonlyArray<Scalars['Int']['output']>;
  readonly serviceIntegration?: Maybe<ServiceIntegration>;
  readonly successMessage?: Maybe<Scalars['String']['output']>;
};

export type CommercePayLinkContextInput = {
  readonly allowCustomAmount?: InputMaybe<Scalars['Boolean']['input']>;
  readonly allowNote?: InputMaybe<Scalars['Boolean']['input']>;
  readonly descriptionMessage?: InputMaybe<Scalars['String']['input']>;
  readonly helpCoverFees?: InputMaybe<Scalars['Boolean']['input']>;
  readonly presetAmounts?: InputMaybe<ReadonlyArray<Scalars['Int']['input']>>;
  readonly serviceIntegrationId?: InputMaybe<Scalars['String']['input']>;
  readonly successMessage?: InputMaybe<Scalars['String']['input']>;
};

export type CommercePreviews = {
  readonly __typename: 'CommercePreviews';
  readonly previews: ReadonlyArray<CommerceCollectionPreview>;
};

export type CommerceProductLinkContext = {
  readonly __typename: 'CommerceProductLinkContext';
  readonly accountProductId?: Maybe<Scalars['String']['output']>;
  readonly product?: Maybe<CommerceProductLinkProduct>;
};

export type CommerceProductLinkContextInput = {
  readonly accountProductId: Scalars['String']['input'];
};

export type CommerceProductLinkProduct = {
  readonly __typename: 'CommerceProductLinkProduct';
  readonly currency?: Maybe<Scalars['String']['output']>;
  readonly id: Scalars['String']['output'];
  readonly image?: Maybe<Scalars['String']['output']>;
  readonly price?: Maybe<Scalars['Int']['output']>;
  readonly salePrice?: Maybe<Scalars['Int']['output']>;
  readonly title: Scalars['String']['output'];
  readonly url: Scalars['String']['output'];
  readonly vendorDisplayName?: Maybe<Scalars['String']['output']>;
};

export type CommerceProductPreview = {
  readonly __typename: 'CommerceProductPreview';
  readonly imageUrl?: Maybe<Scalars['String']['output']>;
  readonly matchedUrl?: Maybe<Scalars['String']['output']>;
  readonly originalUrl: Scalars['String']['output'];
  readonly title: Scalars['String']['output'];
};

export type CommerceRecommendationList = {
  readonly __typename: 'CommerceRecommendationList';
  readonly recommendationType: CommerceRecommendationType;
  readonly storeProducts: ReadonlyArray<CommerceStoreProduct>;
};

export enum CommerceRecommendationType {
  Type_1 = 'TYPE_1',
  Type_2 = 'TYPE_2',
  Type_3 = 'TYPE_3',
  Type_4 = 'TYPE_4',
  Type_5 = 'TYPE_5'
}

/** Information about an earned Rewards Program payout */
export type CommerceRewardsPayout = {
  readonly __typename: 'CommerceRewardsPayout';
  /** The identifier of the account that has earned the payout */
  readonly accountUuid: Scalars['String']['output'];
  /** The email address of the person that approved the cash payout */
  readonly actorEmail?: Maybe<Scalars['String']['output']>;
  /** The full name of the person that approved the cash payout */
  readonly actorFullName?: Maybe<Scalars['String']['output']>;
  /** The amount, in cents, that the payout is worth */
  readonly amount: Scalars['Float']['output'];
  /** The date that the rewards payout was earned */
  readonly earnedAt: Scalars['DateTime']['output'];
  /** The identifier of the event that led to earning the cash payout */
  readonly eventId?: Maybe<Scalars['String']['output']>;
  /** The unique identifier of the rewards payout */
  readonly id: Scalars['String']['output'];
  /** The date that the rewards payout was paid */
  readonly paidAt?: Maybe<Scalars['DateTime']['output']>;
  /** The type of rewards payout */
  readonly payoutType: CommerceRewardsProgramPayoutType;
};

export type CommerceRewardsPayoutEdge = {
  readonly __typename: 'CommerceRewardsPayoutEdge';
  readonly cursor: Scalars['String']['output'];
  readonly node: CommerceRewardsPayout;
};

/** A specific goal or task that earns points within the rewards program */
export type CommerceRewardsProgramAchievement = {
  readonly __typename: 'CommerceRewardsProgramAchievement';
  /** Additional information about the achievement. */
  readonly description: Scalars['String']['output'];
  /** URL for the achievement's associated icon. */
  readonly icon: Scalars['String']['output'];
  /** The unique identifier of the achievement. */
  readonly id: Scalars['String']['output'];
  /** Whether or not a given user has completed the achievement. */
  readonly isComplete: Scalars['Boolean']['output'];
  /** The maximum number of times that an achievement can be earned. */
  readonly maxAwards: Scalars['Int']['output'];
  /** The name of the achievement. */
  readonly name: Scalars['String']['output'];
  /** The number of points awarded for completing the achievements. */
  readonly pointsAwarded: Scalars['Int']['output'];
  /** Information to build a progress bar corresponding to an account's progress in earning an achievement. */
  readonly progressBar?: Maybe<CommerceRewardsProgramProgressBar>;
};

/** A benefit available to participants in the social commerce rewards program */
export type CommerceRewardsProgramBenefit = {
  readonly __typename: 'CommerceRewardsProgramBenefit';
  /** Indicate that a benefit is coming soon */
  readonly comingSoon: Scalars['Boolean']['output'];
  /** The details and explanation of the benefit */
  readonly description: Scalars['String']['output'];
  /** The links to interpolate into the benefit description */
  readonly descriptionLinks: ReadonlyArray<CommerceRewardsProgramDscriptionLinks>;
  /** The icon displayed next to the benefit */
  readonly icon: Scalars['String']['output'];
  /** The unique identifier for this benefit */
  readonly id: Scalars['String']['output'];
  /** The name of the benefit */
  readonly name: Scalars['String']['output'];
};

/** Information to display the Cash Bonus segment ui */
export type CommerceRewardsProgramCashBonusSegment = {
  readonly __typename: 'CommerceRewardsProgramCashBonusSegment';
  /** Additional information about the challenge */
  readonly description: Scalars['String']['output'];
  /** URL for the challenge's associated icon. */
  readonly icon: Scalars['String']['output'];
  /** The unique identifier of the challenge. */
  readonly id: Scalars['String']['output'];
  /** The name of the challenge. */
  readonly name: Scalars['String']['output'];
  /** Shows how far the user is from their next cash bonus */
  readonly progressBar: CommerceRewardsProgramProgressBar;
};

/** A specific goal or task that earns points within the rewards program */
export type CommerceRewardsProgramChallenge = {
  readonly __typename: 'CommerceRewardsProgramChallenge';
  /** Additional information about the challenge */
  readonly description: Scalars['String']['output'];
  /** URL for the challenge's associated icon. */
  readonly icon: Scalars['String']['output'];
  /** The unique identifier of the challenge. */
  readonly id: Scalars['String']['output'];
  /** The name of the challenge. */
  readonly name: Scalars['String']['output'];
  /** The number of points earned in this challenge */
  readonly pointsEarned: Scalars['Int']['output'];
  /** The number of points awarded for meeting a threshold in a challenge. */
  readonly pointsPerThreshold: Scalars['Int']['output'];
  /** The rate at which points are earned in this activity. ex: '30 points per 5 clicks' */
  readonly pointsRate: Scalars['String']['output'];
  /** Information to build a progress bar corresponding to an account's progress in a challenge */
  readonly progressBar?: Maybe<CommerceRewardsProgramProgressBar>;
  /** The subtitle for this challenge. */
  readonly subtitle: Scalars['String']['output'];
};

/** Text and url to hyperlink in the rewards program description */
export type CommerceRewardsProgramDscriptionLinks = {
  readonly __typename: 'CommerceRewardsProgramDscriptionLinks';
  /** The text in the description to hyperlink */
  readonly text: Scalars['String']['output'];
  /** The URL target */
  readonly url: Scalars['String']['output'];
};

/** The type of rewards program payout */
export enum CommerceRewardsProgramPayoutType {
  Commission = 'COMMISSION',
  GoldTier = 'GOLD_TIER',
  SilverTier = 'SILVER_TIER'
}

/** Represents the progress towards a goal in the social commerce rewards program */
export type CommerceRewardsProgramProgressBar = {
  readonly __typename: 'CommerceRewardsProgramProgressBar';
  /** The current value in the progress bar */
  readonly currentValue: Scalars['Int']['output'];
  /** The maximum value in the progress bar */
  readonly maxValue: Scalars['Int']['output'];
  /** This progress bar's milestones if it has any */
  readonly milestones: ReadonlyArray<CommerceRewardsProgramProgressBarMilestone>;
};

/** Represents a milestone in a social commerce rewards program progress bar */
export type CommerceRewardsProgramProgressBarMilestone = {
  readonly __typename: 'CommerceRewardsProgramProgressBarMilestone';
  /** The milestone's name if it has one */
  readonly name?: Maybe<Scalars['String']['output']>;
  /** The milestone's value */
  readonly value: Scalars['Int']['output'];
};

/** A collection of rewards program goals that have grouped for display purposes */
export type CommerceRewardsProgramSegment = {
  readonly __typename: 'CommerceRewardsProgramSegment';
  /** A description of he rewards program segment */
  readonly description: Scalars['String']['output'];
  /** The unique identifier of the segment */
  readonly id: Scalars['String']['output'];
  /** The achievements and challenges included in this group */
  readonly items: ReadonlyArray<RewardsProgramDisplaySegmentItem>;
  /** The layout style for the items */
  readonly layoutStyle: Scalars['String']['output'];
  /** The name of the rewards program segment */
  readonly name: Scalars['String']['output'];
};

/** A tier within the reward program */
export type CommerceRewardsProgramTier = {
  readonly __typename: 'CommerceRewardsProgramTier';
  /** The benefits available to users in this tier */
  readonly benefits: ReadonlyArray<CommerceRewardsProgramBenefit>;
  /** The icon displayed next to the tier */
  readonly icon: Scalars['String']['output'];
  /** The unique identifier for this tier */
  readonly id: Scalars['String']['output'];
  /** The upper threshold of points that place a linker in this tier */
  readonly maximumPoints: Scalars['Int']['output'];
  /** The lower threshold of points that place a linker in this tier */
  readonly minimumPoints: Scalars['Int']['output'];
  /** The name of the tier */
  readonly name: CommerceRewardsProgramTierName;
  /** The tier above the given tier in the rewards program progression if applicable */
  readonly nextTier?: Maybe<CommerceRewardsProgramTier>;
  /** The primary color or color gradient for a tier */
  readonly primaryColor: ReadonlyArray<Scalars['String']['output']>;
  /** Information to build a progress bar corresponding to an account's progress towards reaching tje tier */
  readonly progressBar?: Maybe<CommerceRewardsProgramProgressBar>;
  /** The bottom text displayed for tier status */
  readonly progressSubtitle: Scalars['String']['output'];
  /** The top text displayed for tier status */
  readonly progressTitle: Scalars['String']['output'];
  /** The secondary color or color gradient for a tier */
  readonly secondaryColor: ReadonlyArray<Scalars['String']['output']>;
};

/** These are the names of the available tiers within the rewards program */
export enum CommerceRewardsProgramTierName {
  /** Gold tier in the rewards program */
  Gold = 'GOLD',
  /** Green tier in the rewards program */
  Green = 'GREEN',
  /** Platinum tier in the rewards program */
  Platinum = 'PLATINUM',
  /** Silver tier in the rewards program */
  Silver = 'SILVER'
}

export type CommerceSimilarStoreProducts = {
  readonly __typename: 'CommerceSimilarStoreProducts';
  /** A custom product that is not part of the catalog. This product will not be monetized. */
  readonly customProduct?: Maybe<CommerceStoreProduct>;
  /** A monetized product that matches the user inputted url exactly. This product may or may not be part of the catalog. If not, it will be monetized via Connexity. */
  readonly exactProduct?: Maybe<CommerceStoreProduct>;
  /** Products that match the user inputted url but have different vendors. These products will belong to the catalog. */
  readonly sameProductDifferentVendors: ReadonlyArray<CommerceStoreProduct>;
  /** Products that are similar to the user inputted url but have different vendors. These products will belong to the catalog. */
  readonly similarProducts: ReadonlyArray<CommerceStoreProduct>;
};

export enum CommerceSortDirection {
  Asc = 'ASC',
  Desc = 'DESC'
}

export type CommerceSponsoredOfferConnection = {
  readonly __typename: 'CommerceSponsoredOfferConnection';
  readonly edges: ReadonlyArray<CommerceSponsoredOfferEdge>;
  readonly pageInfo: PageInfo;
};

export type CommerceSponsoredOfferEdge = {
  readonly __typename: 'CommerceSponsoredOfferEdge';
  readonly cursor: Scalars['String']['output'];
  readonly node: SponsoredOffer;
};

export enum CommerceSponsoredOfferFilterByOptions {
  Categories = 'Categories',
  Popular = 'Popular',
  Trending = 'Trending',
  Types = 'Types'
}

export type CommerceSponsoredOfferFilterByStatement = {
  readonly key: CommerceSponsoredOfferFilterByOptions;
  readonly values: ReadonlyArray<Scalars['String']['input']>;
};

export enum CommerceSponsoredOfferOrderByOptions {
  CommissionAmount = 'commissionAmount',
  CreatedAt = 'createdAt',
  Vendor = 'vendor'
}

export type CommerceSponsoredOfferOrderByStatement = {
  readonly direction: CommerceSortDirection;
  readonly field: CommerceSponsoredOfferOrderByOptions;
};

export enum CommerceSponsoredOfferSearchByOptions {
  Vendor = 'vendor'
}

export type CommerceSponsoredOfferSearchByStatement = {
  readonly field: CommerceSponsoredOfferSearchByOptions;
  readonly values: ReadonlyArray<Scalars['String']['input']>;
};

export type CommerceSponsoredOfferType = {
  readonly __typename: 'CommerceSponsoredOfferType';
  readonly count: Scalars['Float']['output'];
  readonly name: Scalars['String']['output'];
};

export type CommerceSponsoredOffersCategory = {
  readonly __typename: 'CommerceSponsoredOffersCategory';
  readonly count: Scalars['Float']['output'];
  readonly name: Scalars['String']['output'];
};

export type CommerceSponsoredOffersMetadata = {
  readonly __typename: 'CommerceSponsoredOffersMetadata';
  readonly categories: ReadonlyArray<CommerceSponsoredOffersCategory>;
  readonly types: ReadonlyArray<CommerceSponsoredOfferType>;
};

export type CommerceSponsoredOffersWithMetadata = {
  readonly __typename: 'CommerceSponsoredOffersWithMetadata';
  readonly metadata: CommerceSponsoredOffersMetadata;
  readonly offers: CommerceSponsoredOfferConnection;
};

export type CommerceStore = {
  readonly __typename: 'CommerceStore';
  readonly accountUuid: Scalars['String']['output'];
  readonly autoAffiliateLinksEnabled?: Maybe<Scalars['Boolean']['output']>;
  readonly autoAffiliateLinksStrategy?: Maybe<CommerceAutoAffiliateLinksStrategy>;
  readonly conciergeOptInTime?: Maybe<Scalars['DateTime']['output']>;
  readonly conciergeShopState?: Maybe<CommerceConciergeShopState>;
  readonly flags?: Maybe<ReadonlyArray<CommerceStoreFlag>>;
  readonly lastUpdateToConciergeState?: Maybe<Scalars['DateTime']['output']>;
  readonly monetizationTerms?: Maybe<CommerceMonetizationTerms>;
  readonly onboardingCohort?: Maybe<CommerceOnboardingCohort>;
  readonly onboardingFlowStyle?: Maybe<CommerceOnboardingFlowStyle>;
  readonly onboardingTabBadge?: Maybe<CommerceOnboardingTabBadge>;
  readonly shopEntryPointOnLinksEnabled?: Maybe<Scalars['Boolean']['output']>;
  readonly storeApplicationStatus?: Maybe<CommerceStoreApplicationStatus>;
};

export type CommerceStoreAccess = {
  readonly __typename: 'CommerceStoreAccess';
  readonly access: Scalars['Boolean']['output'];
};

/** The current status of a CommerceStore's application */
export enum CommerceStoreApplicationStatus {
  Accepted = 'ACCEPTED',
  NotStarted = 'NOT_STARTED',
  Pending = 'PENDING',
  Rejected = 'REJECTED'
}

export type CommerceStoreFlag = {
  readonly __typename: 'CommerceStoreFlag';
  readonly name: Scalars['String']['output'];
  readonly value: Scalars['Boolean']['output'];
};

export type CommerceStoreForProfile = {
  readonly __typename: 'CommerceStoreForProfile';
  readonly accountUuid: Scalars['String']['output'];
  readonly autoAffiliateLinksEnabled?: Maybe<Scalars['Boolean']['output']>;
  readonly autoAffiliateLinksStrategy?: Maybe<CommerceAutoAffiliateLinksStrategy>;
  readonly flags?: Maybe<ReadonlyArray<CommerceStoreFlag>>;
  readonly shopEntryPointOnLinksEnabled?: Maybe<Scalars['Boolean']['output']>;
};

export type CommerceStoreProduct = {
  readonly __typename: 'CommerceStoreProduct';
  readonly accountProductId?: Maybe<Scalars['String']['output']>;
  readonly accountUuid?: Maybe<Scalars['String']['output']>;
  readonly active: Scalars['Boolean']['output'];
  readonly addedStandalone: Scalars['Boolean']['output'];
  readonly analytics?: Maybe<AnalyticsInsights>;
  readonly brand?: Maybe<Scalars['String']['output']>;
  readonly catalogInstanceId?: Maybe<Scalars['String']['output']>;
  /** @deprecated Use 'catalogInstanceId' instead. */
  readonly catalogProductId?: Maybe<Scalars['String']['output']>;
  readonly commissionAmount?: Maybe<Scalars['Float']['output']>;
  readonly commissionCurrency?: Maybe<Scalars['String']['output']>;
  readonly commissionEarned?: Maybe<Scalars['Int']['output']>;
  readonly commissionType?: Maybe<CommissionType>;
  readonly comoAction?: Maybe<Scalars['String']['output']>;
  /** @deprecated No longer in use. */
  readonly comoRules?: Maybe<Scalars['String']['output']>;
  readonly currency?: Maybe<Scalars['String']['output']>;
  readonly hasCommission: Scalars['Boolean']['output'];
  readonly id: Scalars['String']['output'];
  readonly image?: Maybe<Scalars['String']['output']>;
  readonly isArchived: Scalars['Boolean']['output'];
  /** This field should be populated by the FE when a store product is added. It should be the original url that the user inputted. Used by the BE for regenerating affiliate urls that depend on accountProductId for tracking. */
  readonly originalUserInputtedUrl?: Maybe<Scalars['String']['output']>;
  readonly position?: Maybe<Scalars['Float']['output']>;
  readonly price?: Maybe<Scalars['Int']['output']>;
  readonly priceVisible?: Maybe<Scalars['Boolean']['output']>;
  /** The url for this product's Image. but proxied */
  readonly proxiedImage?: Maybe<Scalars['String']['output']>;
  readonly salePrice?: Maybe<Scalars['Int']['output']>;
  readonly shortLinkUuid?: Maybe<Scalars['String']['output']>;
  readonly tags: ReadonlyArray<CommerceTag>;
  readonly title?: Maybe<Scalars['String']['output']>;
  readonly type: Scalars['String']['output'];
  readonly url: Scalars['String']['output'];
  readonly vendor?: Maybe<Scalars['String']['output']>;
  readonly vendorDisplayName?: Maybe<Scalars['String']['output']>;
};


export type CommerceStoreProductUrlArgs = {
  withButtonRedirect?: Scalars['Boolean']['input'];
};

export type CommerceStoreProductConnection = {
  readonly __typename: 'CommerceStoreProductConnection';
  readonly edges: ReadonlyArray<CommerceStoreProductEdge>;
  readonly pageInfo: PageInfo;
};

export type CommerceStoreProductEdge = {
  readonly __typename: 'CommerceStoreProductEdge';
  readonly cursor: Scalars['String']['output'];
  readonly node: CommerceStoreProduct;
};

export enum CommerceStoreProductFilterByOptions {
  Categories = 'Categories',
  Popular = 'Popular',
  PriceMax = 'PriceMax',
  PriceMin = 'PriceMin',
  Trending = 'Trending',
  Vendors = 'Vendors'
}

export type CommerceStoreProductFilterByStatement = {
  readonly key: CommerceStoreProductFilterByOptions;
  readonly values: ReadonlyArray<Scalars['String']['input']>;
};

export enum CommerceStoreProductOrderByOptions {
  CommissionAmount = 'commissionAmount',
  CreatedAt = 'createdAt',
  Title = 'title'
}

export type CommerceStoreProductOrderByStatement = {
  readonly direction: CommerceSortDirection;
  readonly field: CommerceStoreProductOrderByOptions;
};

export type CommerceStoreProductShortLink = {
  readonly __typename: 'CommerceStoreProductShortLink';
  readonly destinationUrl: Scalars['String']['output'];
  readonly linkUuid: Scalars['String']['output'];
  readonly shortId: Scalars['String']['output'];
};

export type CommerceStoreProducts = {
  readonly __typename: 'CommerceStoreProducts';
  readonly storeProducts: ReadonlyArray<CommerceStoreProduct>;
};

export type CommerceStoreRetoolProduct = {
  readonly __typename: 'CommerceStoreRetoolProduct';
  readonly accountProductId?: Maybe<Scalars['String']['output']>;
  readonly accountUuid?: Maybe<Scalars['String']['output']>;
  readonly active: Scalars['Boolean']['output'];
  readonly addedStandalone: Scalars['Boolean']['output'];
  readonly analytics?: Maybe<AnalyticsInsights>;
  readonly attributeStorageLocation?: Maybe<AttributeStorageLocation>;
  readonly brand?: Maybe<Scalars['String']['output']>;
  readonly catalogInstanceId?: Maybe<Scalars['String']['output']>;
  /** @deprecated Use 'catalogInstanceId' instead. */
  readonly catalogProductId?: Maybe<Scalars['String']['output']>;
  readonly commissionAmount?: Maybe<Scalars['Float']['output']>;
  readonly commissionCurrency?: Maybe<Scalars['String']['output']>;
  readonly commissionEarned?: Maybe<Scalars['Int']['output']>;
  readonly commissionType?: Maybe<CommissionType>;
  readonly comoAction?: Maybe<Scalars['String']['output']>;
  /** @deprecated No longer in use. */
  readonly comoRules?: Maybe<Scalars['String']['output']>;
  readonly currency?: Maybe<Scalars['String']['output']>;
  readonly hasCommission: Scalars['Boolean']['output'];
  readonly id: Scalars['String']['output'];
  readonly image?: Maybe<Scalars['String']['output']>;
  readonly isArchived: Scalars['Boolean']['output'];
  /** This field should be populated by the FE when a store product is added. It should be the original url that the user inputted. Used by the BE for regenerating affiliate urls that depend on accountProductId for tracking. */
  readonly originalUserInputtedUrl?: Maybe<Scalars['String']['output']>;
  readonly position?: Maybe<Scalars['Float']['output']>;
  readonly price?: Maybe<Scalars['Int']['output']>;
  readonly priceVisible?: Maybe<Scalars['Boolean']['output']>;
  /** The url for this product's Image. but proxied */
  readonly proxiedImage?: Maybe<Scalars['String']['output']>;
  readonly salePrice?: Maybe<Scalars['Int']['output']>;
  readonly shortLinkUuid?: Maybe<Scalars['String']['output']>;
  readonly tags: ReadonlyArray<CommerceTag>;
  readonly title?: Maybe<Scalars['String']['output']>;
  readonly type: Scalars['String']['output'];
  readonly url: Scalars['String']['output'];
  readonly vendor?: Maybe<Scalars['String']['output']>;
  readonly vendorDisplayName?: Maybe<Scalars['String']['output']>;
};


export type CommerceStoreRetoolProductUrlArgs = {
  withButtonRedirect?: Scalars['Boolean']['input'];
};

export type CommerceStoreRetoolProducts = {
  readonly __typename: 'CommerceStoreRetoolProducts';
  readonly storeProducts: ReadonlyArray<CommerceStoreRetoolProduct>;
};

/** This model represents the items shown on the storefront. The posts are managed separately from other items. */
export type CommerceStorefrontItems = {
  readonly __typename: 'CommerceStorefrontItems';
  readonly hasCommissionProducts: Scalars['Boolean']['output'];
  readonly items?: Maybe<ReadonlyArray<StorefrontItemUnion>>;
  /** POSTs are collections with UGC contents. */
  readonly posts?: Maybe<ReadonlyArray<CommerceStorefrontPost>>;
};

export type CommerceStorefrontPost = {
  readonly __typename: 'CommerceStorefrontPost';
  readonly accountUuid: Scalars['String']['output'];
  readonly active: Scalars['Boolean']['output'];
  readonly analytics?: Maybe<AnalyticsInsights>;
  readonly hasCommissionProducts: Scalars['Boolean']['output'];
  readonly id: Scalars['String']['output'];
  readonly position?: Maybe<Scalars['Float']['output']>;
  readonly storeProducts: ReadonlyArray<CommerceStoreProduct>;
  readonly title?: Maybe<Scalars['String']['output']>;
  /** COLLECTION or POST. It matches CommerceStorefrontItemType. */
  readonly type: Scalars['String']['output'];
  readonly ugcContent: ReadonlyArray<UgcContent>;
};

export type CommerceStorefrontPostShortLink = {
  readonly __typename: 'CommerceStorefrontPostShortLink';
  readonly destinationUrl: Scalars['String']['output'];
  readonly linkUuid: Scalars['String']['output'];
  readonly shortId: Scalars['String']['output'];
};

export type CommerceTag = {
  readonly __typename: 'CommerceTag';
  readonly displayName: Scalars['String']['output'];
  readonly id?: Maybe<Scalars['String']['output']>;
  readonly priority?: Maybe<Scalars['Int']['output']>;
  readonly slug: Scalars['String']['output'];
};

export type CommerceUrlOverride = {
  readonly __typename: 'CommerceUrlOverride';
  readonly accountProductId?: Maybe<Scalars['String']['output']>;
  readonly accountUuid: Scalars['String']['output'];
  readonly id: Scalars['String']['output'];
  readonly linkId?: Maybe<Scalars['Int']['output']>;
  readonly originalUrl: Scalars['String']['output'];
  readonly overrideUrl: Scalars['String']['output'];
};

export type CommerceUrlOverrideInternal = {
  readonly __typename: 'CommerceUrlOverrideInternal';
  readonly accountProductId?: Maybe<Scalars['String']['output']>;
  readonly accountUuid: Scalars['String']['output'];
  readonly createdAt: Scalars['DateTime']['output'];
  readonly createdBy?: Maybe<Scalars['String']['output']>;
  readonly id: Scalars['String']['output'];
  readonly isAutoMagical: Scalars['Boolean']['output'];
  readonly linkId?: Maybe<Scalars['Int']['output']>;
  readonly matchedMarketplaceInstanceId?: Maybe<Scalars['String']['output']>;
  readonly originalUrl: Scalars['String']['output'];
  readonly overrideUrl: Scalars['String']['output'];
  readonly updatedAt: Scalars['DateTime']['output'];
};

export type CommerceVendor = {
  readonly __typename: 'CommerceVendor';
  readonly affiliateLinkId?: Maybe<Scalars['String']['output']>;
  readonly categories: ReadonlyArray<Scalars['String']['output']>;
  readonly commissionPercentageRange: CommissionPercentageRange;
  readonly createdAt: Scalars['DateTime']['output'];
  readonly defaultCommissionRate: Scalars['Float']['output'];
  readonly fullDomain?: Maybe<Scalars['String']['output']>;
  readonly icon: Scalars['String']['output'];
  /** @deprecated Use slug instead */
  readonly id: Scalars['String']['output'];
  /** @deprecated Use icon instead */
  readonly image: Scalars['String']['output'];
  readonly isActive: Scalars['Boolean']['output'];
  readonly label: Scalars['String']['output'];
  /** The affiliate network/marketplace that the vendor belongs to. */
  readonly marketplace: Scalars['String']['output'];
  readonly offerId?: Maybe<Scalars['String']['output']>;
  readonly productAddSource: CommerceVendorProductAddSource;
  readonly productDomainPatterns?: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  readonly redirectDomain?: Maybe<Scalars['String']['output']>;
  readonly slug: Scalars['String']['output'];
  readonly tags: ReadonlyArray<CommerceVendorTag>;
  readonly themeColor?: Maybe<Scalars['String']['output']>;
  readonly url: Scalars['String']['output'];
  readonly vendorId: Scalars['String']['output'];
};

export type CommerceVendorConnection = {
  readonly __typename: 'CommerceVendorConnection';
  readonly edges: ReadonlyArray<CommerceVendorEdge>;
  readonly pageInfo: PageInfo;
};

export type CommerceVendorEdge = {
  readonly __typename: 'CommerceVendorEdge';
  readonly cursor: Scalars['String']['output'];
  readonly node: CommerceVendor;
};

export enum CommerceVendorFilterByOptions {
  Categories = 'Categories',
  Popular = 'Popular',
  Trending = 'Trending'
}

export type CommerceVendorFilterByStatement = {
  readonly key: CommerceVendorFilterByOptions;
  readonly values: ReadonlyArray<Scalars['String']['input']>;
};

export enum CommerceVendorOrderByOptions {
  CommissionRate = 'commissionRate',
  CreatedAt = 'createdAt',
  Label = 'label',
  Slug = 'slug'
}

export type CommerceVendorOrderByStatement = {
  readonly direction: CommerceSortDirection;
  readonly field: CommerceVendorOrderByOptions;
};

/** The source where products for this vendor can be found */
export enum CommerceVendorProductAddSource {
  /** Products should be added via the SoCo Catalog */
  Catalog = 'CATALOG',
  /** Products should be added via the vendor website */
  Website = 'WEBSITE'
}

export type CommerceVendorRetool = {
  readonly __typename: 'CommerceVendorRetool';
  readonly affiliateLinkId?: Maybe<Scalars['String']['output']>;
  readonly categories: ReadonlyArray<Scalars['String']['output']>;
  readonly commissionPercentageMax?: Maybe<Scalars['Float']['output']>;
  readonly commissionPercentageMin?: Maybe<Scalars['Float']['output']>;
  readonly createdAt: Scalars['DateTime']['output'];
  readonly defaultCommissionRate: Scalars['Float']['output'];
  /** @deprecated Use productDomainPatterns instead */
  readonly fullDomain?: Maybe<Scalars['String']['output']>;
  readonly icon: Scalars['String']['output'];
  readonly isActive: Scalars['Boolean']['output'];
  readonly isVisible: Scalars['Boolean']['output'];
  readonly label: Scalars['String']['output'];
  readonly lastIngest?: Maybe<Scalars['DateTime']['output']>;
  readonly lastIngestCount?: Maybe<Scalars['Float']['output']>;
  readonly marketplace: Scalars['String']['output'];
  readonly offerId?: Maybe<Scalars['String']['output']>;
  readonly productAddSource: CommerceVendorProductAddSource;
  readonly productDomainPatterns?: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  readonly redirectDomain?: Maybe<Scalars['String']['output']>;
  readonly searchWeight: Scalars['Float']['output'];
  readonly slug: Scalars['String']['output'];
  readonly themeColor?: Maybe<Scalars['String']['output']>;
  readonly updatedAt: Scalars['DateTime']['output'];
  readonly url: Scalars['String']['output'];
  readonly vendorId: Scalars['String']['output'];
};

export type CommerceVendorRetoolConnection = {
  readonly __typename: 'CommerceVendorRetoolConnection';
  readonly edges: ReadonlyArray<CommerceVendorRetoolEdge>;
  readonly pageInfo: PageInfo;
};

export type CommerceVendorRetoolEdge = {
  readonly __typename: 'CommerceVendorRetoolEdge';
  readonly cursor: Scalars['String']['output'];
  readonly node: CommerceVendorRetool;
};

export enum CommerceVendorSearchByOptions {
  Label = 'label'
}

export type CommerceVendorSearchByStatement = {
  readonly field: CommerceVendorSearchByOptions;
  readonly values: ReadonlyArray<Scalars['String']['input']>;
};

export type CommerceVendorTag = {
  readonly __typename: 'CommerceVendorTag';
  readonly displayName: Scalars['String']['output'];
  readonly slug: Scalars['String']['output'];
};

export type CommerceVendorsCategory = {
  readonly __typename: 'CommerceVendorsCategory';
  readonly count: Scalars['Float']['output'];
  readonly name: Scalars['String']['output'];
};

export type CommerceVendorsMetadata = {
  readonly __typename: 'CommerceVendorsMetadata';
  readonly categories: ReadonlyArray<CommerceVendorsCategory>;
};

export type CommerceVendorsWithMetadata = {
  readonly __typename: 'CommerceVendorsWithMetadata';
  readonly metadata: CommerceVendorsMetadata;
  readonly vendors: CommerceVendorConnection;
};

export type CommerceWalletEnabled = {
  readonly __typename: 'CommerceWalletEnabled';
  readonly walletEnabled: Scalars['Boolean']['output'];
};

export type Commission = {
  readonly __typename: 'Commission';
  readonly description: Scalars['String']['output'];
  readonly displayDate: Scalars['DateTime']['output'];
  readonly displayRate: Scalars['Float']['output'];
  readonly displayValue: Scalars['Float']['output'];
  readonly imageUrl?: Maybe<Scalars['String']['output']>;
  readonly listValue: Scalars['Float']['output'];
  readonly productId?: Maybe<Scalars['String']['output']>;
  readonly quantity: Scalars['Float']['output'];
  readonly status: CommissionRecordStatus;
  readonly type: Scalars['String']['output'];
};

export type CommissionPercentageRange = {
  readonly __typename: 'CommissionPercentageRange';
  readonly maximum?: Maybe<Scalars['Float']['output']>;
  readonly minimum?: Maybe<Scalars['Float']['output']>;
};

export type CommissionRecord = {
  readonly __typename: 'CommissionRecord';
  readonly account: CommissionRecordAccount;
  readonly accountUuid: Scalars['String']['output'];
  readonly baseRate: Scalars['Float']['output'];
  readonly baseValue: Scalars['Float']['output'];
  readonly bonusRate: Scalars['Float']['output'];
  readonly bonusValue: Scalars['Float']['output'];
  readonly commissionRate: Scalars['Float']['output'];
  readonly commissionSignature?: Maybe<Scalars['String']['output']>;
  readonly commissionValue: Scalars['Float']['output'];
  readonly configuredTakeRate: Scalars['Float']['output'];
  readonly configuredTakeValue: Scalars['Float']['output'];
  readonly description: Scalars['String']['output'];
  readonly displayDate: Scalars['DateTime']['output'];
  readonly displayRate: Scalars['Float']['output'];
  readonly displayValue: Scalars['Float']['output'];
  readonly feeRate: Scalars['Float']['output'];
  readonly feeValue: Scalars['Float']['output'];
  readonly id: Scalars['String']['output'];
  readonly imageUrl?: Maybe<Scalars['String']['output']>;
  readonly listValue: Scalars['Float']['output'];
  readonly proccessedDate: Scalars['DateTime']['output'];
  readonly productId?: Maybe<Scalars['String']['output']>;
  readonly quantity: Scalars['Float']['output'];
  readonly soldDate: Scalars['DateTime']['output'];
  readonly status: CommissionRecordStatus;
  readonly takeRate: Scalars['Float']['output'];
  readonly takeValue: Scalars['Float']['output'];
  readonly type: Scalars['String']['output'];
  readonly vendorId?: Maybe<Scalars['String']['output']>;
};

export type CommissionRecordAccount = {
  readonly __typename: 'CommissionRecordAccount';
  readonly email?: Maybe<Scalars['String']['output']>;
  readonly username?: Maybe<Scalars['String']['output']>;
  readonly uuid: Scalars['String']['output'];
};

export enum CommissionRecordStatus {
  Approved = 'APPROVED',
  Locked = 'LOCKED',
  Paid = 'PAID',
  Pending = 'PENDING',
  PreApproved = 'PRE_APPROVED',
  Retracted = 'RETRACTED'
}

export type CommissionRule = {
  readonly __typename: 'CommissionRule';
  readonly additionalRuleLists: ReadonlyArray<Scalars['String']['output']>;
  readonly createdAt?: Maybe<Scalars['DateTime']['output']>;
  readonly defaultRuleList?: Maybe<Scalars['String']['output']>;
  readonly id?: Maybe<Scalars['String']['output']>;
  readonly networkId: Scalars['String']['output'];
  readonly updatedAt?: Maybe<Scalars['DateTime']['output']>;
  readonly vendorDisplayName: Scalars['String']['output'];
  readonly vendorId: Scalars['String']['output'];
};

export type CommissionRuleList = {
  readonly __typename: 'CommissionRuleList';
  readonly commissionAmount: Scalars['Float']['output'];
  readonly commissionCurrency?: Maybe<Scalars['String']['output']>;
  readonly commissionType: CommissionType;
  readonly createdAt: Scalars['DateTime']['output'];
  readonly description?: Maybe<Scalars['String']['output']>;
  readonly enabled: Scalars['Boolean']['output'];
  readonly endsAt?: Maybe<Scalars['DateTime']['output']>;
  readonly externalId?: Maybe<Scalars['String']['output']>;
  readonly field?: Maybe<Scalars['String']['output']>;
  readonly id: Scalars['String']['output'];
  readonly isActive: Scalars['Boolean']['output'];
  readonly name: Scalars['String']['output'];
  readonly operator?: Maybe<Scalars['String']['output']>;
  readonly startsAt?: Maybe<Scalars['DateTime']['output']>;
  readonly type?: Maybe<CommissionRuleListType>;
  readonly updatedAt: Scalars['DateTime']['output'];
  readonly values: ReadonlyArray<Scalars['String']['output']>;
};

/** The type of commission rule list */
export enum CommissionRuleListType {
  Everything = 'EVERYTHING',
  Filter = 'FILTER'
}

export type CommissionSummary = {
  readonly __typename: 'CommissionSummary';
  readonly displayValue: Scalars['Int']['output'];
};

export type CommissionSummaryInternal = {
  readonly __typename: 'CommissionSummaryInternal';
  readonly bonusValue: Scalars['Int']['output'];
  readonly commissionValue: Scalars['Int']['output'];
  readonly displayValue: Scalars['Int']['output'];
  readonly feeValue: Scalars['Int']['output'];
  readonly takeValue: Scalars['Int']['output'];
};

export enum CommissionType {
  Fixed = 'FIXED',
  FixedPerOrder = 'FIXED_PER_ORDER',
  None = 'NONE',
  Percent = 'PERCENT'
}

export type CommunityFeature = {
  readonly __typename: 'CommunityFeature';
  readonly description?: Maybe<Scalars['String']['output']>;
  readonly icon?: Maybe<Scalars['String']['output']>;
  readonly title?: Maybe<Scalars['String']['output']>;
};

export type CommunityFeatureInput = {
  readonly description?: InputMaybe<Scalars['String']['input']>;
  readonly icon?: InputMaybe<Scalars['String']['input']>;
  readonly title?: InputMaybe<Scalars['String']['input']>;
};

export enum CommunityLinkBehaviourOptions {
  Apply = 'APPLY',
  Direct = 'DIRECT',
  Form = 'FORM'
}

export type CommunityLinkContext = {
  readonly __typename: 'CommunityLinkContext';
  readonly communityDescription?: Maybe<Scalars['String']['output']>;
  readonly communityFeatures?: Maybe<ReadonlyArray<Maybe<CommunityFeature>>>;
  readonly communityImage?: Maybe<Scalars['String']['output']>;
  readonly communityInviteUrl?: Maybe<Scalars['String']['output']>;
  readonly communitySubscriptionId?: Maybe<Scalars['String']['output']>;
  readonly communityTitle?: Maybe<Scalars['String']['output']>;
  /** @deprecated Used prior to ltfollowers integration, use v2FormId instead */
  readonly formFields?: Maybe<ReadonlyArray<Maybe<FormLinkField>>>;
  readonly linkBehaviour?: Maybe<CommunityLinkBehaviourOptions>;
  readonly linkPricing?: Maybe<CommunityLinkPricingOptions>;
  readonly linkType?: Maybe<CommunityPlatformOptions>;
  readonly listingId?: Maybe<Scalars['String']['output']>;
  readonly pricePaymentType?: Maybe<DigitalDownloadPaymentType>;
  readonly v2FormId?: Maybe<Scalars['String']['output']>;
};

export type CommunityLinkContextInput = {
  readonly communityDescription?: InputMaybe<Scalars['String']['input']>;
  readonly communityFeatures?: InputMaybe<ReadonlyArray<InputMaybe<CommunityFeatureInput>>>;
  readonly communityImage?: InputMaybe<Scalars['String']['input']>;
  readonly communitySubscriptionId?: InputMaybe<Scalars['String']['input']>;
  readonly communityTitle?: InputMaybe<Scalars['String']['input']>;
  readonly formFields?: InputMaybe<ReadonlyArray<InputMaybe<FormLinkFieldInput>>>;
  readonly linkBehaviour?: InputMaybe<CommunityLinkBehaviourOptions>;
  readonly linkPricing?: InputMaybe<CommunityLinkPricingOptions>;
  readonly linkType?: InputMaybe<CommunityPlatformOptions>;
  readonly listingId?: InputMaybe<Scalars['String']['input']>;
  readonly v2FormId?: InputMaybe<Scalars['String']['input']>;
};

export enum CommunityLinkPricingOptions {
  Free = 'FREE',
  OneTime = 'ONE_TIME',
  Subscription = 'SUBSCRIPTION'
}

export enum CommunityPlatformOptions {
  Discord = 'DISCORD',
  Slack = 'SLACK',
  Whatsapp = 'WHATSAPP'
}

export type ConfirmPasswordResetInput = {
  readonly confirmationToken: Scalars['String']['input'];
  readonly password: Scalars['String']['input'];
};

export type ConfirmPasswordResetResult = {
  readonly __typename: 'ConfirmPasswordResetResult';
  readonly result?: Maybe<Scalars['String']['output']>;
};

export type Connection = {
  readonly __typename: 'Connection';
  readonly accountId: Scalars['String']['output'];
  readonly provider: Scalars['String']['output'];
  readonly status: Scalars['String']['output'];
};

export enum ContactDetailEmailType {
  Other = 'OTHER',
  Personal = 'PERSONAL',
  Work = 'WORK'
}

export enum ContactDetailPhoneType {
  Home = 'HOME',
  Mobile = 'MOBILE',
  Other = 'OTHER',
  Work = 'WORK'
}

export type ContactDetailsLinkContext = {
  readonly __typename: 'ContactDetailsLinkContext';
  readonly addressCity?: Maybe<Scalars['String']['output']>;
  readonly addressCountry?: Maybe<Scalars['String']['output']>;
  readonly addressLine1?: Maybe<Scalars['String']['output']>;
  readonly addressLine2?: Maybe<Scalars['String']['output']>;
  readonly addressPostcode?: Maybe<Scalars['String']['output']>;
  readonly addressState?: Maybe<Scalars['String']['output']>;
  readonly emailPrimary?: Maybe<Scalars['String']['output']>;
  readonly emailPrimaryType?: Maybe<ContactDetailEmailType>;
  readonly emailSecondary?: Maybe<Scalars['String']['output']>;
  readonly emailSecondaryType?: Maybe<ContactDetailEmailType>;
  readonly firstName?: Maybe<Scalars['String']['output']>;
  readonly lastName?: Maybe<Scalars['String']['output']>;
  readonly openingHours?: Maybe<Scalars['String']['output']>;
  readonly organization?: Maybe<Scalars['String']['output']>;
  readonly phonePrimary?: Maybe<Scalars['String']['output']>;
  readonly phonePrimaryType?: Maybe<ContactDetailPhoneType>;
  readonly phoneSecondary?: Maybe<Scalars['String']['output']>;
  readonly phoneSecondaryType?: Maybe<ContactDetailPhoneType>;
  readonly position?: Maybe<Scalars['String']['output']>;
};

export type ContactDetailsLinkContextInput = {
  readonly addressCity?: InputMaybe<Scalars['String']['input']>;
  readonly addressCountry?: InputMaybe<Scalars['String']['input']>;
  readonly addressLine1?: InputMaybe<Scalars['String']['input']>;
  readonly addressLine2?: InputMaybe<Scalars['String']['input']>;
  readonly addressPostcode?: InputMaybe<Scalars['String']['input']>;
  readonly addressState?: InputMaybe<Scalars['String']['input']>;
  readonly emailPrimary?: InputMaybe<Scalars['String']['input']>;
  readonly emailPrimaryType?: InputMaybe<ContactDetailEmailType>;
  readonly emailSecondary?: InputMaybe<Scalars['String']['input']>;
  readonly emailSecondaryType?: InputMaybe<ContactDetailEmailType>;
  readonly firstName?: InputMaybe<Scalars['String']['input']>;
  readonly lastName?: InputMaybe<Scalars['String']['input']>;
  readonly openingHours?: InputMaybe<Scalars['String']['input']>;
  readonly organization?: InputMaybe<Scalars['String']['input']>;
  readonly phonePrimary?: InputMaybe<Scalars['String']['input']>;
  readonly phonePrimaryType?: InputMaybe<ContactDetailPhoneType>;
  readonly phoneSecondary?: InputMaybe<Scalars['String']['input']>;
  readonly phoneSecondaryType?: InputMaybe<ContactDetailPhoneType>;
  readonly position?: InputMaybe<Scalars['String']['input']>;
};

export type ContactFormInput = {
  readonly country?: InputMaybe<Scalars['String']['input']>;
  readonly email?: InputMaybe<Scalars['String']['input']>;
  readonly message?: InputMaybe<Scalars['String']['input']>;
  readonly mobile?: InputMaybe<Scalars['String']['input']>;
  readonly name?: InputMaybe<Scalars['String']['input']>;
};

export type ContactFormIntegrationInput = {
  readonly id: Scalars['String']['input'];
  readonly values: ContactFormInput;
};

export enum ContentType {
  Links = 'LINKS',
  Products = 'PRODUCTS',
  Socials = 'SOCIALS'
}

export enum ContentWarningType {
  EighteenPlus = 'eighteenPlus',
  Generic = 'generic',
  Moderated = 'moderated',
  TwentyFivePlus = 'twentyFivePlus',
  TwentyOnePlus = 'twentyOnePlus'
}

export type CorrilyPricesResponse = {
  readonly __typename: 'CorrilyPricesResponse';
  readonly country: Scalars['String']['output'];
  readonly currency: Scalars['String']['output'];
  readonly currencySymbol: Scalars['String']['output'];
  readonly products: ReadonlyArray<CorrilyProduct>;
  readonly userId: Scalars['String']['output'];
};

export type CorrilyProduct = {
  readonly __typename: 'CorrilyProduct';
  readonly display?: Maybe<CorrilyProductDisplay>;
  readonly integrations: CorrilyProductIntegrations;
  readonly interval: Scalars['String']['output'];
  readonly intervalCount: Scalars['Int']['output'];
  readonly price: Scalars['Float']['output'];
  readonly priceUsd: Scalars['Float']['output'];
  readonly productId: Scalars['String']['output'];
};

export type CorrilyProductDisplay = {
  readonly __typename: 'CorrilyProductDisplay';
  readonly discountToBaseline: Scalars['Float']['output'];
  readonly price: Scalars['String']['output'];
  readonly priceWithBaselineStrike: Scalars['String']['output'];
  readonly referenceIntervalPrice: Scalars['String']['output'];
};

export type CorrilyProductIntegration = {
  readonly __typename: 'CorrilyProductIntegration';
  readonly amount: Scalars['Float']['output'];
  readonly currency: Scalars['String']['output'];
  readonly formatted: Scalars['String']['output'];
};

export type CorrilyProductIntegrations = {
  readonly __typename: 'CorrilyProductIntegrations';
  readonly stripe: CorrilyProductIntegration;
};

export type CountryBreakdown = {
  readonly __typename: 'CountryBreakdown';
  readonly clickThroughRate?: Maybe<Scalars['Float']['output']>;
  readonly clicks?: Maybe<Scalars['Int']['output']>;
  readonly country?: Maybe<Scalars['String']['output']>;
  readonly countryCode?: Maybe<Scalars['String']['output']>;
  readonly date: Scalars['String']['output'];
  readonly views?: Maybe<Scalars['Int']['output']>;
};

export type CountryCode = {
  readonly __typename: 'CountryCode';
  readonly countryCode: Scalars['String']['output'];
};

export type Coupon = {
  readonly __typename: 'Coupon';
  readonly discountAmount?: Maybe<Scalars['Int']['output']>;
  readonly discountPercentage?: Maybe<Scalars['Int']['output']>;
  readonly discountPlanPrice?: Maybe<Scalars['Int']['output']>;
  readonly discountType?: Maybe<Scalars['String']['output']>;
  readonly durationMonths?: Maybe<Scalars['Int']['output']>;
  readonly durationType?: Maybe<Scalars['String']['output']>;
  readonly durationYears?: Maybe<Scalars['Int']['output']>;
  readonly hasExpired?: Maybe<Scalars['Boolean']['output']>;
  readonly hidePaymentFields?: Maybe<Scalars['Boolean']['output']>;
  readonly id?: Maybe<Scalars['String']['output']>;
  readonly isActive?: Maybe<Scalars['Boolean']['output']>;
  readonly isDeleted?: Maybe<Scalars['Boolean']['output']>;
  readonly isForever?: Maybe<Scalars['Boolean']['output']>;
  readonly isFree?: Maybe<Scalars['Boolean']['output']>;
  readonly isFreeForever?: Maybe<Scalars['Boolean']['output']>;
  readonly isOneTime?: Maybe<Scalars['Boolean']['output']>;
  readonly name?: Maybe<Scalars['String']['output']>;
  readonly redeemableCode?: Maybe<Scalars['String']['output']>;
  readonly status?: Maybe<Scalars['String']['output']>;
  readonly validTill?: Maybe<Scalars['Date']['output']>;
};

export type CreateAccountInput = {
  readonly campaignName?: InputMaybe<Scalars['String']['input']>;
  readonly captchaToken?: InputMaybe<Scalars['String']['input']>;
  readonly captchaVersion?: InputMaybe<Scalars['String']['input']>;
  readonly email: Scalars['String']['input'];
  readonly isV2?: InputMaybe<Scalars['Boolean']['input']>;
  readonly marketingOptIn?: InputMaybe<Scalars['Boolean']['input']>;
  readonly realName?: InputMaybe<Scalars['String']['input']>;
  readonly templateProfileName?: InputMaybe<Scalars['String']['input']>;
  readonly username?: InputMaybe<Scalars['String']['input']>;
  readonly verticals: ReadonlyArray<Scalars['String']['input']>;
  readonly verticalsOther?: InputMaybe<Scalars['String']['input']>;
  readonly verticalsVersion?: InputMaybe<Scalars['Int']['input']>;
};

export type CreateAccountResult = {
  readonly __typename: 'CreateAccountResult';
  readonly user?: Maybe<User>;
};

export type CreateAffiliateTokenInput = {
  readonly advertiser?: InputMaybe<Scalars['String']['input']>;
  readonly aid?: InputMaybe<Scalars['String']['input']>;
  readonly program: Scalars['String']['input'];
  readonly token: Scalars['String']['input'];
};

export type CreateBaseThemeFromAccountThemeInput = {
  readonly accountId: Scalars['Int']['input'];
  readonly backgroundAssetUrl: Scalars['String']['input'];
  /** The email of the operator creating the base theme */
  readonly creatingOperator?: InputMaybe<Scalars['String']['input']>;
  readonly isEditable: Scalars['Boolean']['input'];
  readonly tags?: InputMaybe<ReadonlyArray<Scalars['String']['input']>>;
  readonly themeKey: Scalars['String']['input'];
  readonly tier?: InputMaybe<Scalars['String']['input']>;
  readonly title: Scalars['String']['input'];
};

export type CreateBaseThemeInput = {
  readonly avatarMode?: InputMaybe<Scalars['String']['input']>;
  readonly avatarType?: InputMaybe<Scalars['String']['input']>;
  readonly backgroundAssetUrl?: InputMaybe<Scalars['String']['input']>;
  readonly backgroundColor?: InputMaybe<Scalars['String']['input']>;
  readonly backgroundGradient?: InputMaybe<ReadonlyArray<Scalars['String']['input']>>;
  readonly backgroundGradientStyle?: InputMaybe<Scalars['String']['input']>;
  readonly backgroundHeroColor?: InputMaybe<Scalars['String']['input']>;
  readonly backgroundImageEffect?: InputMaybe<Scalars['String']['input']>;
  readonly backgroundNoise?: InputMaybe<Scalars['Boolean']['input']>;
  readonly backgroundPosterUrl?: InputMaybe<Scalars['String']['input']>;
  readonly backgroundStyle?: InputMaybe<Scalars['String']['input']>;
  readonly backgroundTint?: InputMaybe<Scalars['Int']['input']>;
  readonly buttonColor?: InputMaybe<Scalars['String']['input']>;
  readonly buttonCorners?: InputMaybe<Scalars['String']['input']>;
  readonly buttonShadow?: InputMaybe<Scalars['String']['input']>;
  readonly buttonShadowColor?: InputMaybe<Scalars['String']['input']>;
  readonly buttonStyle?: InputMaybe<Scalars['String']['input']>;
  readonly buttonTextColor?: InputMaybe<Scalars['String']['input']>;
  readonly colorPalette?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']['input']>>>;
  readonly colorSchema?: InputMaybe<Scalars['String']['input']>;
  /** The email of the operator creating the base theme */
  readonly creatingOperator?: InputMaybe<Scalars['String']['input']>;
  readonly customAvatar?: InputMaybe<Scalars['String']['input']>;
  readonly customAvatarVideo?: InputMaybe<Scalars['String']['input']>;
  readonly fontColor?: InputMaybe<Scalars['String']['input']>;
  readonly fontStyle?: InputMaybe<Scalars['String']['input']>;
  readonly footerCustomColor?: InputMaybe<Scalars['String']['input']>;
  readonly footerLogoUrl?: InputMaybe<Scalars['String']['input']>;
  readonly footerUrl?: InputMaybe<Scalars['String']['input']>;
  readonly headingColor?: InputMaybe<Scalars['String']['input']>;
  readonly headingEffect?: InputMaybe<Scalars['String']['input']>;
  readonly headingFont?: InputMaybe<Scalars['String']['input']>;
  readonly headingLogo?: InputMaybe<Scalars['String']['input']>;
  readonly headingLogoSize?: InputMaybe<Scalars['String']['input']>;
  readonly headingSize?: InputMaybe<Scalars['String']['input']>;
  readonly headingType?: InputMaybe<Scalars['String']['input']>;
  readonly isEditable: Scalars['Boolean']['input'];
  readonly luminance?: InputMaybe<Scalars['String']['input']>;
  readonly tags?: InputMaybe<ReadonlyArray<Scalars['String']['input']>>;
  readonly themeKey: Scalars['String']['input'];
  readonly thumbnailUrl?: InputMaybe<Scalars['String']['input']>;
  readonly tier?: InputMaybe<Scalars['String']['input']>;
  readonly title: Scalars['String']['input'];
};

export type CreateCanvaAssetUploadJobInput = {
  readonly accountUuid: Scalars['String']['input'];
  readonly integrationId: Scalars['String']['input'];
  readonly name?: InputMaybe<Scalars['String']['input']>;
  readonly url: Scalars['String']['input'];
};

export type CreateCanvaDesignInput = {
  readonly accountUuid: Scalars['String']['input'];
  readonly canvaAssetId?: InputMaybe<Scalars['String']['input']>;
  readonly height?: InputMaybe<Scalars['Int']['input']>;
  readonly integrationId: Scalars['String']['input'];
  readonly returnNavigation?: InputMaybe<Scalars['String']['input']>;
  readonly title?: InputMaybe<Scalars['String']['input']>;
  readonly width?: InputMaybe<Scalars['Int']['input']>;
};

export type CreateCanvaDesignOutputJobInput = {
  readonly accountUuid: Scalars['String']['input'];
  readonly designId: Scalars['String']['input'];
  readonly integrationId: Scalars['String']['input'];
  readonly outputFormatHeight?: InputMaybe<Scalars['Int']['input']>;
  readonly outputFormatType?: InputMaybe<Scalars['String']['input']>;
  readonly outputFormatWidth?: InputMaybe<Scalars['Int']['input']>;
  readonly pages?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']['input']>>>;
};

export type CreateCanvaDesignResult = {
  readonly __typename: 'CreateCanvaDesignResult';
  readonly design?: Maybe<CanvaDesign>;
};

export type CreateCommerceCollectionShortLinkInput = {
  readonly accountUuid: Scalars['String']['input'];
  readonly collectionId: Scalars['String']['input'];
};

export type CreateCommerceStoreProductShortLinkInput = {
  readonly accountUuid: Scalars['String']['input'];
  readonly productId: Scalars['String']['input'];
};

export type CreateCommerceStorefrontPostShortLinkInput = {
  readonly accountUuid: Scalars['String']['input'];
  readonly postId: Scalars['String']['input'];
};

export type CreateFollowInput = {
  readonly agreeToShare?: InputMaybe<Scalars['Boolean']['input']>;
  readonly browserId?: InputMaybe<Scalars['String']['input']>;
  readonly payloadContext?: InputMaybe<PayloadContext>;
  readonly uuid: Scalars['String']['input'];
};

/** We provide 3 ways to create a form field. 1. use Linktree system predefined form field. 2. reuse an existing form field owned by the Linker. 3. create a new form field with a schema. You shall provide either of them. */
export type CreateFormFieldInput = {
  readonly label?: InputMaybe<Scalars['String']['input']>;
  readonly predefinedFieldName?: InputMaybe<FormPredefinedFormField>;
  readonly required?: InputMaybe<Scalars['Boolean']['input']>;
  readonly reuseFormFieldId?: InputMaybe<Scalars['String']['input']>;
  readonly schema?: InputMaybe<CreateFormFieldSchemaInput>;
};

export type CreateFormFieldSchemaInput = {
  /** Options for SELECT, or RADIO */
  readonly options?: InputMaybe<ReadonlyArray<Scalars['String']['input']>>;
  readonly type: FormFieldType;
};

export type CreateFormInput = {
  readonly accountUuid: Scalars['String']['input'];
  readonly associatedFormLinkId?: InputMaybe<Scalars['Int']['input']>;
  readonly associatedSubscribeLockLinkId?: InputMaybe<Scalars['Int']['input']>;
  readonly customTermsConditionsEnabled?: InputMaybe<Scalars['Boolean']['input']>;
  readonly customTermsConditionsLinkLabel?: InputMaybe<Scalars['String']['input']>;
  readonly customTermsConditionsLinkUrl?: InputMaybe<Scalars['String']['input']>;
  readonly description?: InputMaybe<Scalars['String']['input']>;
  readonly fields?: InputMaybe<ReadonlyArray<CreateFormFieldInput>>;
  readonly formType?: InputMaybe<LtFollowersFormType>;
  readonly name?: InputMaybe<Scalars['String']['input']>;
  readonly thankYouMessage?: InputMaybe<Scalars['String']['input']>;
};

export type CreateFormOutput = {
  readonly __typename: 'CreateFormOutput';
  readonly form?: Maybe<FormModel>;
};

export type CreateKajabiCourseResult = {
  readonly __typename: 'CreateKajabiCourseResult';
  readonly accessToken?: Maybe<Scalars['String']['output']>;
};

export type CreateMailchimpIntegrationInput = {
  readonly authorizationCode?: InputMaybe<Scalars['String']['input']>;
  readonly title?: InputMaybe<Scalars['String']['input']>;
};

export type CreateOrUpdateAccountModel = {
  readonly __typename: 'CreateOrUpdateAccountModel';
  readonly capabilities?: Maybe<FollowerCapabilitiesModel>;
  readonly enabled?: Maybe<Scalars['Boolean']['output']>;
};

export type CreatePasswordInput = {
  readonly password: Scalars['String']['input'];
  readonly type: Scalars['String']['input'];
};

export type CreatePasswordResult = {
  readonly __typename: 'CreatePasswordResult';
  readonly result?: Maybe<Scalars['String']['output']>;
};

export type CreatePasswordUnauthenticatedInput = {
  readonly username: Scalars['String']['input'];
};

export type CreatePasswordUnauthenticatedResult = {
  readonly __typename: 'CreatePasswordUnauthenticatedResult';
  readonly result?: Maybe<Scalars['String']['output']>;
};

export type CreatePaypalIntegrationInput = {
  readonly accountStatus: Scalars['String']['input'];
  readonly countryCode?: InputMaybe<Scalars['String']['input']>;
  readonly emailConfirmed: Scalars['Boolean']['input'];
  readonly merchantId: Scalars['String']['input'];
  readonly postalCode?: InputMaybe<Scalars['String']['input']>;
  readonly title?: InputMaybe<Scalars['String']['input']>;
};

export type CreatePixPaymentIntentInput = {
  readonly accountIds?: InputMaybe<ReadonlyArray<Scalars['Int']['input']>>;
  readonly billingDetails: BillingDetailsInput;
  readonly couponId?: InputMaybe<Scalars['String']['input']>;
  readonly frequency: Scalars['String']['input'];
  readonly paymentMethodId: Scalars['String']['input'];
  readonly profileQuantity?: InputMaybe<Scalars['Int']['input']>;
  readonly tier: Scalars['String']['input'];
  readonly unitPrice: Scalars['Int']['input'];
};

export type CreatePixPaymentIntentResult = {
  readonly __typename: 'CreatePixPaymentIntentResult';
  readonly clientSecret: Scalars['String']['output'];
  readonly pendingPaymentId: Scalars['String']['output'];
  readonly requiresAction: Scalars['Boolean']['output'];
  readonly type: Scalars['String']['output'];
};

export type CreateScheduledNotificationInput = {
  readonly accountUuid: Scalars['String']['input'];
  readonly linkId: Scalars['Int']['input'];
  readonly scheduledAt: Scalars['DateTime']['input'];
  readonly scheduledAtTimezone: Scalars['String']['input'];
};

export type CreateShopifyIntegrationInput = {
  readonly authorizationCode?: InputMaybe<Scalars['String']['input']>;
  readonly shop: Scalars['String']['input'];
  readonly title?: InputMaybe<Scalars['String']['input']>;
};

export type CreateSocialFeedMutationInput = {
  readonly active?: InputMaybe<Scalars['Boolean']['input']>;
  readonly layout: SocialFeedLayoutType;
  readonly socialIntegrationId?: InputMaybe<Scalars['String']['input']>;
  readonly source: SocialFeedSource;
  readonly title?: InputMaybe<Scalars['String']['input']>;
  readonly type: SocialFeedType;
};

export type CreateSocialFeedPostMediaLinkMutationInput = {
  readonly coordinates: SocialFeedPostMediaLinkCoordinatesInput;
  readonly title?: InputMaybe<Scalars['String']['input']>;
  readonly url?: InputMaybe<Scalars['String']['input']>;
};

export type CreateSocialFeedPostMutationInput = {
  readonly accountUuid?: InputMaybe<Scalars['String']['input']>;
  readonly caption?: InputMaybe<Scalars['String']['input']>;
  readonly externalId: Scalars['String']['input'];
  readonly externalParentId?: InputMaybe<Scalars['String']['input']>;
  readonly media?: InputMaybe<ReadonlyArray<InputMaybe<SocialFeedPostMediaInput>>>;
  readonly mediaUrl: Scalars['String']['input'];
  readonly pinned?: InputMaybe<Scalars['Boolean']['input']>;
  readonly postType: SocialFeedPostType;
  readonly source?: InputMaybe<SocialFeedSource>;
  readonly thumbnailUrl?: InputMaybe<Scalars['String']['input']>;
  readonly timestamp: Scalars['String']['input'];
  readonly type?: InputMaybe<SocialFeedType>;
  readonly url?: InputMaybe<Scalars['String']['input']>;
  readonly visible?: InputMaybe<Scalars['Boolean']['input']>;
};

export type CreateSocialIntegrationInput = {
  readonly code: Scalars['String']['input'];
  readonly type: SocialIntegrationType;
};

export type CreateSocialLinkPreviousStateLink = {
  readonly __typename: 'CreateSocialLinkPreviousStateLink';
  readonly active?: Maybe<Scalars['Boolean']['output']>;
  readonly id?: Maybe<Scalars['String']['output']>;
  readonly position?: Maybe<Scalars['Int']['output']>;
  readonly type?: Maybe<SocialLinkType>;
  readonly url?: Maybe<Scalars['String']['output']>;
};

export type CreateSocialNotificationConfigInput = {
  /** Account UUID of the configuration owner */
  readonly accountUuid: Scalars['String']['input'];
  readonly action: SocialNotificationConfigActionInput;
  /** The ID of associated SoCo account product */
  readonly associatedCommerceAccountProductId?: InputMaybe<Scalars['String']['input']>;
  /** The ID of associated SoCo collection */
  readonly associatedCommerceCollectionId?: InputMaybe<Scalars['String']['input']>;
  /** The ID of associated SoCo post */
  readonly associatedCommercePostId?: InputMaybe<Scalars['String']['input']>;
  /** The Monolith Link ID of the associated link */
  readonly associatedLinkId?: InputMaybe<Scalars['Int']['input']>;
  /** Instagram business account ID. Must be set if socialIntegrationType is FACEBOOK */
  readonly instagramBusinessAccountId?: InputMaybe<Scalars['String']['input']>;
  /** Whether to use instagram business auth0 social connection instead of facebook */
  readonly shouldUseInstagramBusiness?: InputMaybe<Scalars['Boolean']['input']>;
  /** Linktree social integration id */
  readonly socialIntegrationId?: InputMaybe<Scalars['String']['input']>;
  /** Linktree social integration type, such as FACEBOOK, TIKTOK */
  readonly socialIntegrationType: Scalars['String']['input'];
  readonly trigger: SocialNotificationConfigTriggerInput;
};

export type CreateSocialNotificationConfigOutput = {
  readonly __typename: 'CreateSocialNotificationConfigOutput';
  readonly config: SocialNotificationConfigModel;
};

export type CreateSpringIntegrationInput = {
  readonly shop: Scalars['String']['input'];
  readonly title?: InputMaybe<Scalars['String']['input']>;
};

export type CreateSquareIntegrationInput = {
  readonly applicationId: Scalars['String']['input'];
  readonly authorizationCode: Scalars['String']['input'];
  readonly currencyCode: Scalars['String']['input'];
};

export type CreateStripeIntegrationFromAccountIdInput = {
  readonly stripeAccountId: Scalars['String']['input'];
  readonly title?: InputMaybe<Scalars['String']['input']>;
};

export type CreateStripeIntegrationInput = {
  readonly authorizationCode: Scalars['String']['input'];
  readonly title?: InputMaybe<Scalars['String']['input']>;
};

export type CreateStripeIntentResult = {
  readonly __typename: 'CreateStripeIntentResult';
  readonly clientSecret?: Maybe<Scalars['String']['output']>;
  readonly intentId?: Maybe<Scalars['String']['output']>;
  readonly requiresAction?: Maybe<Scalars['Boolean']['output']>;
  readonly success?: Maybe<Scalars['Boolean']['output']>;
  readonly type?: Maybe<Scalars['String']['output']>;
};

export type CreateSubscribeLockFormInput = {
  readonly accountUuid: Scalars['String']['input'];
  readonly associatedSubscribeLockLinkId: Scalars['Int']['input'];
};

export type CreateSubscribeLockFormOutput = {
  readonly __typename: 'CreateSubscribeLockFormOutput';
  readonly formId?: Maybe<Scalars['String']['output']>;
};

export type CreateSubscriptionAddOnInput = {
  readonly name: Scalars['String']['input'];
  readonly quantity: Scalars['Int']['input'];
};

export type CreateSubscriptionAddOnResult = {
  readonly __typename: 'CreateSubscriptionAddOnResult';
  readonly product: SubscriptionAddOnProduct;
  readonly quantity: Scalars['Int']['output'];
};

export type CreateSubscriptionInput = {
  readonly billingDetails: BillingDetailsInput;
  readonly billingUrl?: InputMaybe<Scalars['String']['input']>;
  readonly corrilyPriceShown?: InputMaybe<Scalars['Boolean']['input']>;
  readonly ctaLabel?: InputMaybe<Scalars['String']['input']>;
  readonly currency: Scalars['String']['input'];
  readonly freeTrialEntryPoint?: InputMaybe<Scalars['String']['input']>;
  readonly frequency: Scalars['String']['input'];
  readonly isFreeTrial?: InputMaybe<Scalars['Boolean']['input']>;
  readonly paymentDetails: PaymentDetailsInput;
  readonly price?: InputMaybe<Scalars['Int']['input']>;
  readonly tier: Scalars['String']['input'];
  readonly unitPrice?: InputMaybe<Scalars['Int']['input']>;
};

export type CreateSubscriptionResult = {
  readonly __typename: 'CreateSubscriptionResult';
  readonly user?: Maybe<User>;
};

export type CreateSubscriptionV2Input = {
  readonly accountIds?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']['input']>>>;
  readonly addOns?: InputMaybe<ReadonlyArray<InputMaybe<CreateSubscriptionAddOnInput>>>;
  readonly billingDetails: BillingDetailsInput;
  readonly billingUrl?: InputMaybe<Scalars['String']['input']>;
  readonly ctaLabel?: InputMaybe<Scalars['String']['input']>;
  readonly currency: Scalars['String']['input'];
  readonly freeTrialEntryPoint?: InputMaybe<Scalars['String']['input']>;
  readonly frequency: Scalars['String']['input'];
  readonly isFreeTrial?: InputMaybe<Scalars['Boolean']['input']>;
  readonly paymentDetails: PaymentDetailsInput;
  readonly price?: InputMaybe<Scalars['Int']['input']>;
  readonly profileQuantity?: InputMaybe<Scalars['Int']['input']>;
  readonly tier: Scalars['String']['input'];
  readonly unitPrice?: InputMaybe<Scalars['Int']['input']>;
};

export type CreateUrlOverrideInput = {
  readonly accountProductId?: InputMaybe<Scalars['String']['input']>;
  /** The account uuid of the user to create the url override for. Required for resource guarding. If linkId or accountProductId is provided, link/product jobs will be created instead. */
  readonly accountUuid: Scalars['String']['input'];
  /** Whether the override was created via the auto-magical prompt. This should only apply to Links, so this will do nothing if linkId is null. */
  readonly isAutoMagical?: InputMaybe<Scalars['Boolean']['input']>;
  readonly linkId?: InputMaybe<Scalars['Float']['input']>;
};

export type CreateUserInput = {
  readonly email: Scalars['String']['input'];
  readonly marketingOptIn?: InputMaybe<Scalars['Boolean']['input']>;
  readonly password: Scalars['String']['input'];
  readonly passwordRepeat: Scalars['String']['input'];
  readonly username: Scalars['String']['input'];
};

export type CreateUserResult = {
  readonly __typename: 'CreateUserResult';
  readonly user?: Maybe<User>;
};

export enum CurrencyCode {
  Aed = 'AED',
  Afn = 'AFN',
  All = 'ALL',
  Amd = 'AMD',
  Ang = 'ANG',
  Aoa = 'AOA',
  Ars = 'ARS',
  Aud = 'AUD',
  Awg = 'AWG',
  Azn = 'AZN',
  Bam = 'BAM',
  Bbd = 'BBD',
  Bdt = 'BDT',
  Bgn = 'BGN',
  Bhd = 'BHD',
  Bif = 'BIF',
  Bmd = 'BMD',
  Bnd = 'BND',
  Bob = 'BOB',
  Bov = 'BOV',
  Brl = 'BRL',
  Bsd = 'BSD',
  Btn = 'BTN',
  Bwp = 'BWP',
  Byn = 'BYN',
  Bzd = 'BZD',
  Cad = 'CAD',
  Cdf = 'CDF',
  Che = 'CHE',
  Chf = 'CHF',
  Chw = 'CHW',
  Clf = 'CLF',
  Clp = 'CLP',
  Cny = 'CNY',
  Cop = 'COP',
  Cou = 'COU',
  Crc = 'CRC',
  Cuc = 'CUC',
  Cup = 'CUP',
  Cve = 'CVE',
  Czk = 'CZK',
  Djf = 'DJF',
  Dkk = 'DKK',
  Dop = 'DOP',
  Dzd = 'DZD',
  Egp = 'EGP',
  Ern = 'ERN',
  Etb = 'ETB',
  Eur = 'EUR',
  Fjd = 'FJD',
  Fkp = 'FKP',
  Gbp = 'GBP',
  Gel = 'GEL',
  Ghs = 'GHS',
  Gip = 'GIP',
  Gmd = 'GMD',
  Gnf = 'GNF',
  Gtq = 'GTQ',
  Gyd = 'GYD',
  Hkd = 'HKD',
  Hnl = 'HNL',
  Hrk = 'HRK',
  Htg = 'HTG',
  Huf = 'HUF',
  Idr = 'IDR',
  Ils = 'ILS',
  Inr = 'INR',
  Iqd = 'IQD',
  Irr = 'IRR',
  Isk = 'ISK',
  Jmd = 'JMD',
  Jod = 'JOD',
  Jpy = 'JPY',
  Kes = 'KES',
  Kgs = 'KGS',
  Khr = 'KHR',
  Kmf = 'KMF',
  Kpw = 'KPW',
  Krw = 'KRW',
  Kwd = 'KWD',
  Kyd = 'KYD',
  Kzt = 'KZT',
  Lak = 'LAK',
  Lbp = 'LBP',
  Lkr = 'LKR',
  Lrd = 'LRD',
  Lsl = 'LSL',
  Lyd = 'LYD',
  Mad = 'MAD',
  Mdl = 'MDL',
  Mga = 'MGA',
  Mkd = 'MKD',
  Mmk = 'MMK',
  Mnt = 'MNT',
  Mop = 'MOP',
  Mru = 'MRU',
  Mur = 'MUR',
  Mvr = 'MVR',
  Mwk = 'MWK',
  Mxn = 'MXN',
  Mxv = 'MXV',
  Myr = 'MYR',
  Mzn = 'MZN',
  Nad = 'NAD',
  Ngn = 'NGN',
  Nio = 'NIO',
  Nok = 'NOK',
  Npr = 'NPR',
  Nzd = 'NZD',
  Omr = 'OMR',
  Pab = 'PAB',
  Pen = 'PEN',
  Pgk = 'PGK',
  Php = 'PHP',
  Pkr = 'PKR',
  Pln = 'PLN',
  Pyg = 'PYG',
  Qar = 'QAR',
  Ron = 'RON',
  Rsd = 'RSD',
  Rub = 'RUB',
  Rwf = 'RWF',
  Sar = 'SAR',
  Sbd = 'SBD',
  Scr = 'SCR',
  Sdg = 'SDG',
  Sek = 'SEK',
  Sgd = 'SGD',
  Shp = 'SHP',
  Sll = 'SLL',
  Sos = 'SOS',
  Srd = 'SRD',
  Ssp = 'SSP',
  Stn = 'STN',
  Svc = 'SVC',
  Syp = 'SYP',
  Szl = 'SZL',
  Thb = 'THB',
  Tjs = 'TJS',
  Tmt = 'TMT',
  Tnd = 'TND',
  Top = 'TOP',
  Try = 'TRY',
  Ttd = 'TTD',
  Twd = 'TWD',
  Tzs = 'TZS',
  Uah = 'UAH',
  Ugx = 'UGX',
  Usd = 'USD',
  Usn = 'USN',
  Uyi = 'UYI',
  Uyu = 'UYU',
  Uyw = 'UYW',
  Uzs = 'UZS',
  Ves = 'VES',
  Vnd = 'VND',
  Vuv = 'VUV',
  Wst = 'WST',
  Xaf = 'XAF',
  Xag = 'XAG',
  Xau = 'XAU',
  Xba = 'XBA',
  Xbb = 'XBB',
  Xbc = 'XBC',
  Xbd = 'XBD',
  Xcd = 'XCD',
  Xdr = 'XDR',
  Xof = 'XOF',
  Xpd = 'XPD',
  Xpf = 'XPF',
  Xpt = 'XPT',
  Xsu = 'XSU',
  Xua = 'XUA',
  Yer = 'YER',
  Zar = 'ZAR',
  Zmw = 'ZMW',
  Zwl = 'ZWL'
}

export type CustomDomain = {
  readonly __typename: 'CustomDomain';
  readonly active: Scalars['Boolean']['output'];
  readonly domain?: Maybe<Scalars['String']['output']>;
  readonly id?: Maybe<Scalars['String']['output']>;
  readonly verified: Scalars['Boolean']['output'];
};

export type CustomTheme = Theme & {
  readonly __typename: 'CustomTheme';
  readonly background: Background;
  readonly buttonStyle: ButtonStyle;
  readonly editable: Scalars['Boolean']['output'];
  readonly footer: Footer;
  readonly heading: HeadingOptions;
  readonly key: Scalars['ID']['output'];
  readonly luminance: Luminance;
  readonly socialStyle: SocialStyle;
  readonly typeface: Typeface;
};


export type CustomThemeBackgroundArgs = {
  isGlowUpPreview?: InputMaybe<Scalars['Boolean']['input']>;
  isProfilePreview?: InputMaybe<Scalars['Boolean']['input']>;
};


export type CustomThemeButtonStyleArgs = {
  isGlowUpPreview?: InputMaybe<Scalars['Boolean']['input']>;
  isProfilePreview?: InputMaybe<Scalars['Boolean']['input']>;
};


export type CustomThemeHeadingArgs = {
  isGlowUpPreview?: InputMaybe<Scalars['Boolean']['input']>;
  isProfilePreview?: InputMaybe<Scalars['Boolean']['input']>;
};

export type DateRangeInput = {
  readonly end: Scalars['String']['input'];
  readonly start: Scalars['String']['input'];
};

export type DeepLink = {
  readonly __typename: 'DeepLink';
  readonly mobile?: Maybe<DeepLinkMobile>;
  readonly web?: Maybe<DeepLinkWeb>;
};

export type DeepLinkMobile = {
  readonly __typename: 'DeepLinkMobile';
  readonly fallback?: Maybe<Scalars['String']['output']>;
  readonly url: Scalars['String']['output'];
};

export type DeepLinkWeb = {
  readonly __typename: 'DeepLinkWeb';
  readonly url: Scalars['String']['output'];
};

export type DefaultBackground = {
  readonly __typename: 'DefaultBackground';
  readonly color: Scalars['String']['output'];
  readonly style: BackgroundStyle;
  readonly type: BackgroundType;
};

export enum DefaultProfilePage {
  Links = 'LINKS',
  Store = 'STORE'
}

export type DefaultTheme = Theme & {
  readonly __typename: 'DefaultTheme';
  readonly editable: Scalars['Boolean']['output'];
  readonly key: Scalars['ID']['output'];
};

export type DeleteAccountInput = {
  readonly uuid: Scalars['String']['input'];
};

export type DeleteAccountModel = {
  readonly __typename: 'DeleteAccountModel';
  readonly success: Scalars['Boolean']['output'];
};

export type DeleteAccountResult = {
  readonly __typename: 'DeleteAccountResult';
  readonly success?: Maybe<Scalars['Boolean']['output']>;
};

export type DeleteAffiliateTokenInput = {
  readonly advertiser?: InputMaybe<Scalars['String']['input']>;
  readonly program: Scalars['String']['input'];
};

export type DeleteCommerceCollectionInput = {
  readonly accountUuid: Scalars['String']['input'];
  readonly collectionId: Scalars['String']['input'];
};

export type DeleteCommercePreviewForUserInput = {
  readonly accountUuid: Scalars['String']['input'];
  readonly previewId: Scalars['String']['input'];
};

export type DeleteCommerceStoreProductFromCollectionInput = {
  readonly accountUuid: Scalars['String']['input'];
  readonly collectionId: Scalars['String']['input'];
  readonly id: Scalars['String']['input'];
};

export type DeleteCommerceStoreProductsFromCollectionInput = {
  readonly accountUuid: Scalars['String']['input'];
  readonly collectionId: Scalars['String']['input'];
  /** AccountProductIds */
  readonly ids: ReadonlyArray<Scalars['String']['input']>;
};

export type DeleteCommerceStoreProductsFromStorefrontPostInput = {
  /** AccountProductIds */
  readonly accountProductIds: ReadonlyArray<Scalars['String']['input']>;
  readonly accountUuid: Scalars['String']['input'];
  readonly postId: Scalars['String']['input'];
};

export type DeleteCommerceStorefrontPostInput = {
  readonly accountUuid: Scalars['String']['input'];
  readonly postId: Scalars['String']['input'];
};

export type DeleteCommerceUgcContentForUserInput = {
  readonly accountUuid: Scalars['String']['input'];
  readonly integrationId: Scalars['String']['input'];
};

export type DeleteCommerceUgcContentFromStorefrontPostInput = {
  readonly accountUuid: Scalars['String']['input'];
  readonly postId: Scalars['String']['input'];
  /** The UGC content ID. This is the ID of the UGC content in the database, not the ID in external social-platform. It is in UUID format. */
  readonly ugcIds: ReadonlyArray<Scalars['String']['input']>;
};

export type DeleteCommerceUgcContentInCollectionInput = {
  readonly accountUuid: Scalars['String']['input'];
  readonly collectionId: Scalars['String']['input'];
  /** The UGC content ID. This is the ID of the UGC content in the database, not the ID in external social-platform. It is in UUID format. */
  readonly ugcContentId: Scalars['String']['input'];
};

export type DeleteFollowerInput = {
  /** Id of the follower to delete */
  readonly followerId: Scalars['String']['input'];
};

export type DeleteFollowerModel = {
  readonly __typename: 'DeleteFollowerModel';
  readonly success: Scalars['Boolean']['output'];
};

export type DeleteGoogleAuthTokenResult = {
  readonly __typename: 'DeleteGoogleAuthTokenResult';
  readonly hasDeletedToken: Scalars['Boolean']['output'];
};

export type DeleteInstagramWebhookResult = {
  readonly __typename: 'DeleteInstagramWebhookResult';
  readonly success: Scalars['Boolean']['output'];
};

export type DeleteLinkInput = {
  readonly includeNested?: InputMaybe<Scalars['Boolean']['input']>;
};

export type DeleteNotificationsByTypeResponse = {
  readonly __typename: 'DeleteNotificationsByTypeResponse';
  readonly message?: Maybe<Scalars['String']['output']>;
  readonly notificationsDeleted: Scalars['Float']['output'];
  readonly recipientsDeleted: Scalars['Float']['output'];
  readonly success: Scalars['Boolean']['output'];
};

export type DeleteScheduledNotificationInput = {
  readonly accountUuid: Scalars['String']['input'];
  readonly linkId: Scalars['Int']['input'];
};

export type DeleteSocialNotificationConfigInput = {
  readonly accountUuid: Scalars['String']['input'];
  readonly id: Scalars['String']['input'];
  /** Instagram business account ID. Must be set if socialIntegrationType is FACEBOOK */
  readonly instagramBusinessAccountId?: InputMaybe<Scalars['String']['input']>;
  /** Linktree social integration id */
  readonly socialIntegrationId?: InputMaybe<Scalars['String']['input']>;
};

export type DeleteSocialNotificationConfigOutput = {
  readonly __typename: 'DeleteSocialNotificationConfigOutput';
  readonly success: Scalars['Boolean']['output'];
};

export type DeleteUserResult = {
  readonly __typename: 'DeleteUserResult';
  readonly success?: Maybe<Scalars['Boolean']['output']>;
};

export type DemographicCitySegment = {
  readonly __typename: 'DemographicCitySegment';
  readonly count: Scalars['Int']['output'];
  readonly countryCode?: Maybe<Scalars['String']['output']>;
  readonly latitude: Scalars['Float']['output'];
  readonly longitude: Scalars['Float']['output'];
  readonly percentage: Scalars['Float']['output'];
  readonly segment: Scalars['String']['output'];
};

export type DemographicSegment = {
  readonly __typename: 'DemographicSegment';
  readonly count: Scalars['Int']['output'];
  readonly percentage: Scalars['Float']['output'];
  readonly segment: Scalars['String']['output'];
};

export type Design = {
  readonly __typename: 'Design';
  readonly colors: DesignColors;
  readonly fonts: DesignFonts;
};

export type DesignColors = {
  readonly __typename: 'DesignColors';
  readonly bodyColor: Scalars['String']['output'];
  readonly linkBackgroundColor: Scalars['String']['output'];
};

export type DesignFonts = {
  readonly __typename: 'DesignFonts';
  readonly fontColor: Scalars['String']['output'];
  readonly fontFamily: Scalars['String']['output'];
  readonly fontSize: FontSize;
  readonly fontWeight: Scalars['String']['output'];
  readonly letterSpacing: Scalars['String']['output'];
};

export type DeviceBreakdown = {
  readonly __typename: 'DeviceBreakdown';
  readonly clickThroughRate?: Maybe<Scalars['Float']['output']>;
  readonly clicks?: Maybe<Scalars['Int']['output']>;
  readonly date: Scalars['String']['output'];
  readonly device?: Maybe<Scalars['String']['output']>;
  readonly views?: Maybe<Scalars['Int']['output']>;
};

export type DigitalDownloadLinkContext = {
  readonly __typename: 'DigitalDownloadLinkContext';
  readonly listing?: Maybe<DigitalDownloadLinkListing>;
  readonly product?: Maybe<DigitalDownloadLinkProduct>;
  readonly v2FormId?: Maybe<Scalars['String']['output']>;
};

export type DigitalDownloadLinkContextInput = {
  readonly collectionId?: InputMaybe<Scalars['String']['input']>;
  readonly listingAmount?: InputMaybe<Scalars['Int']['input']>;
  readonly listingCurrency?: InputMaybe<Scalars['String']['input']>;
  readonly listingDescription?: InputMaybe<Scalars['String']['input']>;
  readonly listingId?: InputMaybe<Scalars['String']['input']>;
  readonly listingImageUrl?: InputMaybe<Scalars['String']['input']>;
  readonly listingName?: InputMaybe<Scalars['String']['input']>;
  readonly listingPaymentType?: InputMaybe<DigitalDownloadPaymentType>;
  readonly productItems?: InputMaybe<ReadonlyArray<InputMaybe<DigitalDownloadLinkProductItemInput>>>;
  readonly v2FormId?: InputMaybe<Scalars['String']['input']>;
};

export type DigitalDownloadLinkListing = {
  readonly __typename: 'DigitalDownloadLinkListing';
  readonly amount?: Maybe<Scalars['Int']['output']>;
  readonly currency?: Maybe<Scalars['String']['output']>;
  readonly description?: Maybe<Scalars['String']['output']>;
  /** The ID of the listing stored in the Payments Service */
  readonly id?: Maybe<Scalars['String']['output']>;
  readonly imageUrl?: Maybe<Scalars['String']['output']>;
  readonly name?: Maybe<Scalars['String']['output']>;
  readonly paymentType?: Maybe<DigitalDownloadPaymentType>;
  /** The status of the listing stored in the Payments Service */
  readonly status?: Maybe<Scalars['String']['output']>;
};

export type DigitalDownloadLinkProduct = {
  readonly __typename: 'DigitalDownloadLinkProduct';
  /** The ID of the collection stored in the UGC Service */
  readonly id: Scalars['String']['output'];
  readonly items?: Maybe<ReadonlyArray<Maybe<DigitalDownloadLinkProductItem>>>;
};

export type DigitalDownloadLinkProductItem = {
  readonly __typename: 'DigitalDownloadLinkProductItem';
  readonly displayName?: Maybe<Scalars['String']['output']>;
  readonly extension?: Maybe<Scalars['String']['output']>;
  readonly id?: Maybe<Scalars['String']['output']>;
  readonly mimeType?: Maybe<Scalars['String']['output']>;
  readonly size?: Maybe<Scalars['Int']['output']>;
  readonly url?: Maybe<Scalars['String']['output']>;
};

export type DigitalDownloadLinkProductItemInput = {
  readonly displayName?: InputMaybe<Scalars['String']['input']>;
  readonly extension?: InputMaybe<Scalars['String']['input']>;
  readonly id?: InputMaybe<Scalars['String']['input']>;
  readonly mimeType?: InputMaybe<Scalars['String']['input']>;
  readonly size?: InputMaybe<Scalars['Int']['input']>;
  readonly url?: InputMaybe<Scalars['String']['input']>;
};

export enum DigitalDownloadPaymentType {
  Free = 'FREE',
  OneTime = 'ONE_TIME'
}

export type DigitalTransaction = {
  readonly __typename: 'DigitalTransaction';
  readonly amount: Scalars['Float']['output'];
  readonly coupon?: Maybe<MinifiedCouponDto>;
  readonly created: Scalars['DateTime']['output'];
  readonly currency: Scalars['String']['output'];
  readonly description: Scalars['String']['output'];
  readonly displayId: Scalars['String']['output'];
  readonly email: Scalars['String']['output'];
  readonly eventDateTime: Scalars['String']['output'];
  readonly id: Scalars['String']['output'];
  readonly image: Scalars['String']['output'];
  readonly linktreeFees?: Maybe<Scalars['Float']['output']>;
  readonly linktreeFeesPercentage?: Maybe<Scalars['Float']['output']>;
  readonly listPrice: Scalars['Float']['output'];
  readonly listingId: Scalars['String']['output'];
  readonly name: Scalars['String']['output'];
  readonly paymentIntentId: Scalars['String']['output'];
  readonly sellerFees: Scalars['Float']['output'];
  readonly status: Scalars['String']['output'];
  readonly title: Scalars['String']['output'];
  readonly transactionFee?: Maybe<Scalars['Float']['output']>;
};

export type DisabledWalletConnection = BaseWalletConnection & {
  readonly __typename: 'DisabledWalletConnection';
  readonly accountId: Scalars['String']['output'];
  readonly countryCode?: Maybe<Scalars['String']['output']>;
  readonly currency: Scalars['String']['output'];
  readonly dashboardUrl?: Maybe<Scalars['String']['output']>;
  readonly program: Scalars['String']['output'];
  readonly provider: Scalars['String']['output'];
  readonly status: Scalars['String']['output'];
  readonly updatedAt: Scalars['Float']['output'];
};

/** Disconnected wallet connection is just the inactivity state of an active connection. often means the vendor account no longer exists. should not be used on the frontend */
export type DisconnectedWalletConnection = BaseWalletConnection & {
  readonly __typename: 'DisconnectedWalletConnection';
  readonly accountId: Scalars['String']['output'];
  readonly countryCode?: Maybe<Scalars['String']['output']>;
  readonly currency: Scalars['String']['output'];
  readonly dashboardUrl?: Maybe<Scalars['String']['output']>;
  readonly program: Scalars['String']['output'];
  readonly provider: Scalars['String']['output'];
  readonly status: Scalars['String']['output'];
  readonly updatedAt: Scalars['Float']['output'];
};

export type DiscoverAccount = {
  readonly __typename: 'DiscoverAccount';
  readonly id: Scalars['Int']['output'];
  readonly profileBadges?: Maybe<ReadonlyArray<ProfileBadges>>;
  /** @deprecated Legacy field. Use `customAvatar` instead. */
  readonly profilePictureUrl?: Maybe<Scalars['String']['output']>;
  readonly realName?: Maybe<Scalars['String']['output']>;
  readonly status?: Maybe<Scalars['String']['output']>;
  readonly username: Scalars['String']['output'];
};


export type DiscoverAccountProfilePictureUrlArgs = {
  isProfilePreview?: InputMaybe<Scalars['Boolean']['input']>;
};

export type DiscoverLink = {
  readonly __typename: 'DiscoverLink';
  readonly account: DiscoverAccount;
  readonly active: Scalars['Boolean']['output'];
  readonly createdAt?: Maybe<Scalars['String']['output']>;
  readonly id: Scalars['Int']['output'];
  readonly modifiers: LinkModifiers;
  readonly shouldRouteToProfile: Scalars['Boolean']['output'];
  readonly title?: Maybe<Scalars['String']['output']>;
  readonly type?: Maybe<Scalars['String']['output']>;
  readonly url?: Maybe<Scalars['String']['output']>;
};


export type DiscoverLinkUrlArgs = {
  appendLtclid?: InputMaybe<Scalars['Boolean']['input']>;
  appendUtm?: InputMaybe<Scalars['Boolean']['input']>;
  evaluateGate?: InputMaybe<Scalars['Boolean']['input']>;
};

export type DocumentInput = {
  readonly content?: InputMaybe<Scalars['String']['input']>;
  readonly expiry?: InputMaybe<Scalars['DateTime']['input']>;
  readonly id: Scalars['String']['input'];
  readonly profile?: InputMaybe<Scalars['String']['input']>;
  readonly sourceType?: InputMaybe<Scalars['String']['input']>;
  readonly url?: InputMaybe<Scalars['String']['input']>;
};

export type DotDigitalIntegrationContext = {
  readonly __typename: 'DotDigitalIntegrationContext';
  readonly apiEndpoint?: Maybe<Scalars['String']['output']>;
  readonly email?: Maybe<Scalars['String']['output']>;
  readonly message?: Maybe<Scalars['String']['output']>;
  readonly password?: Maybe<Scalars['String']['output']>;
  readonly position?: Maybe<Scalars['String']['output']>;
  readonly storageKey?: Maybe<Scalars['String']['output']>;
  readonly termsActive?: Maybe<Scalars['Boolean']['output']>;
  readonly termsLabel?: Maybe<Scalars['String']['output']>;
  readonly termsUrl?: Maybe<Scalars['String']['output']>;
  readonly title?: Maybe<Scalars['String']['output']>;
};

export type DuplicateProfileResult = {
  readonly __typename: 'DuplicateProfileResult';
  readonly user?: Maybe<User>;
};

export type EarnActivity = {
  readonly __typename: 'EarnActivity';
  readonly breakdown?: Maybe<EarnBreakdown>;
  readonly currency?: Maybe<Scalars['String']['output']>;
  readonly date: Scalars['String']['output'];
  readonly total: Scalars['Int']['output'];
};

export type EarnAnalyticsAccountInput = {
  readonly accountId: Scalars['Int']['input'];
  readonly accountUuid: Scalars['String']['input'];
};

export type EarnBreakdown = {
  readonly __typename: 'EarnBreakdown';
  readonly community: Scalars['Int']['output'];
  readonly courses: Scalars['Int']['output'];
  readonly currency?: Maybe<Scalars['String']['output']>;
  readonly digitalDownloads: Scalars['Int']['output'];
  readonly products: Scalars['Int']['output'];
  readonly sponsoredLinks: Scalars['Int']['output'];
};

export type EarnLink = {
  readonly __typename: 'EarnLink';
  readonly clicks: Scalars['Int']['output'];
  readonly conversions: Scalars['Int']['output'];
  readonly currency?: Maybe<Scalars['String']['output']>;
  readonly earnings: Scalars['Int']['output'];
  readonly id: Scalars['String']['output'];
  readonly image: Scalars['String']['output'];
  readonly title: Scalars['String']['output'];
  readonly type: Scalars['String']['output'];
};

export type EarnOverview = {
  readonly __typename: 'EarnOverview';
  readonly clicks: EarningsModel;
  readonly conversions?: Maybe<EarningsModel>;
  readonly ctr?: Maybe<EarningsModel>;
  readonly earnings?: Maybe<EarningsModel>;
  readonly links?: Maybe<ReadonlyArray<EarnLink>>;
};

export type EarnTrend = {
  readonly __typename: 'EarnTrend';
  readonly percentage: Scalars['Int']['output'];
  readonly trend: Scalars['Int']['output'];
};

export type EarningsModel = {
  readonly __typename: 'EarningsModel';
  readonly breakdown?: Maybe<EarnBreakdown>;
  readonly currency?: Maybe<Scalars['String']['output']>;
  readonly timeseries?: Maybe<ReadonlyArray<EarnActivity>>;
  readonly total: Scalars['Int']['output'];
  readonly trend?: Maybe<EarnTrend>;
};

export type EditCommerceAccountCollectionInput = {
  readonly accountUuid: Scalars['String']['input'];
  readonly active: Scalars['Boolean']['input'];
  readonly id: Scalars['String']['input'];
};

export type EditCommerceCollectionInput = {
  readonly accountUuid: Scalars['String']['input'];
  readonly active?: InputMaybe<Scalars['Boolean']['input']>;
  readonly collectionId: Scalars['String']['input'];
  readonly title?: InputMaybe<Scalars['String']['input']>;
};

export type EditCommerceCollectionTemplateGroupInput = {
  readonly id: Scalars['String']['input'];
  readonly title: Scalars['String']['input'];
};

export type EditCommerceCollectionTemplateInput = {
  readonly id: Scalars['String']['input'];
  readonly title: Scalars['String']['input'];
};

export type EditCommerceProductInCollectionOrderInput = {
  readonly accountUuid: Scalars['String']['input'];
  readonly collectionId: Scalars['String']['input'];
  readonly fromIndex: Scalars['Float']['input'];
  readonly toIndex: Scalars['Float']['input'];
};

export type EditCommerceRenderOrderInput = {
  readonly accountUuid: Scalars['String']['input'];
  readonly fromIndex: Scalars['Float']['input'];
  readonly toIndex: Scalars['Float']['input'];
};

export type EditCommerceStoreProductInput = {
  readonly accountUuid: Scalars['String']['input'];
  readonly active?: InputMaybe<Scalars['Boolean']['input']>;
  readonly addedStandalone?: InputMaybe<Scalars['Boolean']['input']>;
  readonly collectionId?: InputMaybe<Scalars['String']['input']>;
  readonly currency?: InputMaybe<Scalars['String']['input']>;
  /** This ID can mean different things depending on the if 'collectionId' is provided. If "collectionId" is provided, this ID is 'accountCollection' table ID. Otherwise, this ID is the 'accountProduct' ID. See 'CommerceStoreProduct' definition. */
  readonly id: Scalars['String']['input'];
  readonly image?: InputMaybe<Scalars['String']['input']>;
  readonly price?: InputMaybe<Scalars['Int']['input']>;
  readonly priceVisible?: InputMaybe<Scalars['Boolean']['input']>;
  readonly title?: InputMaybe<Scalars['String']['input']>;
  readonly url?: InputMaybe<Scalars['String']['input']>;
};

export type EditCommerceStorefrontPostInput = {
  readonly accountUuid: Scalars['String']['input'];
  readonly active?: InputMaybe<Scalars['Boolean']['input']>;
  readonly postId: Scalars['String']['input'];
  readonly title?: InputMaybe<Scalars['String']['input']>;
};

export type EmailLinkContext = {
  readonly __typename: 'EmailLinkContext';
  readonly embedOption?: Maybe<LinkEmbedOptions>;
};

export type EmailPreferences = {
  readonly __typename: 'EmailPreferences';
  readonly accountId?: Maybe<Scalars['String']['output']>;
  readonly id?: Maybe<Scalars['String']['output']>;
  readonly weeklyDigest: Scalars['Boolean']['output'];
};

export type EntitlementProduct = {
  readonly __typename: 'EntitlementProduct';
  readonly tier: Tier;
  readonly type: EntitlementProductType;
};

export enum EntitlementProductType {
  Subscription = 'Subscription'
}

export type EntitlementQuota = {
  readonly __typename: 'EntitlementQuota';
  readonly limit: Scalars['Int']['output'];
  readonly remaining: Scalars['Int']['output'];
};

export type EntitlementRate = {
  readonly __typename: 'EntitlementRate';
  readonly amount: Scalars['Float']['output'];
  readonly type: EntitlementRateType;
};

export enum EntitlementRateType {
  Percentage = 'Percentage'
}

export enum EntitlementType {
  Account = 'Account',
  User = 'User'
}

export type ExtensionLinkContext = {
  readonly __typename: 'ExtensionLinkContext';
  readonly data?: Maybe<Scalars['String']['output']>;
  readonly embedOption?: Maybe<LinkEmbedOptions>;
  readonly hasUrl?: Maybe<Scalars['Boolean']['output']>;
  readonly isValid?: Maybe<Scalars['Boolean']['output']>;
  readonly linkTypeId: Scalars['String']['output'];
  readonly status?: Maybe<ExtensionLinkStatus>;
  readonly usesUrl?: Maybe<Scalars['Boolean']['output']>;
  readonly version?: Maybe<Scalars['String']['output']>;
};


export type ExtensionLinkContextDataArgs = {
  evaluateGate?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ExtensionLinkContextInput = {
  readonly data?: InputMaybe<Scalars['String']['input']>;
  readonly embedOption?: InputMaybe<LinkEmbedOptions>;
  readonly hasUrl?: InputMaybe<Scalars['Boolean']['input']>;
  readonly isValid?: InputMaybe<Scalars['Boolean']['input']>;
  readonly linkTypeId?: InputMaybe<Scalars['String']['input']>;
  readonly usesUrl?: InputMaybe<Scalars['Boolean']['input']>;
};

export enum ExtensionLinkStatus {
  Disabled = 'DISABLED',
  Draft = 'DRAFT',
  Published = 'PUBLISHED'
}

export type ExtensionLinkTemplates = {
  readonly __typename: 'ExtensionLinkTemplates';
  readonly public?: Maybe<Scalars['String']['output']>;
  readonly settings?: Maybe<Scalars['String']['output']>;
};

export type FacebookLinkContext = {
  readonly __typename: 'FacebookLinkContext';
  readonly autoplay?: Maybe<Scalars['Boolean']['output']>;
  readonly embedOption?: Maybe<LinkEmbedOptions>;
  readonly mute?: Maybe<Scalars['Boolean']['output']>;
};

export type FacebookLinkContextInput = {
  readonly autoplay?: InputMaybe<Scalars['Boolean']['input']>;
  readonly embedOption?: InputMaybe<LinkEmbedOptions>;
  readonly mute?: InputMaybe<Scalars['Boolean']['input']>;
};

export type FacebookPixel = {
  readonly __typename: 'FacebookPixel';
  readonly isTokenValid: Scalars['Boolean']['output'];
};

export type FacebookSocialIntegrationContext = {
  readonly __typename: 'FacebookSocialIntegrationContext';
  readonly businessInstagramAccounts: ReadonlyArray<BusinessInstagramAccounts>;
  readonly instagramPost?: Maybe<GetInstagramBusinessAccountPost>;
  readonly scopes?: Maybe<ReadonlyArray<Maybe<Scalars['String']['output']>>>;
  readonly supportIGDM?: Maybe<Scalars['Boolean']['output']>;
};


export type FacebookSocialIntegrationContextInstagramPostArgs = {
  id: Scalars['String']['input'];
};

export type FeaturedLayoutPreviousStateLink = {
  readonly __typename: 'FeaturedLayoutPreviousStateLink';
  readonly layoutOption?: Maybe<VisualLinkPreviewLayoutOption>;
  readonly linkId: Scalars['Int']['output'];
};

export type FollowAccountInput = {
  readonly accountId?: InputMaybe<Scalars['Int']['input']>;
  readonly agreeToShare?: InputMaybe<Scalars['Boolean']['input']>;
  readonly browserId?: InputMaybe<Scalars['String']['input']>;
  readonly followSource?: InputMaybe<FollowSource>;
  /** The Link ID when the follow is from a subscribe-locked link. */
  readonly followSubscribeLockLinkId?: InputMaybe<Scalars['Int']['input']>;
  /** Follower Email. For non-OTC flow, either followerEmail or followerId must be set, but not both. */
  readonly followerEmail?: InputMaybe<Scalars['String']['input']>;
  /** Follower ID. For non-OTC flow, either followerEmail or followerId must be set, but not both. */
  readonly followerId?: InputMaybe<Scalars['String']['input']>;
  readonly method?: InputMaybe<NotificationMethod>;
  readonly payloadContext?: InputMaybe<PayloadContext>;
  readonly username?: InputMaybe<Scalars['String']['input']>;
  readonly uuid: Scalars['String']['input'];
};

export type FollowAssociatedLinkModel = {
  readonly __typename: 'FollowAssociatedLinkModel';
  /** The Monolith link ID associated with this follow. */
  readonly linkId?: Maybe<Scalars['Int']['output']>;
  /** The link title associated with this follow. */
  readonly title?: Maybe<Scalars['String']['output']>;
};

export type FollowCommunitySubscriptionModel = {
  readonly __typename: 'FollowCommunitySubscriptionModel';
  /** The Monolith link associated with this follow. */
  readonly associatedLink?: Maybe<FollowAssociatedLinkModel>;
  /** The community image associated with this follow. */
  readonly communityImage?: Maybe<Scalars['String']['output']>;
  /** The community subscription ID associated with this follow. */
  readonly communitySubscriptionId?: Maybe<Scalars['String']['output']>;
  /** The community title associated with this follow. */
  readonly communityTitle?: Maybe<Scalars['String']['output']>;
  /** The payment listing ID associated with this community subscription. */
  readonly paymentListingId?: Maybe<Scalars['String']['output']>;
};

/** Customer tag for a follower. */
export enum FollowCustomerTag {
  CustomerFree = 'CUSTOMER_FREE',
  CustomerPaid = 'CUSTOMER_PAID'
}

export type FollowDigitalDownloadProductModel = {
  readonly __typename: 'FollowDigitalDownloadProductModel';
  /** The Monolith link associated with this follow. */
  readonly associatedLink?: Maybe<FollowAssociatedLinkModel>;
  /** The digital download product ID associated with this follow. */
  readonly digitalDownloadProductId?: Maybe<Scalars['String']['output']>;
  /** The digital download product thumbnail URL associated with this follow. */
  readonly digitalDownloadProductThumbnailUrl?: Maybe<Scalars['String']['output']>;
  /** The digital download product title associated with this follow. */
  readonly digitalDownloadProductTitle?: Maybe<Scalars['String']['output']>;
  /** The payment listing ID associated with this digital download product. */
  readonly paymentListingId?: Maybe<Scalars['String']['output']>;
};

export type FollowKajabiCourseModel = {
  readonly __typename: 'FollowKajabiCourseModel';
  /** The Monolith link associated with this follow. */
  readonly associatedLink?: Maybe<FollowAssociatedLinkModel>;
  /** The Kajabi course ID associated with this follow. */
  readonly kajabiCourseId?: Maybe<Scalars['String']['output']>;
  /** The Kajabi course thumbnail URL associated with this follow. */
  readonly kajabiCourseThumbnailUrl?: Maybe<Scalars['String']['output']>;
  /** The Kajabi course title associated with this follow. */
  readonly kajabiCourseTitle?: Maybe<Scalars['String']['output']>;
  /** The payment listing ID associated with this Kajabi course. */
  readonly paymentListingId?: Maybe<Scalars['String']['output']>;
};

export type FollowModel = {
  readonly __typename: 'FollowModel';
  readonly accountUuid?: Maybe<Scalars['String']['output']>;
  readonly agreeToShare?: Maybe<Scalars['Boolean']['output']>;
  readonly channel?: Maybe<Scalars['String']['output']>;
  readonly createdAt?: Maybe<Scalars['DateTime']['output']>;
  readonly customerTag?: Maybe<FollowCustomerTag>;
  readonly device?: Maybe<Scalars['String']['output']>;
  /** The community subscription data. Only present if the follow source is COMMUNITY_SUBSCRIPTION. */
  readonly followCommunitySubscription?: Maybe<FollowCommunitySubscriptionModel>;
  /** The digital download product data. Only present if the follow source is DIGITAL_DOWNLOAD. */
  readonly followDigitalDownloadProduct?: Maybe<FollowDigitalDownloadProductModel>;
  /** The Monolith Link metadata associated with the form that the visitor submits. Only present if the follow source is FORM_SUBMISSION. */
  readonly followFormAssociatedLink?: Maybe<FollowAssociatedLinkModel>;
  /**
   * The Monolith Link ID associated with the form that the visitor submits. Only present if the follow source is FORM_SUBMISSION.
   * @deprecated Use `followFormAssociatedLink` field instead
   */
  readonly followFormAssociatedLinkId?: Maybe<Scalars['String']['output']>;
  /** The ID of the form that the visitor submits. Only present if the follow source is FORM_SUBMISSION. */
  readonly followFormId?: Maybe<Scalars['String']['output']>;
  /** The form submission data. Only present if the follow source is FORM_SUBMISSION. */
  readonly followFormSubmission?: Maybe<FormSubmissionModel>;
  /** The Kajabi course data. Only present if the follow source is KAJABI_COURSE. */
  readonly followKajabiCourse?: Maybe<FollowKajabiCourseModel>;
  /** The Monolith Link metadata of the link that the visitor unlocks to subscribe. Only present if the follow source is LINK_SUBSCRIBE_UNLOCK. */
  readonly followSubscribeLockLink?: Maybe<FollowAssociatedLinkModel>;
  /**
   * The Monolith Link ID of the link that the visitor unlocks to subscribe. Only present if the follow source is LINK_SUBSCRIBE_UNLOCK.
   * @deprecated Use `followSubscribeLockLink` field instead
   */
  readonly followSubscribeLockLinkId?: Maybe<Scalars['String']['output']>;
  readonly followerId?: Maybe<Scalars['String']['output']>;
  /** @deprecated Use `status` field instead */
  readonly following: Scalars['Boolean']['output'];
  readonly frequency?: Maybe<Frequency>;
  readonly geoCountry?: Maybe<Scalars['String']['output']>;
  readonly language?: Maybe<Scalars['String']['output']>;
  readonly method?: Maybe<NotificationMethod>;
  readonly referrer?: Maybe<Scalars['String']['output']>;
  readonly source?: Maybe<FollowSource>;
  readonly status?: Maybe<FollowStatus>;
  /** The transaction data. Only present if the follow involves digital assets purchase. */
  readonly transaction?: Maybe<FollowerTransactionModel>;
  readonly updatedAt?: Maybe<Scalars['DateTime']['output']>;
  readonly verification?: Maybe<Verification>;
};

/** The field to order by for follow query. */
export enum FollowQueryOrderByKey {
  FollowerEmail = 'FOLLOWER_EMAIL',
  FollowerPhone = 'FOLLOWER_PHONE',
  FollowCreatedAt = 'FOLLOW_CREATED_AT',
  FollowGeoCountry = 'FOLLOW_GEO_COUNTRY',
  FollowSource = 'FOLLOW_SOURCE',
  FollowStatus = 'FOLLOW_STATUS'
}

/** Where the follow request comes from. */
export enum FollowSource {
  CommunitySubscription = 'COMMUNITY_SUBSCRIPTION',
  DigitalDownload = 'DIGITAL_DOWNLOAD',
  FollowerSettingsSubscribe = 'FOLLOWER_SETTINGS_SUBSCRIBE',
  FormSubmission = 'FORM_SUBMISSION',
  KajabiCourse = 'KAJABI_COURSE',
  LinkSubscribeUnlock = 'LINK_SUBSCRIBE_UNLOCK',
  ProfileSubscribe = 'PROFILE_SUBSCRIBE',
  Unknown = 'UNKNOWN'
}

export type FollowSourceModel = {
  readonly __typename: 'FollowSourceModel';
  /** The account UUID associated with this follow. */
  readonly accountUuid: Scalars['String']['output'];
  /** The community subscription data. Only present if the follow source is COMMUNITY_SUBSCRIPTION. */
  readonly followCommunitySubscription?: Maybe<FollowCommunitySubscriptionModel>;
  /** The digital download product data. Only present if the follow source is DIGITAL_DOWNLOAD. */
  readonly followDigitalDownloadProduct?: Maybe<FollowDigitalDownloadProductModel>;
  /** The Monolith Link metadata associated with the form that the visitor submits. Only present if the follow source is FORM_SUBMISSION. */
  readonly followFormAssociatedLink?: Maybe<FollowAssociatedLinkModel>;
  /** The Kajabi course data. Only present if the follow source is KAJABI_COURSE. */
  readonly followKajabiCourse?: Maybe<FollowKajabiCourseModel>;
  readonly followSource: FollowSource;
  /** The Monolith Link metadata of the link that the visitor unlocks to subscribe. Only present if the follow source is LINK_SUBSCRIBE_UNLOCK. */
  readonly followSubscribeLockLink?: Maybe<FollowAssociatedLinkModel>;
};

export type FollowSourceModelEdge = {
  readonly __typename: 'FollowSourceModelEdge';
  readonly cursor?: Maybe<Scalars['String']['output']>;
  readonly node: FollowSourceModel;
};

export type FollowSourceModelPage = {
  readonly __typename: 'FollowSourceModelPage';
  readonly edges: ReadonlyArray<FollowSourceModelEdge>;
  readonly pageInfo?: Maybe<LtFollowersApiPageInfo>;
};

/** Today, this API only returns follow sources with at least one follow. */
export type FollowSourcesByAccountInput = {
  readonly accountUuid: Scalars['String']['input'];
  /** The after-cursor to continue from. */
  readonly after?: InputMaybe<Scalars['String']['input']>;
  /** The before-cursor to continue from. */
  readonly before?: InputMaybe<Scalars['String']['input']>;
  readonly limit?: InputMaybe<Scalars['Int']['input']>;
};

export type FollowSourcesByAccountOutput = {
  readonly __typename: 'FollowSourcesByAccountOutput';
  readonly followSourcesPage?: Maybe<FollowSourceModelPage>;
};

export enum FollowStatus {
  Subscribed = 'SUBSCRIBED',
  Unsubscribed = 'UNSUBSCRIBED'
}

export type FollowUpQuestion = {
  readonly __typename: 'FollowUpQuestion';
  readonly question: Scalars['String']['output'];
};

export type FollowedLtAccountModel = {
  readonly __typename: 'FollowedLtAccountModel';
  readonly accountUuid: Scalars['String']['output'];
  readonly audienceSupportEmail?: Maybe<Scalars['String']['output']>;
  readonly pageTitle?: Maybe<Scalars['String']['output']>;
  readonly profilePictureUrl?: Maybe<Scalars['String']['output']>;
  readonly username?: Maybe<Scalars['String']['output']>;
};

export type FollowerCapabilitiesModel = {
  readonly __typename: 'FollowerCapabilitiesModel';
  readonly analytics?: Maybe<Scalars['String']['output']>;
  readonly analyticsDownloads?: Maybe<Scalars['Boolean']['output']>;
  readonly isAgreeToShareMigrationEnabled: Scalars['Boolean']['output'];
  readonly isFollowerNotificationsEnabled: Scalars['Boolean']['output'];
  /** When following the linker, if the OTC follow is required. */
  readonly isFollowingOtcRequired?: Maybe<Scalars['Boolean']['output']>;
  readonly isGetCapabilitiesEnabled: Scalars['Boolean']['output'];
  readonly isSubscribeButtonV2Enabled: Scalars['Boolean']['output'];
  readonly isWhatsappEnabled: Scalars['Boolean']['output'];
  readonly scheduledNotifications?: Maybe<Scalars['Boolean']['output']>;
  /** The form for visitor subscribing use. */
  readonly subscribeForm?: Maybe<FormModel>;
};

export type FollowerEnablementModel = {
  readonly __typename: 'FollowerEnablementModel';
  readonly capabilities?: Maybe<FollowerCapabilitiesModel>;
  readonly enabled?: Maybe<Scalars['Boolean']['output']>;
  readonly hasFeatureAccess: Scalars['Boolean']['output'];
};

export type FollowerFollowModel = {
  readonly __typename: 'FollowerFollowModel';
  readonly account: FollowedLtAccountModel;
  readonly follow: FollowModel;
  readonly follower: FollowerModel;
  readonly followerTransactionSummary?: Maybe<FollowerTransactionSummaryModel>;
};

export type FollowerFollowModelEdge = {
  readonly __typename: 'FollowerFollowModelEdge';
  readonly cursor?: Maybe<Scalars['String']['output']>;
  readonly node: FollowerFollowModel;
};

export type FollowerFollowModelPage = {
  readonly __typename: 'FollowerFollowModelPage';
  readonly edges: ReadonlyArray<FollowerFollowModelEdge>;
  readonly pageInfo?: Maybe<LtFollowersApiPageInfo>;
};

export type FollowerInput = {
  readonly id?: InputMaybe<Scalars['Int']['input']>;
  readonly username?: InputMaybe<Scalars['String']['input']>;
  readonly uuid: Scalars['String']['input'];
};

export type FollowerModel = {
  readonly __typename: 'FollowerModel';
  readonly dateOfBirth?: Maybe<Scalars['DateTime']['output']>;
  readonly email?: Maybe<Scalars['String']['output']>;
  /** a.k.a. followerId */
  readonly id: Scalars['String']['output'];
  readonly name?: Maybe<Scalars['String']['output']>;
  readonly phone?: Maybe<Scalars['String']['output']>;
};

export type FollowerNotificationSettingsModel = {
  readonly __typename: 'FollowerNotificationSettingsModel';
  readonly agreeToShare?: Maybe<Scalars['Boolean']['output']>;
  readonly followerId: Scalars['String']['output'];
  readonly following: ReadonlyArray<Following>;
  readonly notificationsPaused: Scalars['Boolean']['output'];
  readonly subscribedWeekly: Scalars['Boolean']['output'];
};

export type FollowerTransactionModel = {
  readonly __typename: 'FollowerTransactionModel';
  /** Seller UUID */
  readonly accountUuid: Scalars['String']['output'];
  /** Entitlement ID */
  readonly entitlementId?: Maybe<Scalars['String']['output']>;
  /** Buyer ID */
  readonly followerId: Scalars['String']['output'];
  readonly paymentListingId: Scalars['String']['output'];
  /** Transaction records */
  readonly paymentTransactions?: Maybe<ReadonlyArray<FollowerTransactionRecordModel>>;
  readonly price?: Maybe<FollowerTransactionPriceModel>;
  /** EntitlementStatus */
  readonly status?: Maybe<Scalars['String']['output']>;
};

export type FollowerTransactionPriceModel = {
  readonly __typename: 'FollowerTransactionPriceModel';
  readonly amount: Scalars['Int']['output'];
  /** PaymentCurrency */
  readonly currency?: Maybe<Scalars['String']['output']>;
  /** PaymentType */
  readonly paymentType: Scalars['String']['output'];
};

export type FollowerTransactionRecordModel = {
  readonly __typename: 'FollowerTransactionRecordModel';
  /** Transaction Display ID */
  readonly displayId: Scalars['String']['output'];
};

export type FollowerTransactionSummaryModel = {
  readonly __typename: 'FollowerTransactionSummaryModel';
  /** PaymentCurrency */
  readonly currency?: Maybe<Scalars['String']['output']>;
  /** Total number of purchases, only success purcahses, including both free and paid. */
  readonly totalActivePurchases?: Maybe<Scalars['Int']['output']>;
  /** Total amount of purchases */
  readonly totalAmount?: Maybe<Scalars['Int']['output']>;
};

export type FollowersAreEnabledInput = {
  readonly username?: InputMaybe<Scalars['String']['input']>;
  readonly uuid?: InputMaybe<Scalars['String']['input']>;
};

export type FollowersSummaryModel = {
  readonly __typename: 'FollowersSummaryModel';
  /** Total number of followers with status SUBSCRIBED, and agree-to-share = TRUE, and method = EMAIL. */
  readonly emailAgreeToShareCount: Scalars['Int']['output'];
  /** Total number of followers with status SUBSCRIBED, and method = EMAIL. */
  readonly emailCount: Scalars['Int']['output'];
  readonly enabled: Scalars['Boolean']['output'];
  /**
   * Total number of followers with status SUBSCRIBED.
   * @deprecated use "totalSubscribedFollowCount" instead
   */
  readonly followerCount: Scalars['Int']['output'];
  readonly hasFeatureAccess: Scalars['Boolean']['output'];
  /** Total number of followers with status SUBSCRIBED, and agree-to-share = TRUE, and method = PHONE+WHATSAPP. */
  readonly phoneAgreeToShareCount: Scalars['Int']['output'];
  /** Total number of followers with status SUBSCRIBED, and agree-to-share = TRUE, and method = PHONE. */
  readonly smsAgreeToShareCount: Scalars['Int']['output'];
  /** Total number of followers with status SUBSCRIBED, and method = PHONE. */
  readonly smsCount: Scalars['Int']['output'];
  /** Total number of followers with status SUBSCRIBED, and agree-to-share = TRUE. */
  readonly totalAgreeToShareCount: Scalars['Int']['output'];
  /** Total number of follows, including all statuses */
  readonly totalCount?: Maybe<Scalars['Int']['output']>;
  /** The count difference for "totalCount" for current state and X days ago. */
  readonly totalCountDiff?: Maybe<Scalars['Int']['output']>;
  /** The difference and trend for "totalCountDiff" compared to data from X days ago. */
  readonly totalCountDiffTrend?: Maybe<FollowersSummaryTrendModel>;
  /** The difference and trend for "totalCount" compared to data from X days ago. */
  readonly totalCountTrend?: Maybe<FollowersSummaryTrendModel>;
  /** Total number of followers with status SUBSCRIBED. */
  readonly totalSubscribedCount?: Maybe<Scalars['Int']['output']>;
  /** The difference and trend for "totalSubscribedCount" compared to data from X days ago. */
  readonly totalSubscribedCountTrend?: Maybe<FollowersSummaryTrendModel>;
  /** Total number of followers with status UNSUBSCRIBED. */
  readonly totalUnsubscribedCount?: Maybe<Scalars['Int']['output']>;
  /** The difference and trend for "totalUnsubscribedCount" compared to data from X days ago. */
  readonly totalUnsubscribedCountTrend?: Maybe<FollowersSummaryTrendModel>;
  /** Total number of followers with status SUBSCRIBED, and agree-to-share = TRUE, and method = WHATSAPP. */
  readonly whatsAppAgreeToShareCount: Scalars['Int']['output'];
  /** Total number of followers with status SUBSCRIBED, and method = WHATSAPP. */
  readonly whatsAppCount: Scalars['Int']['output'];
};

/** This data model represents a trend/diff for a given metric. It includes the absolute difference compared to data from X days ago. If the metrics increased, the diff is positive. If the metrics decreased, the diff is negative. If the metrics stayed the same, the diff is 0. For example, if the metric is "totalSubscribedCount", meaning the total number of followers with status SUBSCRIBED, The number on now time is 150. The number (snapshot) on now-7d time is 100. Then, the diff is 50. If you want to display the trend (up or down), you can decide if the diff is > 0 or < 0, or == 0. If you want to display the percentage based change, you can calculate the percentage based on the diff and the current value. diffPercentage = diff / (current_value - diff) * 100% In above example, it is 50 / (150 - 50) * 100% = 50%. */
export type FollowersSummaryTrendModel = {
  readonly __typename: 'FollowersSummaryTrendModel';
  /** Absolute diff number */
  readonly diff?: Maybe<Scalars['Int']['output']>;
};

export type Following = {
  readonly __typename: 'Following';
  readonly accountId: Scalars['String']['output'];
  readonly accountUuid: Scalars['String']['output'];
  readonly agreeToShare: Scalars['Boolean']['output'];
  readonly frequency: Frequency;
  readonly pageTitle?: Maybe<Scalars['String']['output']>;
  readonly profileBadges?: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  readonly profilePictureUrl?: Maybe<Scalars['String']['output']>;
  readonly username: Scalars['String']['output'];
};

export type FollowingModel = {
  readonly __typename: 'FollowingModel';
  readonly following: Scalars['Boolean']['output'];
};

export type FollowsByAccountInput = {
  readonly accountUuid: Scalars['String']['input'];
  /** The after-cursor to continue from. */
  readonly after?: InputMaybe<Scalars['String']['input']>;
  /** The before-cursor to continue from. */
  readonly before?: InputMaybe<Scalars['String']['input']>;
  /** An "OR" filter, to get all follows coming from a specific community subscription. */
  readonly followCommunitySubscriptionAssociatedLinkIds?: InputMaybe<ReadonlyArray<Scalars['Int']['input']>>;
  /** An "OR" filter, to get all follows coming from a specific digital download. */
  readonly followDigitalDownloadAssociatedLinkIds?: InputMaybe<ReadonlyArray<Scalars['Int']['input']>>;
  /** An "OR" filter, to get all follows coming from a specific FORM link-app submission. */
  readonly followFormAssociatedLinkIds?: InputMaybe<ReadonlyArray<Scalars['Int']['input']>>;
  /** An "OR" filter, to get all follows coming from a specific Kajabi course. */
  readonly followKajabiCourseAssociatedLinkIds?: InputMaybe<ReadonlyArray<Scalars['Int']['input']>>;
  /** An "OR" filter, to get all follows coming from a specific subscribe-lock unlocking. */
  readonly followSubscribeLockLinkIds?: InputMaybe<ReadonlyArray<Scalars['Int']['input']>>;
  /** Keyword search for follower email. Case insensitive. */
  readonly followerEmailSearch?: InputMaybe<Scalars['String']['input']>;
  /** Follower ID filter */
  readonly followerId?: InputMaybe<Scalars['String']['input']>;
  /** Include the total count of the query in the response. */
  readonly includeTotalCount?: InputMaybe<Scalars['Boolean']['input']>;
  readonly limit?: InputMaybe<Scalars['Int']['input']>;
  /** The fields to order by. */
  readonly orderBys?: InputMaybe<ReadonlyArray<FollowsByAccountInputSortBy>>;
  /** An "OR" filter by follow source. */
  readonly sources?: InputMaybe<ReadonlyArray<FollowSource>>;
  /** An "OR" filter by follow status. */
  readonly statuses?: InputMaybe<ReadonlyArray<FollowStatus>>;
  /** If the result shall only include unique follows. */
  readonly uniqueFollows?: InputMaybe<Scalars['Boolean']['input']>;
};

export type FollowsByAccountInputSortBy = {
  readonly direction: LtFollowersApiOrderByDirection;
  readonly key: FollowQueryOrderByKey;
};

export type FollowsByAccountOutput = {
  readonly __typename: 'FollowsByAccountOutput';
  readonly followsPage?: Maybe<FollowerFollowModelPage>;
};

export type FollowsByFollowerInput = {
  /** The after-cursor to continue from. */
  readonly after?: InputMaybe<Scalars['String']['input']>;
  /** The before-cursor to continue from. */
  readonly before?: InputMaybe<Scalars['String']['input']>;
  readonly followerId: Scalars['String']['input'];
  readonly limit?: InputMaybe<Scalars['Int']['input']>;
  /** The fields to order by. */
  readonly orderBys?: InputMaybe<ReadonlyArray<FollowsByFollowerInputSortBy>>;
  /** An "OR" filter by follow source. */
  readonly sources?: InputMaybe<ReadonlyArray<FollowSource>>;
};

export type FollowsByFollowerInputSortBy = {
  readonly direction: LtFollowersApiOrderByDirection;
  readonly key: FollowQueryOrderByKey;
};

export type FollowsByFollowerOutput = {
  readonly __typename: 'FollowsByFollowerOutput';
  readonly followsPage?: Maybe<FollowerFollowModelPage>;
};

export type FontSize = {
  readonly __typename: 'FontSize';
  readonly desktop: Scalars['String']['output'];
  readonly mobile: Scalars['String']['output'];
};

export type Footer = {
  readonly __typename: 'Footer';
  /** The color of the footer */
  readonly color?: Maybe<Scalars['String']['output']>;
  /** The URL of the custom footer logo asset */
  readonly logoUrl?: Maybe<Scalars['String']['output']>;
  /** The destination URL of the footer logo */
  readonly url?: Maybe<Scalars['String']['output']>;
};

export type FormAssociatedLinkModel = {
  readonly __typename: 'FormAssociatedLinkModel';
  /** The Monolith link ID associated with this form. */
  readonly linkId?: Maybe<Scalars['Int']['output']>;
  /** The link title associated with this form. */
  readonly title?: Maybe<Scalars['String']['output']>;
};

export type FormFieldModel = {
  readonly __typename: 'FormFieldModel';
  /** If true, this field must be required. */
  readonly disableOptional?: Maybe<Scalars['Boolean']['output']>;
  /** If true, this field cannot be removed from the form. */
  readonly disableRemove?: Maybe<Scalars['Boolean']['output']>;
  readonly id: Scalars['ID']['output'];
  readonly label: Scalars['String']['output'];
  readonly required: Scalars['Boolean']['output'];
  readonly schema: FormFieldSchemaModel;
};

export type FormFieldSchemaModel = {
  readonly __typename: 'FormFieldSchemaModel';
  /** Options for SELECT, or RADIO */
  readonly options?: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  /** If this is a system Predefined form field name */
  readonly predefinedFormField?: Maybe<FormPredefinedFormField>;
  readonly type: FormFieldType;
};

/** The type of form field */
export enum FormFieldType {
  Checkbox = 'CHECKBOX',
  Date = 'DATE',
  Email = 'EMAIL',
  Phone = 'PHONE',
  Radio = 'RADIO',
  Select = 'SELECT',
  Text = 'TEXT',
  Textarea = 'TEXTAREA'
}

export type FormLinkContext = {
  readonly __typename: 'FormLinkContext';
  readonly autoAdded?: Maybe<Scalars['Boolean']['output']>;
  readonly confirmationMessage?: Maybe<Scalars['String']['output']>;
  readonly emailRecipient?: Maybe<Scalars['String']['output']>;
  readonly fields?: Maybe<ReadonlyArray<Maybe<FormLinkField>>>;
  /** See FormTypeOptions for possible values. */
  readonly formType?: Maybe<Scalars['String']['output']>;
  /** See FormVersionOptions for possible values. */
  readonly formVersion?: Maybe<Scalars['String']['output']>;
  readonly integrationId?: Maybe<Scalars['String']['output']>;
  readonly linkDescription?: Maybe<Scalars['String']['output']>;
  readonly submissionMethod?: Maybe<Scalars['String']['output']>;
  readonly termsConditions?: Maybe<Scalars['Boolean']['output']>;
  readonly termsConditionsLabel?: Maybe<Scalars['String']['output']>;
  readonly termsConditionsUrl?: Maybe<Scalars['String']['output']>;
  readonly v2FormId?: Maybe<Scalars['String']['output']>;
};

export type FormLinkContextInput = {
  readonly autoAdded?: InputMaybe<Scalars['Boolean']['input']>;
  readonly confirmationMessage?: InputMaybe<Scalars['String']['input']>;
  readonly emailRecipient?: InputMaybe<Scalars['String']['input']>;
  readonly fields?: InputMaybe<ReadonlyArray<InputMaybe<FormLinkFieldInput>>>;
  readonly formType?: InputMaybe<Scalars['String']['input']>;
  readonly integrationId?: InputMaybe<Scalars['String']['input']>;
  readonly linkDescription?: InputMaybe<Scalars['String']['input']>;
  readonly submissionMethod?: InputMaybe<Scalars['String']['input']>;
  readonly termsConditions?: InputMaybe<Scalars['Boolean']['input']>;
  readonly termsConditionsLabel?: InputMaybe<Scalars['String']['input']>;
  readonly termsConditionsUrl?: InputMaybe<Scalars['String']['input']>;
  readonly v2FormId?: InputMaybe<Scalars['String']['input']>;
};

export type FormLinkField = {
  readonly __typename: 'FormLinkField';
  readonly enabled?: Maybe<Scalars['Boolean']['output']>;
  readonly label?: Maybe<Scalars['String']['output']>;
  readonly name?: Maybe<Scalars['String']['output']>;
  readonly required?: Maybe<Scalars['Boolean']['output']>;
  readonly type?: Maybe<Scalars['String']['output']>;
};

export type FormLinkFieldInput = {
  readonly enabled?: InputMaybe<Scalars['Boolean']['input']>;
  readonly label?: InputMaybe<Scalars['String']['input']>;
  readonly name?: InputMaybe<Scalars['String']['input']>;
  readonly required?: InputMaybe<Scalars['Boolean']['input']>;
  readonly type?: InputMaybe<Scalars['String']['input']>;
};

export type FormModel = {
  readonly __typename: 'FormModel';
  readonly accountUuid: Scalars['String']['output'];
  /** The link metadata if this form is associated with. */
  readonly associatedLink?: Maybe<FormAssociatedLinkModel>;
  readonly createdAt?: Maybe<Scalars['DateTime']['output']>;
  readonly customTermsConditionsEnabled?: Maybe<Scalars['Boolean']['output']>;
  readonly customTermsConditionsLinkLabel?: Maybe<Scalars['String']['output']>;
  readonly customTermsConditionsLinkUrl?: Maybe<Scalars['String']['output']>;
  readonly description?: Maybe<Scalars['String']['output']>;
  readonly fields: ReadonlyArray<FormFieldModel>;
  readonly id: Scalars['ID']['output'];
  /** When rendering the form, if the agree-to-share checkbox is visible. */
  readonly isAgreeToShareVisible?: Maybe<Scalars['Boolean']['output']>;
  readonly name?: Maybe<Scalars['String']['output']>;
  readonly submissionCount?: Maybe<Scalars['Int']['output']>;
  readonly thankYouMessage?: Maybe<Scalars['String']['output']>;
  readonly type: LtFollowersFormType;
  readonly updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type FormModelEdge = {
  readonly __typename: 'FormModelEdge';
  readonly cursor?: Maybe<Scalars['String']['output']>;
  readonly node: FormModel;
};

export type FormModelPage = {
  readonly __typename: 'FormModelPage';
  readonly edges?: Maybe<ReadonlyArray<FormModelEdge>>;
  readonly pageInfo?: Maybe<LtFollowersApiPageInfo>;
};

/** Linktree predefined form fields */
export enum FormPredefinedFormField {
  Country = 'COUNTRY',
  DateOfBirth = 'DATE_OF_BIRTH',
  Email = 'EMAIL',
  Message = 'MESSAGE',
  Name = 'NAME',
  Phone = 'PHONE'
}

/** The field to order by for form query. */
export enum FormQueryOrderByKey {
  CreatedAt = 'CREATED_AT',
  SubmissionCount = 'SUBMISSION_COUNT'
}

export type FormSubmissionFieldModel = {
  readonly __typename: 'FormSubmissionFieldModel';
  readonly fieldId: Scalars['String']['output'];
  readonly label?: Maybe<Scalars['String']['output']>;
  readonly predefinedFormField?: Maybe<FormPredefinedFormField>;
  readonly type?: Maybe<FormFieldType>;
  readonly value?: Maybe<Scalars['JSON']['output']>;
};

export type FormSubmissionModel = {
  readonly __typename: 'FormSubmissionModel';
  readonly accountUuid: Scalars['String']['output'];
  readonly createdAt: Scalars['DateTime']['output'];
  readonly fields?: Maybe<ReadonlyArray<FormSubmissionFieldModel>>;
  readonly followerId?: Maybe<Scalars['String']['output']>;
  readonly formId: Scalars['String']['output'];
  readonly submissionId: Scalars['String']['output'];
};

export type FormTemplateFieldModel = {
  readonly __typename: 'FormTemplateFieldModel';
  /** If true, this field must be required. */
  readonly disableOptional?: Maybe<Scalars['Boolean']['output']>;
  /** If true, this field cannot be removed from the form. */
  readonly disableRemove?: Maybe<Scalars['Boolean']['output']>;
  readonly label?: Maybe<Scalars['String']['output']>;
  readonly required: Scalars['Boolean']['output'];
  readonly schema: FormFieldSchemaModel;
};

export type FormTemplateModel = {
  readonly __typename: 'FormTemplateModel';
  readonly fields?: Maybe<ReadonlyArray<FormTemplateFieldModel>>;
  readonly templateName: Scalars['String']['output'];
};

export enum Frequency {
  Daily = 'DAILY',
  Instant = 'INSTANT'
}

export type GateRule = {
  readonly __typename: 'GateRule';
  readonly activeOrder?: Maybe<ReadonlyArray<Maybe<Scalars['String']['output']>>>;
  readonly age?: Maybe<AgeGateRule>;
  readonly blocked?: Maybe<ReadonlyArray<Maybe<Scalars['String']['output']>>>;
  readonly hash?: Maybe<Scalars['String']['output']>;
  readonly nft?: Maybe<NftGateRule>;
  readonly passcode?: Maybe<PasscodeGateRule>;
  readonly password?: Maybe<PasswordGateRule>;
  readonly payment?: Maybe<PaymentGateRule>;
  readonly sensitiveContent?: Maybe<SensitiveContentGateRule>;
  readonly subscribed?: Maybe<SubscribedGateRule>;
  readonly unlocked?: Maybe<ReadonlyArray<Maybe<Scalars['String']['output']>>>;
  readonly wall?: Maybe<WallGateRule>;
};

export type GateRuleInput = {
  readonly activeOrder?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']['input']>>>;
  readonly age?: InputMaybe<AgeGateRuleInput>;
  readonly nft?: InputMaybe<NftGateRuleInput>;
  readonly passcode?: InputMaybe<PasscodeGateRuleInput>;
  readonly password?: InputMaybe<PasswordGateRuleInput>;
  readonly payment?: InputMaybe<PaymentGateRuleInput>;
  readonly sensitiveContent?: InputMaybe<SensitiveContentGateRuleInput>;
  readonly subscribed?: InputMaybe<SubscribedGateRuleInput>;
};

export enum GateType {
  Age = 'AGE',
  Password = 'PASSWORD'
}

export type GetAccountEntitlementsQueryInput = {
  readonly accountUuid?: InputMaybe<Scalars['String']['input']>;
  readonly entitlementNames: ReadonlyArray<AccountEntitlementName>;
};

export type GetAccountEntitlementsQueryResult = {
  readonly __typename: 'GetAccountEntitlementsQueryResult';
  readonly AdminAccounts?: Maybe<AccountEntitlement>;
  readonly AffiliateProgram?: Maybe<AccountEntitlement>;
  readonly AiProfileFilterStyle?: Maybe<AccountEntitlement>;
  readonly AmazonAffiliate?: Maybe<AccountEntitlement>;
  readonly AnalyticsExport?: Maybe<AccountEntitlement>;
  readonly AnalyticsExtendedDateRange90Days?: Maybe<AccountEntitlement>;
  readonly AnalyticsExtendedDateRange365Days?: Maybe<AccountEntitlement>;
  readonly AnalyticsIntegrations?: Maybe<AccountEntitlement>;
  readonly AnimatedLinks?: Maybe<AccountEntitlement>;
  readonly AudienceAnalytics?: Maybe<AccountEntitlement>;
  readonly AudienceGeographicData?: Maybe<AccountEntitlement>;
  readonly AudienceIntegrationGoogleSheets?: Maybe<AccountEntitlement>;
  readonly AudienceIntegrationKit?: Maybe<AccountEntitlement>;
  readonly AudienceIntegrationKlaviyo?: Maybe<AccountEntitlement>;
  readonly AudienceIntegrationMailchimp?: Maybe<AccountEntitlement>;
  readonly AudienceTrafficSource?: Maybe<AccountEntitlement>;
  readonly AvatarStyle?: Maybe<AccountEntitlement>;
  readonly Backgrounds?: Maybe<AccountEntitlement>;
  readonly BaseThemes?: Maybe<AccountEntitlement>;
  readonly Buttons?: Maybe<AccountEntitlement>;
  readonly CollectionLayout?: Maybe<AccountEntitlement>;
  readonly Colorways?: Maybe<AccountEntitlement>;
  readonly CreateFeaturedLink?: Maybe<AccountEntitlement>;
  readonly CustomQrCode?: Maybe<AccountEntitlement>;
  readonly CustomTandC?: Maybe<AccountEntitlement>;
  readonly FirstPartyForms?: Maybe<AccountEntitlement>;
  readonly FirstPartySellerFee?: Maybe<AccountEntitlement>;
  readonly Fonts?: Maybe<AccountEntitlement>;
  readonly GlowUp?: Maybe<AccountEntitlement>;
  readonly Gradients?: Maybe<AccountEntitlement>;
  readonly HeadingFont?: Maybe<AccountEntitlement>;
  readonly HeroImage?: Maybe<AccountEntitlement>;
  readonly HideLinktreeLogo?: Maybe<AccountEntitlement>;
  readonly InsightsAI?: Maybe<AccountEntitlement>;
  readonly InsightsActivityFilter?: Maybe<AccountEntitlement>;
  readonly InsightsAudienceInterests?: Maybe<AccountEntitlement>;
  readonly InsightsContacts?: Maybe<AccountEntitlement>;
  readonly InsightsContent?: Maybe<AccountEntitlement>;
  readonly InstagramDirectMessage?: Maybe<AccountEntitlement>;
  readonly LeapLinks?: Maybe<AccountEntitlement>;
  readonly LinkAnalytics?: Maybe<AccountEntitlement>;
  readonly LinktreeInsights?: Maybe<AccountEntitlement>;
  readonly MailingListIntegration?: Maybe<AccountEntitlement>;
  readonly MobileAppLinkApp?: Maybe<AccountEntitlement>;
  readonly PasscodeGate?: Maybe<AccountEntitlement>;
  readonly PasswordGate?: Maybe<AccountEntitlement>;
  readonly Redirect?: Maybe<AccountEntitlement>;
  readonly RssFeed?: Maybe<AccountEntitlement>;
  readonly SEOAccess?: Maybe<AccountEntitlement>;
  readonly ScheduledLinkNotifications?: Maybe<AccountEntitlement>;
  readonly ScheduledLinks?: Maybe<AccountEntitlement>;
  readonly SocialPlanner?: Maybe<AccountEntitlement>;
  readonly StylePresets?: Maybe<AccountEntitlement>;
  readonly SubscriberDetails?: Maybe<AccountEntitlement>;
  readonly TreeLinkShortenerBackHalves?: Maybe<AccountEntitlement>;
  readonly TreeLinkShortenerSkipsContent?: Maybe<AccountEntitlement>;
  readonly TwitterProfileEmbed?: Maybe<AccountEntitlement>;
  readonly TwitterStatusEmbed?: Maybe<AccountEntitlement>;
  readonly YoutubeEmbed?: Maybe<AccountEntitlement>;
};

export type GetAccountStatsigQueryInput = {
  readonly accountUuid: Scalars['String']['input'];
  readonly cloudDynamicConfigs?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']['input']>>>;
  readonly cloudExperiments?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']['input']>>>;
  readonly cloudFeatureGates?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']['input']>>>;
  readonly warehouseNativeDynamicConfigs?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']['input']>>>;
  readonly warehouseNativeExperiments?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']['input']>>>;
  readonly warehouseNativeFeatureGates?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']['input']>>>;
};

export type GetAccountsInvitableToWorkspaceResult = {
  readonly __typename: 'GetAccountsInvitableToWorkspaceResult';
  readonly accounts: ReadonlyArray<AccountInvitableToWorkspace>;
};

export type GetAudienceManagerSubscriberTableSchemaInput = {
  readonly accountUuid: Scalars['String']['input'];
};

export type GetAudienceManagerSubscriberTableSchemaOutput = {
  readonly __typename: 'GetAudienceManagerSubscriberTableSchemaOutput';
  readonly columnsPage?: Maybe<AudienceManagerSubscriberTableColumnModelPage>;
};

export type GetBaseThemesQueryInput = {
  readonly themeKeys?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']['input']>>>;
};

export type GetBraintreeTokenResult = {
  readonly __typename: 'GetBraintreeTokenResult';
  readonly token?: Maybe<Scalars['String']['output']>;
};

export type GetCanvaAssetUploadJobInput = {
  readonly accountUuid: Scalars['String']['input'];
  readonly integrationId: Scalars['String']['input'];
  readonly jobId: Scalars['String']['input'];
};

export type GetCanvaDesignExportJobInput = {
  readonly accountUuid: Scalars['String']['input'];
  readonly integrationId: Scalars['String']['input'];
  readonly jobId: Scalars['String']['input'];
};

export type GetCommerceCommissionsByAccountUuidResult = {
  readonly __typename: 'GetCommerceCommissionsByAccountUuidResult';
  readonly limit?: Maybe<Scalars['Int']['output']>;
  readonly records: ReadonlyArray<Commission>;
  readonly skip?: Maybe<Scalars['Int']['output']>;
  readonly summary: CommissionSummary;
  readonly total: Scalars['Int']['output'];
};

export type GetCouponQueryResponse = {
  readonly __typename: 'GetCouponQueryResponse';
  readonly discountAmount?: Maybe<Scalars['Int']['output']>;
  readonly discountPercentage?: Maybe<Scalars['Int']['output']>;
  readonly discountPlanPrice: Scalars['Int']['output'];
  readonly discountType?: Maybe<Scalars['String']['output']>;
  readonly durationMonths?: Maybe<Scalars['Int']['output']>;
  readonly durationType: Scalars['String']['output'];
  readonly durationYears?: Maybe<Scalars['Int']['output']>;
  readonly formattedDiscountPlanPrice: Scalars['String']['output'];
  readonly formattedSavings: Scalars['String']['output'];
  readonly hidePaymentFields: Scalars['Boolean']['output'];
  readonly id: Scalars['String']['output'];
  readonly isForever: Scalars['Boolean']['output'];
  readonly isFreeForever: Scalars['Boolean']['output'];
  readonly isOneTime: Scalars['Boolean']['output'];
  readonly trialDays: Scalars['Int']['output'];
};

export type GetFollowInput = {
  readonly email?: InputMaybe<Scalars['String']['input']>;
  readonly phone?: InputMaybe<Scalars['String']['input']>;
  readonly uuid: Scalars['String']['input'];
};

export type GetFollowSourceInput = {
  readonly accountUuid: Scalars['String']['input'];
  /** When the follow-source is COMMUNITY_SUBSCRIPTION. This is the Monolith Link ID associated with the community subscription that the visitor subscribes to. */
  readonly followCommunitySubscriptionAssociatedLinkId?: InputMaybe<Scalars['Int']['input']>;
  /** When the follow-source is DIGITAL_DOWNLOAD. This is the Monolith Link ID associated with the digital download that the visitor downloads. */
  readonly followDigitalDownloadAssociatedLinkId?: InputMaybe<Scalars['Int']['input']>;
  /** When the follow-source is FORM_SUBMISSION. This is the Monolith Link ID associated with the form that the visitor submits. */
  readonly followFormAssociatedLinkId?: InputMaybe<Scalars['Int']['input']>;
  /** When the follow-source is KAJABI_COURSE. This is the Monolith Link ID associated with the Kajabi course that the visitor subscribes to. */
  readonly followKajabiCourseAssociatedLinkId?: InputMaybe<Scalars['Int']['input']>;
  /** When the follow-source is LINK_SUBSCRIBE_UNLOCK. This is the Monolith Link ID of the link that the visitor unlocks to subscribe. */
  readonly followSubscribeLockLinkId?: InputMaybe<Scalars['Int']['input']>;
};

export type GetFollowSourceOutput = {
  readonly __typename: 'GetFollowSourceOutput';
  readonly followSource?: Maybe<FollowSourceModel>;
};

export type GetFollowerAssetsInput = {
  readonly followerId: Scalars['String']['input'];
  readonly listingId: Scalars['String']['input'];
};

export type GetFollowerAssetsOutput = {
  readonly __typename: 'GetFollowerAssetsOutput';
  readonly asset?: Maybe<Asset>;
};

export type GetFollowerByEmailInput = {
  /** Email address of the follower to look up */
  readonly email: Scalars['String']['input'];
};

export type GetFollowerNotificationSettingsInput = {
  readonly email?: InputMaybe<Scalars['String']['input']>;
  readonly phone?: InputMaybe<Scalars['String']['input']>;
  readonly uuid?: InputMaybe<Scalars['String']['input']>;
};

export type GetFormInput = {
  readonly accountUuid?: InputMaybe<Scalars['String']['input']>;
  /** Form ID */
  readonly id: Scalars['String']['input'];
};

export type GetFormOutput = {
  readonly __typename: 'GetFormOutput';
  readonly form?: Maybe<FormModel>;
};

export type GetFormTemplatesOutput = {
  readonly __typename: 'GetFormTemplatesOutput';
  readonly formTemplates?: Maybe<ReadonlyArray<FormTemplateModel>>;
};

export type GetFormsByAccountInput = {
  readonly accountUuid: Scalars['String']['input'];
  /** The after-cursor to continue from. */
  readonly after?: InputMaybe<Scalars['String']['input']>;
  /** The before-cursor to continue from. */
  readonly before?: InputMaybe<Scalars['String']['input']>;
  /** Include the total count of the query in the response. */
  readonly includeTotalCount?: InputMaybe<Scalars['Boolean']['input']>;
  readonly limit?: InputMaybe<Scalars['Int']['input']>;
  /** The fields to order by. */
  readonly orderBys?: InputMaybe<ReadonlyArray<GetFormsByAccountInputOrderBy>>;
};

export type GetFormsByAccountInputOrderBy = {
  readonly direction: LtFollowersApiOrderByDirection;
  readonly key: FormQueryOrderByKey;
};

export type GetFormsByAccountOutput = {
  readonly __typename: 'GetFormsByAccountOutput';
  readonly formsPage?: Maybe<FormModelPage>;
};

export type GetGoogleYouTubeChannelResult = {
  readonly __typename: 'GetGoogleYouTubeChannelResult';
  readonly channelId?: Maybe<Scalars['String']['output']>;
  readonly description?: Maybe<Scalars['String']['output']>;
  readonly publishedAt?: Maybe<Scalars['String']['output']>;
  readonly statistics?: Maybe<YouTubeChannelStatistics>;
  readonly thumbnailUrl?: Maybe<Scalars['String']['output']>;
  readonly title?: Maybe<Scalars['String']['output']>;
};

export type GetIgdmSendsForPeriodInput = {
  readonly accountUuid: Scalars['String']['input'];
  readonly periodEnd: Scalars['DateTime']['input'];
  readonly periodStart: Scalars['DateTime']['input'];
  readonly socialNotificationConfigId?: InputMaybe<Scalars['String']['input']>;
};

export type GetInsights = {
  readonly __typename: 'GetInsights';
  readonly baseColor?: Maybe<Scalars['String']['output']>;
  readonly insights?: Maybe<ReadonlyArray<Insight>>;
};

export type GetInstagramBusinessAccountMediaMetricResult = {
  readonly __typename: 'GetInstagramBusinessAccountMediaMetricResult';
  readonly comments?: Maybe<Scalars['Int']['output']>;
  readonly id?: Maybe<Scalars['String']['output']>;
  readonly likes?: Maybe<Scalars['Int']['output']>;
  readonly reach?: Maybe<Scalars['Int']['output']>;
  readonly shares?: Maybe<Scalars['Int']['output']>;
};

export type GetInstagramBusinessAccountMetricsResult = {
  readonly __typename: 'GetInstagramBusinessAccountMetricsResult';
  readonly audienceAges?: Maybe<ReadonlyArray<Maybe<GetInstagramBusinessProfileAgeResult>>>;
  readonly audienceCountries?: Maybe<ReadonlyArray<Maybe<GetInstagramBusinessProfileCountryResult>>>;
  readonly audienceGenders?: Maybe<ReadonlyArray<Maybe<GetInstagramBusinessProfileGenderResult>>>;
};

export type GetInstagramBusinessAccountPost = {
  readonly __typename: 'GetInstagramBusinessAccountPost';
  readonly caption?: Maybe<Scalars['String']['output']>;
  readonly commentsCount?: Maybe<Scalars['Int']['output']>;
  readonly id?: Maybe<Scalars['String']['output']>;
  readonly insights?: Maybe<GetInstagramBusinessAccountMediaMetricResult>;
  readonly likesCount?: Maybe<Scalars['Int']['output']>;
  readonly media?: Maybe<ReadonlyArray<Maybe<GetInstagramBusinessAccountPostMedia>>>;
  readonly mediaType?: Maybe<Scalars['String']['output']>;
  readonly mediaUrl?: Maybe<Scalars['String']['output']>;
  readonly postType?: Maybe<Scalars['String']['output']>;
  readonly shortCode?: Maybe<Scalars['String']['output']>;
  readonly thumbnailUrl?: Maybe<Scalars['String']['output']>;
  readonly timestamp?: Maybe<Scalars['String']['output']>;
  readonly url?: Maybe<Scalars['String']['output']>;
};

export type GetInstagramBusinessAccountPostMedia = {
  readonly __typename: 'GetInstagramBusinessAccountPostMedia';
  readonly thumbnailUrl?: Maybe<Scalars['String']['output']>;
  readonly url?: Maybe<Scalars['String']['output']>;
};

export type GetInstagramBusinessAccountResult = {
  readonly __typename: 'GetInstagramBusinessAccountResult';
  readonly insights?: Maybe<GetInstagramBusinessAccountMetricsResult>;
  readonly posts?: Maybe<ReadonlyArray<Maybe<GetInstagramBusinessAccountPost>>>;
  readonly user?: Maybe<GetInstagramBusinessAccountUser>;
};


export type GetInstagramBusinessAccountResultPostsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  instagramMediaType?: InputMaybe<InstagramMediaType>;
  numberOfPostsToFetch?: InputMaybe<Scalars['Int']['input']>;
};

export type GetInstagramBusinessAccountUser = {
  readonly __typename: 'GetInstagramBusinessAccountUser';
  readonly caption?: Maybe<Scalars['String']['output']>;
  readonly followersCount?: Maybe<Scalars['Int']['output']>;
  readonly id?: Maybe<Scalars['String']['output']>;
  readonly mediaCount?: Maybe<Scalars['Int']['output']>;
  readonly profilePictureUrl?: Maybe<Scalars['String']['output']>;
  readonly username?: Maybe<Scalars['String']['output']>;
};

export type GetInstagramBusinessProfileAgeResult = {
  readonly __typename: 'GetInstagramBusinessProfileAgeResult';
  readonly age?: Maybe<Scalars['String']['output']>;
  readonly percentage?: Maybe<Scalars['Int']['output']>;
};

export type GetInstagramBusinessProfileCountryResult = {
  readonly __typename: 'GetInstagramBusinessProfileCountryResult';
  readonly country?: Maybe<Scalars['String']['output']>;
  readonly percentage?: Maybe<Scalars['Int']['output']>;
};

export type GetInstagramBusinessProfileGenderResult = {
  readonly __typename: 'GetInstagramBusinessProfileGenderResult';
  readonly gender?: Maybe<Scalars['String']['output']>;
  readonly percentage?: Maybe<Scalars['Int']['output']>;
};

export type GetMfaAccessUrlResult = {
  readonly __typename: 'GetMfaAccessUrlResult';
  readonly mfaAccessUrl: Scalars['String']['output'];
};

export type GetMfaEnrolmentUrlResult = {
  readonly __typename: 'GetMfaEnrolmentUrlResult';
  readonly mfaEnrolmentUrl: Scalars['String']['output'];
};

export type GetNotificationSettingsInput = {
  readonly uuid: Scalars['String']['input'];
};

export type GetPlansWithPricesResponse = {
  readonly __typename: 'GetPlansWithPricesResponse';
  readonly currency: Scalars['String']['output'];
  readonly currencySymbol: Scalars['String']['output'];
  readonly displayName: Scalars['String']['output'];
  readonly formattedPrice: Scalars['String']['output'];
  readonly formattedPriceFrequency: Scalars['String']['output'];
  readonly frequency: Scalars['String']['output'];
  readonly id: Scalars['String']['output'];
  readonly price: Scalars['Int']['output'];
  readonly tier: Scalars['String']['output'];
};

export type GetShortLinkChannelBreakdown = {
  readonly __typename: 'GetShortLinkChannelBreakdown';
  readonly breakdown: ReadonlyArray<ShortLinkChannelBreakdownRecord>;
  readonly count: Scalars['Int']['output'];
  readonly records: ReadonlyArray<ShortLinkChannelBreakdownRecord>;
};

export type GetShortLinkCityBreakdown = {
  readonly __typename: 'GetShortLinkCityBreakdown';
  readonly breakdown: ReadonlyArray<ShortLinkCityBreakdownRecord>;
  readonly count: Scalars['Int']['output'];
  readonly records: ReadonlyArray<ShortLinkCityBreakdownRecord>;
};

export type GetShortLinkCountryBreakdown = {
  readonly __typename: 'GetShortLinkCountryBreakdown';
  readonly breakdown: ReadonlyArray<ShortLinkCountryBreakdownRecord>;
  readonly count: Scalars['Int']['output'];
  readonly records: ReadonlyArray<ShortLinkCountryBreakdownRecord>;
};

export type GetShortLinkDeviceBreakdown = {
  readonly __typename: 'GetShortLinkDeviceBreakdown';
  readonly breakdown: ReadonlyArray<ShortLinkDeviceBreakdownRecord>;
  readonly count: Scalars['Int']['output'];
  readonly records: ReadonlyArray<ShortLinkDeviceBreakdownRecord>;
};

export type GetShortLinkReferrerBreakdown = {
  readonly __typename: 'GetShortLinkReferrerBreakdown';
  readonly breakdown: ReadonlyArray<ShortLinkReferrerBreakdownRecord>;
  readonly count: Scalars['Int']['output'];
  readonly records: ReadonlyArray<ShortLinkReferrerBreakdownRecord>;
};

export type GetShortLinkTraffic = {
  readonly __typename: 'GetShortLinkTraffic';
  readonly ticks: ReadonlyArray<ShortLinkTrafficTick>;
};

export type GetShortLinkTrafficDaily = {
  readonly __typename: 'GetShortLinkTrafficDaily';
  readonly ticks: ReadonlyArray<ShortLinkTrafficDailyTick>;
};

export type GetShortLinkTrafficLifetime = {
  readonly __typename: 'GetShortLinkTrafficLifetime';
  readonly tick: ShortLinkTrafficLifetimeTick;
  readonly trend?: Maybe<ShortLinkTrafficTrend>;
};

export type GetSocialNotificationConfigByAccountInput = {
  readonly accountUuid: Scalars['String']['input'];
  /** The after-cursor to continue from. */
  readonly after?: InputMaybe<Scalars['String']['input']>;
  /** The before-cursor to continue from. */
  readonly before?: InputMaybe<Scalars['String']['input']>;
  /** If set, include co-trigger information in the result */
  readonly includeCoTrigger?: InputMaybe<Scalars['Boolean']['input']>;
  /** If set, only return the configs that has "postNextAliveTimestampAfter" in the trigger, and haven't been resolved yet. */
  readonly includeOnlyPostNextAliveTimestampAfter?: InputMaybe<Scalars['Boolean']['input']>;
  /** If set, include the total count of configs meeting the query criteria in the database. */
  readonly includeTotalCount?: InputMaybe<Scalars['Boolean']['input']>;
  /** Limit the number of configs returned */
  readonly limit?: InputMaybe<Scalars['Int']['input']>;
  /** The fields to order by. */
  readonly orderBys?: InputMaybe<ReadonlyArray<SocialNotificationConfigSortBy>>;
  /** Result filter by status(es). If not set or empty, no filter will be applied. */
  readonly status?: InputMaybe<ReadonlyArray<Scalars['String']['input']>>;
};

export type GetSocialNotificationConfigByIdInput = {
  readonly accountUuid: Scalars['String']['input'];
  readonly id: Scalars['String']['input'];
};

export type GetSocialNotificationConfigByLinkIdInput = {
  readonly accountUuid: Scalars['String']['input'];
  readonly associatedLinkId: Scalars['Int']['input'];
};

export type GetSocialNotificationConfigOutput = {
  readonly __typename: 'GetSocialNotificationConfigOutput';
  readonly configs?: Maybe<ReadonlyArray<SocialNotificationConfigModel>>;
  readonly pageInfo?: Maybe<LtFollowersApiPageInfo>;
};

export type GetSponsoredOfferBySponsorshipIdInput = {
  readonly sponsorshipId: Scalars['String']['input'];
  readonly username: Scalars['String']['input'];
};

export type GetSponsoredOffersBySponsorshipIdsInput = {
  readonly accountUuid?: InputMaybe<Scalars['String']['input']>;
  readonly sponsorshipIds: ReadonlyArray<Scalars['String']['input']>;
  readonly username: Scalars['String']['input'];
};

export type GetSubscriptionAddOnCheckoutUrlInput = {
  readonly name: Scalars['String']['input'];
  readonly quantity: Scalars['Int']['input'];
};

export type GetSubscriptionAddOnCheckoutUrlResult = {
  readonly __typename: 'GetSubscriptionAddOnCheckoutURLResult';
  readonly url: Scalars['String']['output'];
};

export type GetTikTokBusinessMetricsResult = {
  readonly __typename: 'GetTikTokBusinessMetricsResult';
  readonly audienceCountries?: Maybe<Scalars['String']['output']>;
  readonly averageTimeWatched?: Maybe<Scalars['Float']['output']>;
  readonly caption?: Maybe<Scalars['String']['output']>;
  readonly comments?: Maybe<Scalars['Int']['output']>;
  readonly createTime?: Maybe<Scalars['Int']['output']>;
  readonly embedUrl?: Maybe<Scalars['String']['output']>;
  readonly fullVideoWatchedRate?: Maybe<Scalars['Float']['output']>;
  readonly impressionSources?: Maybe<Scalars['String']['output']>;
  readonly itemId?: Maybe<Scalars['String']['output']>;
  readonly likes?: Maybe<Scalars['Int']['output']>;
  readonly reach?: Maybe<Scalars['Int']['output']>;
  readonly shareUrl?: Maybe<Scalars['String']['output']>;
  readonly shares?: Maybe<Scalars['Int']['output']>;
  readonly thumbnailUrl?: Maybe<Scalars['String']['output']>;
  readonly totalTimeWatched?: Maybe<Scalars['Int']['output']>;
  readonly videoDuration?: Maybe<Scalars['Int']['output']>;
  readonly videoViews?: Maybe<Scalars['Int']['output']>;
};

export type GetTikTokBusinessProfileCountriesResult = {
  readonly __typename: 'GetTikTokBusinessProfileCountriesResult';
  readonly country?: Maybe<Scalars['String']['output']>;
  readonly percentage?: Maybe<Scalars['Int']['output']>;
};

export type GetTikTokBusinessProfileGendersResult = {
  readonly __typename: 'GetTikTokBusinessProfileGendersResult';
  readonly gender?: Maybe<Scalars['String']['output']>;
  readonly percentage?: Maybe<Scalars['Int']['output']>;
};

export type GetTikTokBusinessProfileResult = {
  readonly __typename: 'GetTikTokBusinessProfileResult';
  readonly audienceCountries?: Maybe<ReadonlyArray<Maybe<GetTikTokBusinessProfileCountriesResult>>>;
  readonly audienceGenders?: Maybe<ReadonlyArray<Maybe<GetTikTokBusinessProfileGendersResult>>>;
  readonly displayName?: Maybe<Scalars['String']['output']>;
  readonly followersCount?: Maybe<Scalars['String']['output']>;
  readonly profilePictureUrl?: Maybe<Scalars['String']['output']>;
  readonly username?: Maybe<Scalars['String']['output']>;
  readonly videos?: Maybe<ReadonlyArray<Maybe<GetTikTokBusinessMetricsResult>>>;
};

export type GetTikTokBusinessVideosWithMetricsResult = {
  readonly __typename: 'GetTikTokBusinessVideosWithMetricsResult';
  readonly averageComments: Scalars['Int']['output'];
  readonly averageEngagement: Scalars['Float']['output'];
  readonly averageLikes: Scalars['Int']['output'];
  readonly averageReach: Scalars['Int']['output'];
  readonly videos?: Maybe<ReadonlyArray<Maybe<GetTikTokBusinessMetricsResult>>>;
};

export type GetTikTokProfileResult = {
  readonly __typename: 'GetTikTokProfileResult';
  readonly profile?: Maybe<TikTokProfile>;
  readonly videos?: Maybe<ReadonlyArray<Maybe<TikTokVideo>>>;
};

export type GetTikTokProfilesResult = {
  readonly __typename: 'GetTikTokProfilesResult';
  readonly displayName?: Maybe<Scalars['String']['output']>;
  readonly expiresIn?: Maybe<Scalars['Int']['output']>;
  readonly id?: Maybe<Scalars['String']['output']>;
  readonly status?: Maybe<Scalars['String']['output']>;
  readonly type?: Maybe<Scalars['String']['output']>;
};

export type GetTikTokVideosResult = {
  readonly __typename: 'GetTikTokVideosResult';
  readonly cursor?: Maybe<Scalars['String']['output']>;
  readonly hasMore?: Maybe<Scalars['Boolean']['output']>;
  readonly videos?: Maybe<ReadonlyArray<Maybe<TikTokVideo>>>;
};

export type GetUserEntitlementsQueryInput = {
  readonly entitlementNames: ReadonlyArray<UserEntitlementName>;
};

export type GetUserEntitlementsQueryResult = {
  readonly __typename: 'GetUserEntitlementsQueryResult';
  readonly MultiAccountCreation?: Maybe<UserEntitlement>;
  readonly PurchasePlannBrand?: Maybe<UserEntitlement>;
};

export type GetWorkspaceResult = {
  readonly __typename: 'GetWorkspaceResult';
  readonly workspace?: Maybe<Workspace>;
};

export type GlobalBillingResult = {
  readonly __typename: 'GlobalBillingResult';
  readonly subscriptions: ReadonlyArray<GlobalBillingSubscription>;
};

export type GlobalBillingSubscription = GlobalBillingSubscriptionV1 | GlobalBillingSubscriptionV2;

export type GlobalBillingSubscriptionV1 = {
  readonly __typename: 'GlobalBillingSubscriptionV1';
  readonly activeCardId?: Maybe<Scalars['Int']['output']>;
  readonly addOns: ReadonlyArray<SubscriptionAddOn>;
  readonly billingInfo?: Maybe<BillingInfo>;
  readonly cards: ReadonlyArray<Card>;
  readonly chargebeeSubscription?: Maybe<ChargebeeSubscription>;
  readonly containsOwnedAccount: Scalars['Boolean']['output'];
  readonly coupon?: Maybe<Coupon>;
  readonly couponId?: Maybe<Scalars['String']['output']>;
  readonly hasPaymentWarning: Scalars['Boolean']['output'];
  readonly hasScheduledChanges: Scalars['Boolean']['output'];
  readonly id: Scalars['Int']['output'];
  readonly isActive: Scalars['Boolean']['output'];
  readonly isNonRenewing: Scalars['Boolean']['output'];
  readonly isPaused: Scalars['Boolean']['output'];
  readonly isPausing: Scalars['Boolean']['output'];
  readonly isPro: Scalars['Boolean']['output'];
  readonly pauseEnd?: Maybe<Scalars['Date']['output']>;
  readonly pauseStart?: Maybe<Scalars['Date']['output']>;
  readonly paygateId?: Maybe<Scalars['String']['output']>;
  readonly paygateStatus?: Maybe<Scalars['String']['output']>;
  readonly paymentMethod: Scalars['String']['output'];
  readonly periodEnd?: Maybe<Scalars['Date']['output']>;
  readonly periodStart?: Maybe<Scalars['Date']['output']>;
  readonly plan?: Maybe<Scalars['String']['output']>;
  readonly platform?: Maybe<SubscriptionPlatform>;
  readonly subscriptionMigration?: Maybe<SubscriptionMigration>;
};

export type GlobalBillingSubscriptionV2 = {
  readonly __typename: 'GlobalBillingSubscriptionV2';
  readonly accountIds?: Maybe<ReadonlyArray<Maybe<Scalars['Int']['output']>>>;
  readonly accountLimit?: Maybe<Scalars['Int']['output']>;
  readonly activeAccount?: Maybe<Account>;
  readonly activeCardId?: Maybe<Scalars['Int']['output']>;
  readonly addOns?: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  readonly billingInfo?: Maybe<BillingInfo>;
  readonly card?: Maybe<Card>;
  readonly cards: ReadonlyArray<Card>;
  readonly chargebeeSubscription?: Maybe<ChargebeeSubscription>;
  readonly containsOwnedAccount: Scalars['Boolean']['output'];
  readonly coupon?: Maybe<Coupon>;
  readonly couponId?: Maybe<Scalars['String']['output']>;
  readonly hasPaymentWarning: Scalars['Boolean']['output'];
  readonly hasScheduledChanges: Scalars['Boolean']['output'];
  readonly id: Scalars['Int']['output'];
  readonly isActive: Scalars['Boolean']['output'];
  readonly isNonRenewing: Scalars['Boolean']['output'];
  readonly isPaused: Scalars['Boolean']['output'];
  readonly isPausing: Scalars['Boolean']['output'];
  readonly isPro: Scalars['Boolean']['output'];
  readonly pauseEnd?: Maybe<Scalars['Date']['output']>;
  readonly pauseStart?: Maybe<Scalars['Date']['output']>;
  readonly paygateId?: Maybe<Scalars['String']['output']>;
  readonly paygateStatus?: Maybe<Scalars['String']['output']>;
  readonly paymentMethod: Scalars['String']['output'];
  readonly periodEnd?: Maybe<Scalars['Date']['output']>;
  readonly periodStart?: Maybe<Scalars['Date']['output']>;
  readonly plan?: Maybe<Scalars['String']['output']>;
  readonly platform?: Maybe<SubscriptionPlatform>;
  readonly subscriptionAddOns: ReadonlyArray<SubscriptionAddOn>;
  readonly subscriptionMigration?: Maybe<SubscriptionMigration>;
};

export type GlowUp = {
  readonly __typename: 'GlowUp';
  readonly conversationId: Scalars['String']['output'];
  readonly data: ReadonlyArray<Maybe<GlowUpData>>;
  readonly status?: Maybe<GlowUpStatus>;
};

export type GlowUpData = {
  readonly __typename: 'GlowUpData';
  readonly incompleteGlowUpData?: Maybe<GlowUpIncompleteToolData>;
  readonly isToggled: Scalars['Boolean']['output'];
  readonly paidChange?: Maybe<GlowUpPaidChange>;
  readonly previousState?: Maybe<GlowUpPreviousStateUnion>;
  readonly toolId: Scalars['String']['output'];
  readonly type?: Maybe<GlowUpType>;
};

export type GlowUpIncompleteToolData = {
  readonly __typename: 'GlowUpIncompleteToolData';
  readonly message: Scalars['String']['output'];
};

export type GlowUpIncompleteToolInput = {
  readonly message: Scalars['String']['input'];
};

export type GlowUpInput = {
  readonly conversationId: Scalars['String']['input'];
  readonly incompleteGlowUpData?: InputMaybe<GlowUpIncompleteToolInput>;
  readonly toolId?: InputMaybe<Scalars['String']['input']>;
  readonly type?: InputMaybe<GlowUpType>;
};

export type GlowUpPaidChange = {
  readonly __typename: 'GlowUpPaidChange';
  readonly isPremium: Scalars['Boolean']['output'];
  readonly isPro: Scalars['Boolean']['output'];
};

export type GlowUpPreviousStateUnion = GlowUpToolAnimateLinkPreviousState | GlowUpToolCreateSocialLinkPreviousState | GlowUpToolFeaturedLayoutPreviousState | GlowUpToolHeroPreviousState | GlowUpToolRichMediaSpotifyPreviousState | GlowUpToolRichMediaYoutubePreviousState | GlowUpToolSetThumbnailPreviousState | GlowUpToolUpdateAppearancePreviousState | GlowUpToolUpdateBioPreviousState | GlowUpToolUpdateHeadingOptionsPreviousState | GlowUpToolUpdateLinkTitlePreviousState;

/** Status of the glowup process */
export enum GlowUpReturnStatus {
  Cancelled = 'CANCELLED',
  Completed = 'COMPLETED',
  Error = 'ERROR',
  Pending = 'PENDING'
}

export enum GlowUpStatus {
  Cancelled = 'CANCELLED',
  Completed = 'COMPLETED',
  Error = 'ERROR',
  Pending = 'PENDING'
}

export type GlowUpToolAnimateLinkPreviousState = {
  readonly __typename: 'GlowUpToolAnimateLinkPreviousState';
  readonly links: ReadonlyArray<Maybe<AnimateLinkPreviousStateLink>>;
};

export type GlowUpToolCreateSocialLinkPreviousState = {
  readonly __typename: 'GlowUpToolCreateSocialLinkPreviousState';
  readonly socialLinks: ReadonlyArray<Maybe<CreateSocialLinkPreviousStateLink>>;
};

export type GlowUpToolFeaturedLayoutPreviousState = {
  readonly __typename: 'GlowUpToolFeaturedLayoutPreviousState';
  readonly links: ReadonlyArray<Maybe<FeaturedLayoutPreviousStateLink>>;
};

export type GlowUpToolHeroPreviousState = {
  readonly __typename: 'GlowUpToolHeroPreviousState';
  readonly avatarMode: AvatarMode;
};

export type GlowUpToolRichMediaSpotifyPreviousState = {
  readonly __typename: 'GlowUpToolRichMediaSpotifyPreviousState';
  readonly links: ReadonlyArray<Maybe<RichMediaSpotifyPreviousStateLink>>;
};

export type GlowUpToolRichMediaYoutubePreviousState = {
  readonly __typename: 'GlowUpToolRichMediaYoutubePreviousState';
  readonly links: ReadonlyArray<Maybe<RichMediaYoutubePreviousStateLink>>;
};

export type GlowUpToolSetThumbnailPreviousState = {
  readonly __typename: 'GlowUpToolSetThumbnailPreviousState';
  readonly links: ReadonlyArray<Maybe<SetThumbnailPreviousStateLink>>;
};

export type GlowUpToolUpdateAppearancePreviousState = {
  readonly __typename: 'GlowUpToolUpdateAppearancePreviousState';
  readonly backgroundColor?: Maybe<Scalars['String']['output']>;
  readonly backgroundGradient?: Maybe<ReadonlyArray<Maybe<Scalars['String']['output']>>>;
  readonly backgroundGradientStyle?: Maybe<Scalars['String']['output']>;
  readonly backgroundHeroColor?: Maybe<Scalars['String']['output']>;
  readonly backgroundImage?: Maybe<Scalars['String']['output']>;
  readonly backgroundImageAttributes?: Maybe<Scalars['String']['output']>;
  readonly backgroundPoster?: Maybe<Scalars['String']['output']>;
  readonly backgroundStyle?: Maybe<Scalars['String']['output']>;
  readonly backgroundTint?: Maybe<Scalars['Int']['output']>;
  readonly buttonColor?: Maybe<Scalars['String']['output']>;
  readonly buttonCornerStyle?: Maybe<Scalars['String']['output']>;
  readonly buttonShadowStyle?: Maybe<Scalars['String']['output']>;
  readonly buttonStyle?: Maybe<Scalars['String']['output']>;
  readonly buttonTextColor?: Maybe<Scalars['String']['output']>;
  readonly canvaAvatarDesignId?: Maybe<Scalars['String']['output']>;
  readonly canvaBackgroundDesignId?: Maybe<Scalars['String']['output']>;
  readonly colorPalette?: Maybe<ReadonlyArray<Maybe<Scalars['String']['output']>>>;
  readonly colorSchema?: Maybe<Scalars['String']['output']>;
  readonly colourway?: Maybe<Scalars['String']['output']>;
  readonly customAvatar?: Maybe<Scalars['String']['output']>;
  readonly customAvatarAttributes?: Maybe<Scalars['String']['output']>;
  readonly customAvatarVideo?: Maybe<Scalars['String']['output']>;
  readonly fontColor?: Maybe<Scalars['String']['output']>;
  readonly fontStyle?: Maybe<Scalars['String']['output']>;
  readonly luminance?: Maybe<Scalars['String']['output']>;
  readonly shadowColor?: Maybe<Scalars['String']['output']>;
  readonly whiteLabel?: Maybe<Scalars['String']['output']>;
};

export type GlowUpToolUpdateBioPreviousState = {
  readonly __typename: 'GlowUpToolUpdateBioPreviousState';
  readonly account: UpdateBioPreviousStateAccount;
};

export type GlowUpToolUpdateHeadingOptionsPreviousState = {
  readonly __typename: 'GlowUpToolUpdateHeadingOptionsPreviousState';
  readonly headingColor?: Maybe<Scalars['String']['output']>;
  readonly headingEffect?: Maybe<Scalars['String']['output']>;
  readonly headingFont?: Maybe<Scalars['String']['output']>;
  readonly headingLogo?: Maybe<Scalars['String']['output']>;
  readonly headingLogoSize?: Maybe<Scalars['String']['output']>;
  readonly headingSize?: Maybe<Scalars['String']['output']>;
  readonly headingType?: Maybe<Scalars['String']['output']>;
};

export type GlowUpToolUpdateLinkTitlePreviousState = {
  readonly __typename: 'GlowUpToolUpdateLinkTitlePreviousState';
  readonly links?: Maybe<ReadonlyArray<Maybe<UpdateLinkTitlePreviousStateLink>>>;
};

export enum GlowUpType {
  AddLink = 'ADD_LINK',
  AnimateLink = 'ANIMATE_LINK',
  CreateCollection = 'CREATE_COLLECTION',
  CreateSocialLink = 'CREATE_SOCIAL_LINK',
  IncompleteProfilePicture = 'INCOMPLETE_PROFILE_PICTURE',
  RichMediaSpotify = 'RICH_MEDIA_SPOTIFY',
  RichMediaYoutube = 'RICH_MEDIA_YOUTUBE',
  SetFeaturedLayout = 'SET_FEATURED_LAYOUT',
  SetThumbnail = 'SET_THUMBNAIL',
  UpdateAppearance = 'UPDATE_APPEARANCE',
  UpdateBio = 'UPDATE_BIO',
  UpdateHeadingOptions = 'UPDATE_HEADING_OPTIONS',
  UpdateHero = 'UPDATE_HERO',
  UpdateLinkTitle = 'UPDATE_LINK_TITLE'
}

export type GlowupInput = {
  readonly intensity?: InputMaybe<GlowupIntensity>;
  readonly targetAreas?: InputMaybe<ReadonlyArray<GlowupTargetArea>>;
  readonly toolId?: InputMaybe<Scalars['String']['input']>;
};

/** The intensity level for glowup transformation */
export enum GlowupIntensity {
  Balanced = 'balanced',
  Bold = 'bold',
  Light = 'light'
}

export type GlowupLinkGroup = {
  readonly __typename: 'GlowupLinkGroup';
  readonly childIds: ReadonlyArray<Scalars['Float']['output']>;
  readonly position: Scalars['Float']['output'];
  readonly title: Scalars['String']['output'];
};

export type GlowupResponse = {
  readonly __typename: 'GlowupResponse';
  readonly error?: Maybe<Scalars['String']['output']>;
  readonly linkGroups?: Maybe<ReadonlyArray<GlowupLinkGroup>>;
  readonly message?: Maybe<Scalars['String']['output']>;
  readonly status?: Maybe<GlowUpReturnStatus>;
};

/** Specific areas to target for glowup improvements */
export enum GlowupTargetArea {
  Colors = 'colors',
  Imagery = 'imagery',
  Layout = 'layout',
  LinkAppearance = 'link_appearance',
  Typography = 'typography'
}

export type GoogleCalendarIntegrationContext = {
  readonly __typename: 'GoogleCalendarIntegrationContext';
  readonly accessToken?: Maybe<Scalars['String']['output']>;
  readonly createdAt?: Maybe<Scalars['Int']['output']>;
  readonly expiresIn?: Maybe<Scalars['Int']['output']>;
  readonly linkId?: Maybe<Scalars['Int']['output']>;
  readonly message?: Maybe<Scalars['String']['output']>;
  readonly storageKey?: Maybe<Scalars['String']['output']>;
  readonly title?: Maybe<Scalars['String']['output']>;
  readonly userEmail?: Maybe<Scalars['String']['output']>;
};

export type GoogleSheetsIntegrationContext = {
  readonly __typename: 'GoogleSheetsIntegrationContext';
  readonly accessToken?: Maybe<Scalars['String']['output']>;
  readonly createdAt?: Maybe<Scalars['Int']['output']>;
  readonly expiresIn?: Maybe<Scalars['Int']['output']>;
  readonly isAuthenticated?: Maybe<Scalars['Boolean']['output']>;
  readonly linkId?: Maybe<Scalars['Int']['output']>;
  readonly message?: Maybe<Scalars['String']['output']>;
  readonly position?: Maybe<Scalars['String']['output']>;
  readonly refreshToken?: Maybe<Scalars['String']['output']>;
  readonly storageKey?: Maybe<Scalars['String']['output']>;
  readonly termsActive?: Maybe<Scalars['Boolean']['output']>;
  readonly termsLabel?: Maybe<Scalars['String']['output']>;
  readonly termsUrl?: Maybe<Scalars['String']['output']>;
  readonly title?: Maybe<Scalars['String']['output']>;
};

export type GoogleYouTubeIntegrationContext = {
  readonly __typename: 'GoogleYouTubeIntegrationContext';
  readonly channelAvatarUrl?: Maybe<Scalars['String']['output']>;
  readonly channelId?: Maybe<Scalars['String']['output']>;
  readonly channelTitle?: Maybe<Scalars['String']['output']>;
  readonly isAuthenticated?: Maybe<Scalars['Boolean']['output']>;
  readonly message?: Maybe<Scalars['String']['output']>;
  readonly title?: Maybe<Scalars['String']['output']>;
};

export type GradientBackground = {
  readonly __typename: 'GradientBackground';
  readonly animated?: Maybe<Scalars['Boolean']['output']>;
  readonly colors: ReadonlyArray<Maybe<Scalars['String']['output']>>;
  readonly hideAnimated?: Maybe<Scalars['Boolean']['output']>;
  readonly name: BackgroundGradientStyle;
  readonly noise: Scalars['Boolean']['output'];
  readonly style: BackgroundStyle;
  readonly type: BackgroundType;
};

export enum GroupLayoutOptions {
  Carousel = 'carousel',
  Featured = 'featured',
  Grid = 'grid',
  Showcase = 'showcase',
  Stack = 'stack'
}

export type GroupLinkContext = {
  readonly __typename: 'GroupLinkContext';
  readonly layoutOption?: Maybe<GroupLayoutOptions>;
};

export type GroupLinkContextInput = {
  readonly layoutOption?: InputMaybe<GroupLayoutOptions>;
};

export enum HeaderLayoutOptions {
  Carousel = 'carousel',
  Featured = 'featured',
  Grid = 'grid',
  Showcase = 'showcase',
  Stack = 'stack'
}

export type HeaderLinkContext = {
  readonly __typename: 'HeaderLinkContext';
  readonly layoutOption?: Maybe<HeaderLayoutOptions>;
};

export type HeaderLinkContextInput = {
  readonly layoutOption?: InputMaybe<HeaderLayoutOptions>;
};

export enum HeadingEffect {
  Glow = 'glow',
  None = 'none',
  Outline = 'outline',
  Shadow = 'shadow',
  Squeeze = 'squeeze'
}

export enum HeadingLogoSize {
  Large = 'large',
  Normal = 'normal'
}

export type HeadingOptions = {
  readonly __typename: 'HeadingOptions';
  readonly color?: Maybe<Scalars['String']['output']>;
  readonly effect: HeadingEffect;
  readonly font?: Maybe<Scalars['String']['output']>;
  readonly logo?: Maybe<Scalars['String']['output']>;
  readonly logoSize?: Maybe<HeadingLogoSize>;
  readonly size: HeadingSize;
  readonly type: HeadingType;
};

export enum HeadingSize {
  Huge = 'huge',
  Large = 'large',
  Normal = 'normal'
}

export enum HeadingType {
  Logo = 'logo',
  None = 'none',
  Text = 'text'
}

export type HomeLayout = {
  readonly __typename: 'HomeLayout';
  readonly sections: ReadonlyArray<Maybe<HomeSection>>;
};

export enum HomeNextBestActionType {
  /** Add a contact form */
  AddContactForm = 'ADD_CONTACT_FORM',
  /** Add a digital download */
  AddDigitalDownload = 'ADD_DIGITAL_DOWNLOAD',
  /** Add a YouTube link */
  AddYoutube = 'ADD_YOUTUBE',
  /** Connect Instagram account */
  ConnectInstagram = 'CONNECT_INSTAGRAM',
  /** Connect TikTok account */
  ConnectTiktok = 'CONNECT_TIKTOK',
  /** Customize appearance and design */
  EditAppearance = 'EDIT_APPEARANCE',
  /** Hide Linktree logo */
  SettingHideLinktreeLogo = 'SETTING_HIDE_LINKTREE_LOGO',
  /** Set up Instagram auto DM */
  SetUpInstagramAutoDm = 'SET_UP_INSTAGRAM_AUTO_DM',
  /** Set up Plann */
  SetUpPlann = 'SET_UP_PLANN',
  /** Set up shop */
  SetUpShop = 'SET_UP_SHOP'
}

export type HomeSection = {
  readonly data?: Maybe<HomeSectionData>;
  readonly subtitle?: Maybe<Scalars['String']['output']>;
  readonly title?: Maybe<Scalars['String']['output']>;
  readonly type: Scalars['String']['output'];
};

export type HomeSectionData = {
  readonly type: Scalars['String']['output'];
};

export type HomeSectionItem = {
  readonly subtitle?: Maybe<Scalars['String']['output']>;
  readonly title: Scalars['String']['output'];
  readonly type: Scalars['String']['output'];
};

export type HomeSectionNextBestActions = HomeSection & {
  readonly __typename: 'HomeSectionNextBestActions';
  readonly data?: Maybe<NextBestActionSectionData>;
  readonly subtitle?: Maybe<Scalars['String']['output']>;
  readonly title?: Maybe<Scalars['String']['output']>;
  readonly type: Scalars['String']['output'];
};

export type HomeSectionNextBestActionsItem = {
  readonly __typename: 'HomeSectionNextBestActionsItem';
  readonly actionLabel?: Maybe<Scalars['String']['output']>;
  readonly id: Scalars['String']['output'];
  readonly imageUrl?: Maybe<Scalars['String']['output']>;
  readonly subtitle?: Maybe<Scalars['String']['output']>;
  readonly title: Scalars['String']['output'];
  readonly type: HomeNextBestActionType;
};

export type IgdmSendsForPeriodOutput = {
  readonly __typename: 'IGDMSendsForPeriodOutput';
  readonly count: Scalars['Int']['output'];
  readonly periodEnd: Scalars['DateTime']['output'];
  readonly periodStart: Scalars['DateTime']['output'];
};

export type IconGraphic = {
  readonly __typename: 'IconGraphic';
  readonly content: Scalars['String']['output'];
  readonly icon: Scalars['String']['output'];
};

export type IconListGraphic = {
  readonly __typename: 'IconListGraphic';
  readonly horizontal: Scalars['Boolean']['output'];
  readonly list: ReadonlyArray<IconGraphic>;
};

export type Image = {
  readonly __typename: 'Image';
  readonly altText?: Maybe<Scalars['String']['output']>;
  readonly height: Scalars['Int']['output'];
  readonly id: Scalars['String']['output'];
  readonly src: Scalars['String']['output'];
  readonly width: Scalars['Int']['output'];
};

export type ImageBackground = {
  readonly __typename: 'ImageBackground';
  readonly color: Scalars['String']['output'];
  readonly effect: BackgroundImageEffect;
  readonly imageUrl: Scalars['String']['output'];
  readonly noise: Scalars['Boolean']['output'];
  readonly tint: Scalars['String']['output'];
  readonly type: BackgroundType;
};

export type ImageGalleryItem = {
  readonly __typename: 'ImageGalleryItem';
  readonly alt?: Maybe<Scalars['String']['output']>;
  readonly url: Scalars['String']['output'];
};

export type ImageGraphic = {
  readonly __typename: 'ImageGraphic';
  readonly imageSrc?: Maybe<Scalars['String']['output']>;
  readonly svgSrc?: Maybe<Scalars['String']['output']>;
};

export type ImportProfileFromJsonResult = {
  readonly __typename: 'ImportProfileFromJsonResult';
  readonly account?: Maybe<Account>;
  readonly user?: Maybe<User>;
};

export type InAppMessage = {
  readonly __typename: 'InAppMessage';
  readonly code: MessageCode;
  readonly count?: Maybe<Scalars['Int']['output']>;
  readonly dismissedAt?: Maybe<Scalars['Date']['output']>;
  readonly level: MessageLevel;
};

export type IndexingResponse = {
  readonly __typename: 'IndexingResponse';
  readonly ticketId: Scalars['String']['output'];
};

export type Insight = {
  readonly __typename: 'Insight';
  readonly action?: Maybe<InsightAction>;
  readonly content?: Maybe<Scalars['String']['output']>;
  readonly createdAt?: Maybe<Scalars['DateTime']['output']>;
  readonly graphic?: Maybe<InsightGraphic>;
  readonly hasActioned?: Maybe<Scalars['Boolean']['output']>;
  readonly hasViewed?: Maybe<Scalars['Boolean']['output']>;
  readonly id: Scalars['String']['output'];
  readonly key: Scalars['String']['output'];
  readonly version?: Maybe<Scalars['String']['output']>;
};

export type InsightAction = {
  readonly __typename: 'InsightAction';
  readonly content?: Maybe<Scalars['String']['output']>;
  readonly data?: Maybe<InsightActionUnion>;
  readonly key?: Maybe<Scalars['String']['output']>;
};

export type InsightActionUnion = NavigateAction | RepositionLinkAction;

export type InsightClicks = {
  readonly __typename: 'InsightClicks';
  readonly lifetime: Scalars['Int']['output'];
  readonly profile: Scalars['Int']['output'];
  readonly total: Scalars['Int']['output'];
  readonly tree: Scalars['Int']['output'];
};

export type InsightGraphic = {
  readonly __typename: 'InsightGraphic';
  readonly content?: Maybe<Scalars['String']['output']>;
  readonly contentPosition?: Maybe<Scalars['String']['output']>;
  readonly data?: Maybe<InsightGraphicUnion>;
  readonly key?: Maybe<Scalars['String']['output']>;
};

export type InsightGraphicUnion = BarChartGraphic | IconListGraphic | ImageGraphic;

export type InstagramBusinessAnalytics = {
  readonly __typename: 'InstagramBusinessAnalytics';
  readonly insights: ReadonlyArray<InstagramInsights>;
};

export type InstagramBusinessAnalyticsInput = {
  readonly accountId: Scalars['Int']['input'];
  readonly includeDemographics?: Scalars['Boolean']['input'];
  readonly includePostsLatest?: Scalars['Boolean']['input'];
  readonly includeTimeseries?: Scalars['Boolean']['input'];
  readonly instagramBusinessIntegrationId: Scalars['String']['input'];
  readonly range: DateRangeInput;
  readonly timezone: Scalars['String']['input'];
};

export type InstagramBusinessSocialIntegrationContext = {
  readonly __typename: 'InstagramBusinessSocialIntegrationContext';
  readonly post?: Maybe<InstagramPost>;
  readonly posts: InstagramPaginatedPosts;
  readonly postsByIds?: Maybe<ReadonlyArray<Maybe<InstagramPost>>>;
  readonly scopes?: Maybe<ReadonlyArray<Maybe<Scalars['String']['output']>>>;
  readonly supportIGDM?: Maybe<Scalars['Boolean']['output']>;
  readonly user: InstagramUser;
  readonly webhooks?: Maybe<ReadonlyArray<Maybe<Scalars['String']['output']>>>;
};


export type InstagramBusinessSocialIntegrationContextPostArgs = {
  id: Scalars['String']['input'];
};


export type InstagramBusinessSocialIntegrationContextPostsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
};


export type InstagramBusinessSocialIntegrationContextPostsByIdsArgs = {
  ids?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']['input']>>>;
};

export type InstagramDemographics = {
  readonly __typename: 'InstagramDemographics';
  readonly age: ReadonlyArray<DemographicSegment>;
  readonly agegender: ReadonlyArray<DemographicSegment>;
  readonly city: ReadonlyArray<DemographicCitySegment>;
  readonly country: ReadonlyArray<DemographicSegment>;
  readonly gender: ReadonlyArray<DemographicSegment>;
};

export type InstagramDirectMessageButtonInput = {
  readonly title?: InputMaybe<Scalars['String']['input']>;
  readonly url?: InputMaybe<Scalars['String']['input']>;
};

export type InstagramDirectMessageInput = {
  readonly buttons?: InputMaybe<ReadonlyArray<InputMaybe<InstagramDirectMessageButtonInput>>>;
  readonly text?: InputMaybe<Scalars['String']['input']>;
};

export type InstagramDirectMessageRecipientInput = {
  readonly instagramAccountId?: InputMaybe<Scalars['String']['input']>;
  readonly instagramCommentId?: InputMaybe<Scalars['String']['input']>;
};

export type InstagramInsights = {
  readonly __typename: 'InstagramInsights';
  readonly engagedAudienceDemographics: ReadonlyArray<InstagramDemographics>;
  readonly postsLatest: ReadonlyArray<InstagramPostsLatest>;
  readonly timeseries: ReadonlyArray<InstagramTimeseries>;
  readonly userProfile: ReadonlyArray<InstagramUserProfile>;
};

export enum InstagramMediaType {
  All = 'ALL',
  Reels = 'REELS'
}

export type InstagramMessagePublicReplyMessageInput = {
  readonly text: Scalars['String']['input'];
};

export type InstagramMessagePublicReplyRecipientInput = {
  readonly instagramCommentId: Scalars['String']['input'];
};

export type InstagramPaginatedPosts = {
  readonly __typename: 'InstagramPaginatedPosts';
  readonly after?: Maybe<Scalars['String']['output']>;
  readonly before?: Maybe<Scalars['String']['output']>;
  readonly items: ReadonlyArray<InstagramPost>;
};

export type InstagramPost = {
  readonly __typename: 'InstagramPost';
  readonly caption: Scalars['String']['output'];
  readonly commentsCount?: Maybe<Scalars['Int']['output']>;
  readonly id: Scalars['String']['output'];
  readonly likeCount?: Maybe<Scalars['Int']['output']>;
  readonly media?: Maybe<ReadonlyArray<InstagramPostMedia>>;
  /** CAROUSEL_ALBUM, IMAGE, or VIDEO. */
  readonly mediaType: Scalars['String']['output'];
  readonly mediaUrl: Scalars['String']['output'];
  readonly permalink: Scalars['String']['output'];
  /** AD, FEED, STORY or REELS. */
  readonly postType?: Maybe<Scalars['String']['output']>;
  readonly thumbnailUrl: Scalars['String']['output'];
  readonly timestamp: Scalars['String']['output'];
  readonly url?: Maybe<Scalars['String']['output']>;
  readonly username: Scalars['String']['output'];
};

export type InstagramPostItem = {
  readonly __typename: 'InstagramPostItem';
  readonly commentsCount: Scalars['Int']['output'];
  readonly id?: Maybe<Scalars['String']['output']>;
  readonly likeCount: Scalars['Int']['output'];
  readonly mediaType?: Maybe<Scalars['String']['output']>;
  readonly mediaUrl?: Maybe<Scalars['String']['output']>;
  readonly timestamp?: Maybe<Scalars['String']['output']>;
};

export type InstagramPostLinkContext = {
  readonly __typename: 'InstagramPostLinkContext';
  readonly embedOption?: Maybe<LinkEmbedOptions>;
};

export type InstagramPostLinkContextInput = {
  readonly embedOption?: InputMaybe<LinkEmbedOptions>;
};

export type InstagramPostMedia = {
  readonly __typename: 'InstagramPostMedia';
  readonly id?: Maybe<Scalars['String']['output']>;
  readonly mediaType?: Maybe<Scalars['String']['output']>;
  readonly mediaUrl?: Maybe<Scalars['String']['output']>;
  readonly thumbnailUrl?: Maybe<Scalars['String']['output']>;
};

export type InstagramPostsLatest = {
  readonly __typename: 'InstagramPostsLatest';
  readonly items: ReadonlyArray<InstagramPostItem>;
};

export enum InstagramProfileDisplayOption {
  Latest = 'LATEST',
  Selected = 'SELECTED'
}

export type InstagramProfileLinkContext = {
  readonly __typename: 'InstagramProfileLinkContext';
  readonly displayType?: Maybe<InstagramProfileDisplayOption>;
  readonly embedOption?: Maybe<LinkEmbedOptions>;
  readonly instagramBusinessAccountId?: Maybe<Scalars['String']['output']>;
  readonly integrationId?: Maybe<Scalars['String']['output']>;
  readonly integrationType?: Maybe<SocialIntegrationType>;
  readonly mediaType?: Maybe<InstagramProfileMediaOption>;
};

export type InstagramProfileLinkContextInput = {
  readonly displayType?: InputMaybe<InstagramProfileDisplayOption>;
  readonly embedOption?: InputMaybe<LinkEmbedOptions>;
  readonly instagramBusinessAccountId?: InputMaybe<Scalars['String']['input']>;
  readonly integrationId?: InputMaybe<Scalars['String']['input']>;
  /** Use INSTAGRAM_BUSSINESS. */
  readonly integrationType?: InputMaybe<SocialIntegrationType>;
  readonly mediaType?: InputMaybe<InstagramProfileMediaOption>;
};

export enum InstagramProfileMediaOption {
  Posts = 'POSTS',
  Reels = 'REELS'
}

export type InstagramSocialIntegrationContext = {
  readonly __typename: 'InstagramSocialIntegrationContext';
  readonly post?: Maybe<InstagramPost>;
  readonly posts: InstagramPaginatedPosts;
  readonly user: InstagramUser;
};


export type InstagramSocialIntegrationContextPostArgs = {
  id: Scalars['String']['input'];
};


export type InstagramSocialIntegrationContextPostsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
};

export type InstagramTimeseries = {
  readonly __typename: 'InstagramTimeseries';
  readonly date?: Maybe<Scalars['String']['output']>;
  /** Number of total followers at this date */
  readonly followersCount: Scalars['Int']['output'];
  /** Number of follows gained on this date */
  readonly followsCount: Scalars['Int']['output'];
  /** Status indicating any upstream API issues or data limitations */
  readonly status?: Maybe<Scalars['String']['output']>;
  /** Deprecated, use unfollowsCount instead */
  readonly unfollowersCount: Scalars['Int']['output'];
  /** Number of follows lost on this date */
  readonly unfollowsCount?: Maybe<Scalars['Int']['output']>;
};

export type InstagramUser = {
  readonly __typename: 'InstagramUser';
  readonly followersCount?: Maybe<Scalars['Int']['output']>;
  readonly followsCount?: Maybe<Scalars['Int']['output']>;
  readonly id: Scalars['String']['output'];
  readonly mediaCount?: Maybe<Scalars['Int']['output']>;
  readonly name?: Maybe<Scalars['String']['output']>;
  readonly profilePictureUrl?: Maybe<Scalars['String']['output']>;
  readonly username: Scalars['String']['output'];
};

export type InstagramUserProfile = {
  readonly __typename: 'InstagramUserProfile';
  /** Current social media profile followers count */
  readonly currentFollowersCount?: Maybe<Scalars['Int']['output']>;
  /** Deprecated, use currentFollowersCount instead */
  readonly followersCount: Scalars['Int']['output'];
  /** Deprecated, use rangeFollowsTotal instead */
  readonly followsCount: Scalars['Int']['output'];
  readonly id?: Maybe<Scalars['String']['output']>;
  readonly mediaCount: Scalars['Int']['output'];
  readonly name?: Maybe<Scalars['String']['output']>;
  readonly profilePictureUrl?: Maybe<Scalars['String']['output']>;
  /** Total followers gained from selected date range */
  readonly rangeFollowsTotal?: Maybe<Scalars['Int']['output']>;
  /** Total followers lost from selected date range */
  readonly rangeUnfollowsTotal?: Maybe<Scalars['Int']['output']>;
  /** Deprecated, use rangeUnfollowsTotal instead */
  readonly unfollowersCount: Scalars['Int']['output'];
  readonly username?: Maybe<Scalars['String']['output']>;
};

export type Integration = {
  readonly __typename: 'Integration';
  readonly active: Scalars['Boolean']['output'];
  readonly context?: Maybe<IntegrationContext>;
  readonly id: Scalars['String']['output'];
  readonly service?: Maybe<Scalars['String']['output']>;
  readonly status?: Maybe<IntegrationStatus>;
  readonly type: IntegrationType;
};

export type IntegrationContext = CanvaIntegrationContext | DotDigitalIntegrationContext | GoogleCalendarIntegrationContext | GoogleSheetsIntegrationContext | GoogleYouTubeIntegrationContext | KitIntegrationContext | KlaviyoIntegrationContext | MailchimpIntegrationContext | TwitchExtensionIntegrationContext | ZapierIntegrationContext | ZoomIntegrationContext;

export type IntegrationInput = {
  readonly active: Scalars['Boolean']['input'];
  readonly context?: InputMaybe<MailingIntegrationContextInput>;
  readonly id?: InputMaybe<Scalars['String']['input']>;
  readonly service: Scalars['String']['input'];
  readonly type?: InputMaybe<Scalars['String']['input']>;
};

export type IntegrationOptionsInput = {
  /** When true, preserves existing context values when updating only some fields. When false (default), only the provided fields are kept. */
  readonly mergeContext?: InputMaybe<Scalars['Boolean']['input']>;
};

export type IntegrationResult = {
  readonly __typename: 'IntegrationResult';
  readonly account?: Maybe<Account>;
};

export enum IntegrationStatus {
  Expired = 'EXPIRED',
  Expiring = 'EXPIRING',
  Healthy = 'HEALTHY'
}

export type IntegrationSubscribeInput = {
  readonly id: Scalars['String']['input'];
  readonly value: Scalars['String']['input'];
};

export enum IntegrationType {
  Audience = 'AUDIENCE',
  CanvaDesign = 'CANVA_DESIGN',
  Coaching = 'COACHING',
  ContactForm = 'CONTACT_FORM',
  Email = 'EMAIL',
  Insights = 'INSIGHTS',
  Phone = 'PHONE',
  Social = 'SOCIAL',
  TwitchExtension = 'TWITCH_EXTENSION'
}

export type IntegrationsFilterInput = {
  /** Only return Integrations that match this ID */
  readonly id?: InputMaybe<Scalars['String']['input']>;
  /** Only return Integrations that are active */
  readonly isActive?: InputMaybe<Scalars['Boolean']['input']>;
  /** Only return Integrations that are valid */
  readonly isValid?: InputMaybe<Scalars['Boolean']['input']>;
  /** Only return Integrations that match this service */
  readonly services?: InputMaybe<ReadonlyArray<Scalars['String']['input']>>;
  /** Only return Integrations that match this type */
  readonly types?: InputMaybe<ReadonlyArray<IntegrationType>>;
};

export enum Interval {
  Daily = 'DAILY',
  Monthly = 'MONTHLY',
  Weekly = 'WEEKLY'
}

export type InviteAdminResult = {
  readonly __typename: 'InviteAdminResult';
  readonly message?: Maybe<Scalars['String']['output']>;
  readonly result?: Maybe<Scalars['String']['output']>;
};

export type InviteUserByEmailResult = {
  readonly __typename: 'InviteUserByEmailResult';
  readonly result?: Maybe<Scalars['String']['output']>;
};

export type IsFollowingAccountInput = {
  readonly accountUuid: Scalars['String']['input'];
  readonly followerId: Scalars['String']['input'];
};

export type Item = {
  readonly __typename: 'Item';
  readonly data: ItemData;
  readonly id: Scalars['Float']['output'];
  readonly saleType: Scalars['String']['output'];
  readonly type: Scalars['String']['output'];
};

export type ItemData = AffiliateTransaction | DigitalTransaction | Payout;

export type KajabiCourseContext = {
  readonly __typename: 'KajabiCourseContext';
  readonly amount?: Maybe<Scalars['Int']['output']>;
  readonly currency?: Maybe<Scalars['String']['output']>;
  readonly description?: Maybe<Scalars['String']['output']>;
  readonly id?: Maybe<Scalars['String']['output']>;
  readonly listingId?: Maybe<Scalars['String']['output']>;
  readonly modules?: Maybe<ReadonlyArray<Maybe<KajabiCourseModule>>>;
  readonly paymentType?: Maybe<KajabiCoursePaymentType>;
  /** @deprecated This field is deprecated use amount instead. */
  readonly price?: Maybe<Scalars['Float']['output']>;
  readonly thumbnailUrl?: Maybe<Scalars['String']['output']>;
  readonly title?: Maybe<Scalars['String']['output']>;
};

export type KajabiCourseContextInput = {
  readonly amount?: InputMaybe<Scalars['Int']['input']>;
  readonly courseId?: InputMaybe<Scalars['String']['input']>;
  readonly currency?: InputMaybe<Scalars['String']['input']>;
  readonly paymentType?: InputMaybe<KajabiCoursePaymentType>;
  readonly v2FormId?: InputMaybe<Scalars['String']['input']>;
};

export type KajabiCourseLinkContext = {
  readonly __typename: 'KajabiCourseLinkContext';
  readonly course?: Maybe<KajabiCourseContext>;
  readonly v2FormId?: Maybe<Scalars['String']['output']>;
};


export type KajabiCourseLinkContextCourseArgs = {
  includeHidden?: InputMaybe<Scalars['Boolean']['input']>;
  username?: InputMaybe<Scalars['String']['input']>;
};

export type KajabiCourseModule = {
  readonly __typename: 'KajabiCourseModule';
  readonly id?: Maybe<Scalars['String']['output']>;
  readonly length?: Maybe<Scalars['Int']['output']>;
  readonly name?: Maybe<Scalars['String']['output']>;
  readonly numberOfLessons?: Maybe<Scalars['Int']['output']>;
  readonly publishingOption?: Maybe<KajabiCoursePublishingOption>;
  readonly thumbnailUrl?: Maybe<Scalars['String']['output']>;
};

export enum KajabiCoursePaymentType {
  Free = 'FREE',
  OneTime = 'ONE_TIME',
  Recurring = 'RECURRING'
}

export enum KajabiCoursePublishingOption {
  Draft = 'DRAFT',
  Locked = 'LOCKED',
  Published = 'PUBLISHED'
}

export type KajabiUser = {
  readonly __typename: 'KajabiUser';
  readonly accessToken?: Maybe<Scalars['String']['output']>;
  readonly id: Scalars['Int']['output'];
};

export type KitIntegrationContext = {
  readonly __typename: 'KitIntegrationContext';
  readonly accessToken?: Maybe<Scalars['String']['output']>;
  readonly createdAt?: Maybe<Scalars['Int']['output']>;
  readonly expiresIn?: Maybe<Scalars['Int']['output']>;
  readonly isAuthenticated?: Maybe<Scalars['Boolean']['output']>;
  readonly refreshToken?: Maybe<Scalars['String']['output']>;
  readonly scope?: Maybe<Scalars['String']['output']>;
  readonly storageKey?: Maybe<Scalars['String']['output']>;
  readonly tokenType?: Maybe<Scalars['String']['output']>;
};

export type KlaviyoIntegrationContext = {
  readonly __typename: 'KlaviyoIntegrationContext';
  readonly accessToken?: Maybe<Scalars['String']['output']>;
  readonly createdAt?: Maybe<Scalars['Int']['output']>;
  readonly expiresIn?: Maybe<Scalars['Int']['output']>;
  readonly isAuthenticated?: Maybe<Scalars['Boolean']['output']>;
  readonly refreshToken?: Maybe<Scalars['String']['output']>;
  readonly scope?: Maybe<Scalars['String']['output']>;
  readonly storageKey?: Maybe<Scalars['String']['output']>;
  readonly tokenType?: Maybe<Scalars['String']['output']>;
};

export type LifetimeClickCount = {
  readonly __typename: 'LifetimeClickCount';
  readonly totalClicks: Scalars['Int']['output'];
};

export type Link = {
  readonly __typename: 'Link';
  readonly account?: Maybe<Account>;
  readonly active: Scalars['Boolean']['output'];
  /** @deprecated Use `modifiers` instead */
  readonly amazonAffiliate?: Maybe<AmazonAffiliate>;
  readonly analytics?: Maybe<LinkAnalyticsMonolith>;
  /** @deprecated Use `modifiers` instead */
  readonly animation?: Maybe<Scalars['String']['output']>;
  readonly children: ReadonlyArray<Link>;
  readonly context?: Maybe<LinkContext>;
  /** The coordinates of the link when it is part of a social feed */
  readonly coordinates?: Maybe<SocialFeedPostMediaLinkCoordinates>;
  readonly createdAt?: Maybe<Scalars['String']['output']>;
  readonly deleted: Scalars['Boolean']['output'];
  /** @deprecated Use `url` instead */
  readonly formattedUrl?: Maybe<Scalars['String']['output']>;
  /** @deprecated Use `modifiers` instead */
  readonly forwarding?: Maybe<Scalars['String']['output']>;
  /** @deprecated Use `modifiers` instead */
  readonly forwardingTimezone?: Maybe<Scalars['String']['output']>;
  /** @deprecated Use `modifiers` instead */
  readonly highlight?: Maybe<Scalars['String']['output']>;
  readonly id: Scalars['Int']['output'];
  readonly isIncomplete: Scalars['Boolean']['output'];
  /** @deprecated Use `modifiers` instead */
  readonly isLeapLink: Scalars['Boolean']['output'];
  /** @deprecated Use `modifiers` instead */
  readonly isLeapLinkActive: Scalars['Boolean']['output'];
  /** If true, client shall NOT auto change the link type, such as based on its URL insights. */
  readonly isLinkTypeChangeExplicit: Scalars['Boolean']['output'];
  /** @deprecated Use `context` instead */
  readonly linkContext?: Maybe<LinkContextUnion>;
  readonly linktreeBackendForeignKey?: Maybe<Scalars['String']['output']>;
  /** Linktree enhanced metadata for the link. */
  readonly ltMetadata?: Maybe<LinkLtMetaData>;
  readonly messages: ReadonlyArray<Message>;
  /** Metadata coming from the original link. */
  readonly metadata?: Maybe<LinkMetaData>;
  /** The most severe moderation action for this link */
  readonly moderationAction?: Maybe<Scalars['String']['output']>;
  /** @deprecated Use `moderationAction` or `unsafe` instead */
  readonly moderationLabels?: Maybe<ReadonlyArray<Maybe<Scalars['String']['output']>>>;
  readonly modifiers: LinkModifiers;
  readonly parent?: Maybe<Link>;
  readonly position: Scalars['Int']['output'];
  readonly rules?: Maybe<LinkRules>;
  /** @deprecated Use `modifiers` instead */
  readonly scheduleEnd?: Maybe<Scalars['String']['output']>;
  /** @deprecated Use `modifiers` instead */
  readonly scheduleEndTimezone?: Maybe<Scalars['String']['output']>;
  /** @deprecated Use `modifiers` instead */
  readonly scheduleStart?: Maybe<Scalars['String']['output']>;
  /** @deprecated Use `modifiers` instead */
  readonly scheduleStartTimezone?: Maybe<Scalars['String']['output']>;
  readonly shouldRouteToProfile: Scalars['Boolean']['output'];
  readonly status: LinkStatus;
  /** @deprecated Use `modifiers` instead */
  readonly thumbnail?: Maybe<Scalars['String']['output']>;
  /** @deprecated Use `modifiers` instead */
  readonly thumbnailUrl?: Maybe<Scalars['String']['output']>;
  readonly title?: Maybe<Scalars['String']['output']>;
  readonly type?: Maybe<Scalars['String']['output']>;
  /** It is consistent with `moderationAction=BAN` */
  readonly unsafe: Scalars['Boolean']['output'];
  readonly updatedAt?: Maybe<Scalars['String']['output']>;
  readonly url?: Maybe<Scalars['String']['output']>;
};


export type LinkChildrenArgs = {
  filter?: InputMaybe<LinksFilterInput>;
};


export type LinkFormattedUrlArgs = {
  appendUtm?: InputMaybe<Scalars['Boolean']['input']>;
};


export type LinkRulesArgs = {
  validOnly?: InputMaybe<Scalars['Boolean']['input']>;
};


export type LinkUrlArgs = {
  appendLtclid?: InputMaybe<Scalars['Boolean']['input']>;
  appendUtm?: InputMaybe<Scalars['Boolean']['input']>;
  evaluateGate?: InputMaybe<Scalars['Boolean']['input']>;
};

export type LinkActivity = {
  readonly __typename: 'LinkActivity';
  readonly bookPlatforms?: Maybe<LinkActivityBookPlatform>;
  readonly breakdown: ReadonlyArray<ActivityByLinkDaily>;
  readonly countries?: Maybe<LinkActivityCountry>;
  readonly devices?: Maybe<LinkActivityDevice>;
  readonly insights?: Maybe<LinkActivityInsights>;
  readonly lifetime: ActivityByLinkTotals;
  readonly mobileAppPlatforms?: Maybe<LinkActivityMobileAppPlatform>;
  readonly musicPlatforms?: Maybe<LinkActivityMusicPlatform>;
  readonly overview?: Maybe<LinkActivityOverview>;
  readonly podcastPlatforms?: Maybe<LinkActivityPodcastPlatform>;
  readonly presavePlatforms?: Maybe<LinkActivityPresavePlatform>;
  readonly referrers?: Maybe<LinkActivityReferrer>;
  readonly totals: ActivityByLinkTotals;
};

export type LinkActivityBookPlatform = {
  readonly __typename: 'LinkActivityBookPlatform';
  readonly breakdown: ReadonlyArray<ActivityByBookPlatformByLinkTotals>;
};

export type LinkActivityCountry = {
  readonly __typename: 'LinkActivityCountry';
  readonly breakdown: ReadonlyArray<ActivityByCountryByLinkTotals>;
};

export type LinkActivityDevice = {
  readonly __typename: 'LinkActivityDevice';
  readonly breakdown: ReadonlyArray<ActivityByDeviceByLinkTotals>;
};

export type LinkActivityInsights = {
  readonly __typename: 'LinkActivityInsights';
  readonly clickThroughRate: Scalars['Float']['output'];
  readonly clicks: Scalars['Int']['output'];
  readonly ctrTrend: Scalars['Float']['output'];
  readonly ctrTrendDifference: Scalars['Int']['output'];
  readonly topBookPlatform?: Maybe<Scalars['String']['output']>;
  readonly topCountry?: Maybe<Scalars['String']['output']>;
  readonly topDevice?: Maybe<Scalars['String']['output']>;
  readonly topMobileAppPlatform?: Maybe<Scalars['String']['output']>;
  readonly topMusicPlatform?: Maybe<Scalars['String']['output']>;
  readonly topPodcastPlatform?: Maybe<Scalars['String']['output']>;
  readonly topPresavePlatform?: Maybe<Scalars['String']['output']>;
  readonly topReferrer?: Maybe<Scalars['String']['output']>;
  readonly viewsTrend: Scalars['Float']['output'];
  readonly viewsTrendDifference: Scalars['Int']['output'];
};

export type LinkActivityMobileAppPlatform = {
  readonly __typename: 'LinkActivityMobileAppPlatform';
  readonly breakdown: ReadonlyArray<ActivityByMobileAppPlatformByLinkTotals>;
};

export type LinkActivityMusicPlatform = {
  readonly __typename: 'LinkActivityMusicPlatform';
  readonly breakdown: ReadonlyArray<ActivityByMusicPlatformByLinkTotals>;
};

export type LinkActivityOverview = {
  readonly __typename: 'LinkActivityOverview';
  readonly breakdown: ReadonlyArray<ActivityByLinkDaily>;
  readonly clicksLifetime: Scalars['Int']['output'];
  readonly clicksRange: Scalars['Int']['output'];
  readonly conversionCountLifetime: Scalars['Int']['output'];
  readonly conversionCountRange: Scalars['Int']['output'];
  readonly conversionRateLifetime: Scalars['Float']['output'];
  readonly conversionRateRange: Scalars['Float']['output'];
  readonly ctrLifetime: Scalars['Float']['output'];
  readonly ctrRange: Scalars['Float']['output'];
  readonly ttcLifetime: Scalars['Float']['output'];
  readonly ttcRange: Scalars['Float']['output'];
};

export type LinkActivityPodcastPlatform = {
  readonly __typename: 'LinkActivityPodcastPlatform';
  readonly breakdown: ReadonlyArray<ActivityByPodcastPlatformByLinkTotals>;
};

export type LinkActivityPresavePlatform = {
  readonly __typename: 'LinkActivityPresavePlatform';
  readonly breakdown: ReadonlyArray<ActivityByPresavePlatformByLinkTotals>;
};

export type LinkActivityReferrer = {
  readonly __typename: 'LinkActivityReferrer';
  readonly breakdown: ReadonlyArray<ActivityByReferrerByLinkTotals>;
};

export type LinkAnalytics = {
  readonly __typename: 'LinkAnalytics';
  readonly conversionEvents?: Maybe<LinkConversionEvents>;
  readonly devices?: Maybe<LinkDevices>;
  readonly insights?: Maybe<LinkInsights>;
  readonly lifetime?: Maybe<LinkLifetime>;
  readonly locations?: Maybe<LinkLocations>;
  readonly overview?: Maybe<LinkOverview>;
  readonly referrers?: Maybe<LinkReferrers>;
  readonly trend?: Maybe<ClickTrendsForV2>;
};

/** Union type for different types of link analytics */
export type LinkAnalyticsMonolith = LinkClassicAnalytics;

export type LinkAppContainersV2 = {
  readonly __typename: 'LinkAppContainersV2';
  readonly extensionLinkTypes: ReadonlyArray<Scalars['String']['output']>;
  readonly linkTypes: ReadonlyArray<Scalars['String']['output']>;
};

export type LinkBatchAnalytics = {
  readonly __typename: 'LinkBatchAnalytics';
  readonly lifetime?: Maybe<LinkBatchLifetime>;
  readonly linkId: Scalars['Int']['output'];
  readonly trend?: Maybe<LinkBatchTrend>;
};

export type LinkBatchAnalyticsInput = {
  readonly account: AccountAnalyticsInput;
  readonly linkIds: ReadonlyArray<Scalars['Int']['input']>;
};

export type LinkBatchLifetime = {
  readonly __typename: 'LinkBatchLifetime';
  readonly clicks: AccountClicks;
};

export type LinkBatchTrend = {
  readonly __typename: 'LinkBatchTrend';
  readonly currentWeekCount: Scalars['Int']['output'];
  /** The difference between the current and previous fortnight */
  readonly delta: Scalars['Int']['output'];
  /** 1 if positive, -1 if negative, 0 if no change */
  readonly direction: Scalars['Int']['output'];
  readonly previousWeekCount: Scalars['Int']['output'];
  /** The percentage change between the current and previous fortnight */
  readonly rate: Scalars['Float']['output'];
};

export type LinkBreakdownRange = {
  readonly __typename: 'LinkBreakdownRange';
  readonly clickThroughRate?: Maybe<Scalars['Float']['output']>;
  readonly clicks?: Maybe<LinkLifetimeClicks>;
  readonly date: Scalars['String']['output'];
  readonly timeToClick?: Maybe<Scalars['Float']['output']>;
  readonly views?: Maybe<LinkLifetimeViews>;
};

export type LinkClassicAnalytics = {
  readonly __typename: 'LinkClassicAnalytics';
  readonly clickTrend: Scalars['Int']['output'];
  readonly totalLinkClicks: Scalars['Int']['output'];
};

export type LinkClicksTrend = {
  readonly __typename: 'LinkClicksTrend';
  readonly count: Scalars['Int']['output'];
  readonly trend: Scalars['Float']['output'];
};

export type LinkContext = BookLinkContext | ChatbotLinkContext | ClubhouseLinkContext | CoachingLinkContext | CommercePayLinkContext | CommerceProductLinkContext | CommunityLinkContext | ContactDetailsLinkContext | DigitalDownloadLinkContext | EmailLinkContext | ExtensionLinkContext | FacebookLinkContext | FormLinkContext | GroupLinkContext | HeaderLinkContext | InstagramPostLinkContext | InstagramProfileLinkContext | KajabiCourseLinkContext | LinkerRecommendationsLinkContext | MobileAppLinkContext | MusicLinkContext | NftGalleryLinkContext | PinterestLinkContext | PodcastLinkContext | PreSaveLinkContext | ProductLinkContext | RequestLinkContext | RssFeedLinkContext | SpotifyLinkContext | SpringLinkContext | TemplateLinkContext | ThreadsLinkContext | TikTokJumpLinkContext | TikTokLinkContext | TikTokProfileLinkContext | TipGiftLinkContext | TwitchChannelLinkContext | TwitchCollectionLinkContext | TwitchVideoLinkContext | TwitterLinkContext | VideoLinkContext | VimeoLinkContext | YoutubeChannelLinkContext | YoutubePlaylistLinkContext | YoutubeVideoLinkContext;

export type LinkContextUnion = BookLinkContext | ChatbotLinkContext | ClubhouseLinkContext | CoachingLinkContext | CommercePayLinkContext | CommerceProductLinkContext | CommunityLinkContext | ContactDetailsLinkContext | DigitalDownloadLinkContext | EmailLinkContext | ExtensionLinkContext | FacebookLinkContext | FormLinkContext | GroupLinkContext | HeaderLinkContext | InstagramPostLinkContext | InstagramProfileLinkContext | KajabiCourseLinkContext | LinkerRecommendationsLinkContext | MobileAppLinkContext | MusicLinkContext | NftGalleryLinkContext | PinterestLinkContext | PodcastLinkContext | PreSaveLinkContext | ProductLinkContext | RequestLinkContext | RssFeedLinkContext | SpotifyLinkContext | SpringLinkContext | TemplateLinkContext | ThreadsLinkContext | TikTokJumpLinkContext | TikTokLinkContext | TikTokProfileLinkContext | TipGiftLinkContext | TwitchChannelLinkContext | TwitchCollectionLinkContext | TwitchLinkContext | TwitchVideoLinkContext | TwitterLinkContext | VideoLinkContext | VimeoLinkContext | YoutubeChannelLinkContext | YoutubeLinkContext | YoutubePlaylistLinkContext | YoutubeVideoLinkContext;

export type LinkConversionEvent = {
  readonly __typename: 'LinkConversionEvent';
  readonly conversionCount: Scalars['Int']['output'];
  readonly conversionRate: Scalars['Float']['output'];
  readonly eventId: Scalars['String']['output'];
  readonly eventName: Scalars['String']['output'];
};

export type LinkConversionEvents = {
  readonly __typename: 'LinkConversionEvents';
  readonly clicks: Scalars['Int']['output'];
  readonly conversionCount: Scalars['Int']['output'];
  readonly conversionRate: Scalars['Float']['output'];
  readonly events?: Maybe<ReadonlyArray<LinkConversionEvent>>;
};

export type LinkDevices = {
  readonly __typename: 'LinkDevices';
  readonly devices?: Maybe<ReadonlyArray<Maybe<AccountDevice>>>;
};

export enum LinkEmbedOptions {
  EmbedChannel = 'EMBED_CHANNEL',
  EmbedChat = 'EMBED_CHAT',
  EmbedEverything = 'EMBED_EVERYTHING',
  EmbedLatest = 'EMBED_LATEST',
  EmbedPreview = 'EMBED_PREVIEW',
  EmbedVideo = 'EMBED_VIDEO',
  LinkLatest = 'LINK_LATEST',
  LinkMatches = 'LINK_MATCHES',
  LinkOff = 'LINK_OFF'
}

export type LinkGatedContentResult = {
  readonly __typename: 'LinkGatedContentResult';
  readonly result?: Maybe<Scalars['String']['output']>;
};

export type LinkIqAudienceCategories = {
  readonly __typename: 'LinkIQAudienceCategories';
  readonly categories?: Maybe<ReadonlyArray<Maybe<LinkIqAudienceCategory>>>;
  readonly createdAt?: Maybe<Scalars['String']['output']>;
  readonly hasSufficientVisitors?: Maybe<Scalars['Boolean']['output']>;
  readonly visitorThresholdCount?: Maybe<Scalars['Int']['output']>;
  readonly visitorThresholdDays?: Maybe<Scalars['Int']['output']>;
};

export type LinkIqAudienceCategory = {
  readonly __typename: 'LinkIQAudienceCategory';
  readonly category: Scalars['String']['output'];
  readonly score: Scalars['Float']['output'];
};

export type LinkInput = {
  readonly linkId: Scalars['Float']['input'];
  readonly notificationSent?: InputMaybe<Scalars['DateTime']['input']>;
  readonly url?: InputMaybe<Scalars['String']['input']>;
};

export type LinkInsights = {
  readonly __typename: 'LinkInsights';
  readonly clickThroughRate?: Maybe<Scalars['Float']['output']>;
  readonly clicks?: Maybe<InsightClicks>;
  readonly clicksTrend?: Maybe<Scalars['Float']['output']>;
  readonly clicksTrendDifference?: Maybe<Scalars['Int']['output']>;
  readonly topBookPlatform?: Maybe<Scalars['String']['output']>;
  readonly topCountry?: Maybe<Scalars['String']['output']>;
  readonly topDevice?: Maybe<Scalars['String']['output']>;
  readonly topMobileAppPlatform?: Maybe<Scalars['String']['output']>;
  readonly topMusicPlatform?: Maybe<Scalars['String']['output']>;
  readonly topPodcastPlatform?: Maybe<Scalars['String']['output']>;
  readonly topPresavePlatform?: Maybe<Scalars['String']['output']>;
  readonly topReferrer?: Maybe<Scalars['String']['output']>;
  readonly viewsTrend?: Maybe<Scalars['Float']['output']>;
  readonly viewsTrendDifference?: Maybe<Scalars['Int']['output']>;
};

export type LinkLifetime = {
  readonly __typename: 'LinkLifetime';
  readonly clicks?: Maybe<LinkLifetimeClicks>;
};

export type LinkLifetimeClicks = {
  readonly __typename: 'LinkLifetimeClicks';
  readonly profile?: Maybe<Scalars['Int']['output']>;
  readonly total?: Maybe<Scalars['Int']['output']>;
  readonly tree?: Maybe<Scalars['Int']['output']>;
};

export type LinkLifetimeViews = {
  readonly __typename: 'LinkLifetimeViews';
  readonly total?: Maybe<Scalars['Int']['output']>;
};

export type LinkListFilterInput = {
  /** Shows links that match on a list of ids */
  readonly containsId?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']['input']>>>;
};

export type LinkLocations = {
  readonly __typename: 'LinkLocations';
  readonly countries?: Maybe<ReadonlyArray<Maybe<AccountCountry>>>;
};

export type LinkLtMetaData = {
  readonly __typename: 'LinkLtMetaData';
  readonly ltIsLinkTitleAiGenerated?: Maybe<Scalars['Boolean']['output']>;
  readonly ltThumbnailSourceType?: Maybe<LinkThumbnailSourceType>;
};

export type LinkMetaData = {
  readonly __typename: 'LinkMetaData';
  readonly description?: Maybe<Scalars['String']['output']>;
  readonly image?: Maybe<Scalars['String']['output']>;
  readonly imageAlt?: Maybe<Scalars['String']['output']>;
  readonly ogDescription?: Maybe<Scalars['String']['output']>;
  readonly ogImage?: Maybe<Scalars['String']['output']>;
  readonly ogImageAlt?: Maybe<Scalars['String']['output']>;
  readonly ogTitle?: Maybe<Scalars['String']['output']>;
  readonly thumbnail?: Maybe<Scalars['String']['output']>;
  readonly title?: Maybe<Scalars['String']['output']>;
};

export type LinkModifiers = {
  readonly __typename: 'LinkModifiers';
  readonly amazonAffiliate?: Maybe<AmazonAffiliate>;
  readonly amazonAffiliateType?: Maybe<Scalars['String']['output']>;
  readonly animation?: Maybe<ButtonHighlightType>;
  readonly forwardingEnd?: Maybe<Scalars['Date']['output']>;
  readonly forwardingTimezone?: Maybe<Scalars['String']['output']>;
  readonly isCurated?: Maybe<Scalars['Boolean']['output']>;
  readonly isForwarding: Scalars['Boolean']['output'];
  readonly isForwardingActive: Scalars['Boolean']['output'];
  readonly layoutOption?: Maybe<VisualLinkPreviewLayoutOption>;
  readonly scheduleEnd?: Maybe<Scalars['Date']['output']>;
  readonly scheduleEndTimezone?: Maybe<Scalars['String']['output']>;
  readonly scheduleStart?: Maybe<Scalars['Date']['output']>;
  readonly scheduleStartTimezone?: Maybe<Scalars['String']['output']>;
  readonly scheduledStatus?: Maybe<ScheduledStatus>;
  readonly shortLinkUuid?: Maybe<Scalars['String']['output']>;
  readonly sponsorshipId?: Maybe<Scalars['String']['output']>;
  readonly thumbnailUrl?: Maybe<Scalars['String']['output']>;
};

export type LinkModifiersInput = {
  readonly amazonAffiliate?: InputMaybe<AmazonAffiliateInput>;
  readonly animation?: InputMaybe<ButtonHighlightType>;
  readonly forwardingEnd?: InputMaybe<Scalars['String']['input']>;
  readonly forwardingTimezone?: InputMaybe<Scalars['String']['input']>;
  readonly isCurated?: InputMaybe<Scalars['Boolean']['input']>;
  readonly layoutOption?: InputMaybe<VisualLinkPreviewLayoutOption>;
  readonly scheduleEnd?: InputMaybe<Scalars['String']['input']>;
  readonly scheduleEndTimezone?: InputMaybe<Scalars['String']['input']>;
  readonly scheduleStart?: InputMaybe<Scalars['String']['input']>;
  readonly scheduleStartTimezone?: InputMaybe<Scalars['String']['input']>;
  readonly shortLinkUuid?: InputMaybe<Scalars['String']['input']>;
  readonly sponsorshipId?: InputMaybe<Scalars['String']['input']>;
  readonly thumbnailSourceType?: InputMaybe<LinkThumbnailSourceType>;
  readonly thumbnailUrl?: InputMaybe<Scalars['String']['input']>;
};

export type LinkOverview = {
  readonly __typename: 'LinkOverview';
  readonly lifetime?: Maybe<LinkOverviewRange>;
  readonly rangeBreakdown?: Maybe<ReadonlyArray<Maybe<LinkBreakdownRange>>>;
  readonly rangeSummary?: Maybe<LinkOverviewRange>;
};

export type LinkOverviewRange = {
  readonly __typename: 'LinkOverviewRange';
  readonly clickThroughRate?: Maybe<Scalars['Float']['output']>;
  readonly clicks?: Maybe<LinkLifetimeClicks>;
  readonly timeToClick?: Maybe<Scalars['Float']['output']>;
  readonly views?: Maybe<LinkLifetimeViews>;
};

export type LinkPayments = {
  readonly __typename: 'LinkPayments';
  readonly breakdown?: Maybe<ReadonlyArray<PaymentsByLinkDaily>>;
  readonly currency: Scalars['String']['output'];
  readonly lifetime: PaymentsByLinkTotals;
  readonly totals?: Maybe<PaymentsByLinkTotals>;
};

export type LinkPaymentsTrend = {
  readonly __typename: 'LinkPaymentsTrend';
  readonly count: Scalars['Int']['output'];
  readonly currency: Scalars['String']['output'];
  readonly trend: Scalars['Float']['output'];
};

export type LinkRecsMetaInput = {
  readonly isFallback?: InputMaybe<Scalars['Boolean']['input']>;
  readonly rank?: InputMaybe<Scalars['Int']['input']>;
  readonly source?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']['input']>>>;
};

export type LinkReferrers = {
  readonly __typename: 'LinkReferrers';
  readonly referrers?: Maybe<ReadonlyArray<Maybe<AccountReferrer>>>;
};

export type LinkRuleFilter = {
  readonly __typename: 'LinkRuleFilter';
  readonly referrers?: Maybe<ReadonlyArray<Maybe<Scalars['String']['output']>>>;
};

export type LinkRules = {
  readonly __typename: 'LinkRules';
  readonly gate?: Maybe<GateRule>;
};

export enum LinkStatus {
  Active = 'ACTIVE',
  Archived = 'ARCHIVED',
  Draft = 'DRAFT',
  Hidden = 'HIDDEN',
  PermanentlyArchived = 'PERMANENTLY_ARCHIVED'
}

export type LinkSubscribers = {
  readonly __typename: 'LinkSubscribers';
  readonly lastNotificationDate: Scalars['String']['output'];
  readonly notificationsSent: Scalars['Int']['output'];
  readonly subscribersClicksLifetime: Scalars['Int']['output'];
  readonly subscribersClicksRange?: Maybe<Scalars['Int']['output']>;
  readonly subscribersCtrLifetime: Scalars['Float']['output'];
  readonly subscribersCtrRange?: Maybe<Scalars['Float']['output']>;
};

export enum LinkThumbnailSourceType {
  Ai = 'AI',
  Custom = 'CUSTOM',
  Icon = 'ICON',
  OpenGraph = 'OPEN_GRAPH'
}

export type LinkTitleSuggestion = {
  readonly __typename: 'LinkTitleSuggestion';
  readonly description?: Maybe<Scalars['String']['output']>;
  readonly title?: Maybe<Scalars['String']['output']>;
};

export type LinkTitleSuggestionInput = {
  readonly collectionTitle?: InputMaybe<Scalars['String']['input']>;
  readonly isPartOfCollection?: InputMaybe<Scalars['Boolean']['input']>;
  readonly linkType?: InputMaybe<Scalars['String']['input']>;
  readonly numSuggestions?: InputMaybe<Scalars['Float']['input']>;
  readonly profileName?: InputMaybe<Scalars['String']['input']>;
  readonly url: Scalars['String']['input'];
};

export type LinkTitleSuggestionResponse = {
  readonly __typename: 'LinkTitleSuggestionResponse';
  readonly suggestions: ReadonlyArray<LinkTitleSuggestion>;
  readonly url: Scalars['String']['output'];
};

export enum LinkType {
  AbeBooksBook = 'ABE_BOOKS_BOOK',
  AirbitSong = 'AIRBIT_SONG',
  AlibrisBook = 'ALIBRIS_BOOK',
  AmazonBook = 'AMAZON_BOOK',
  AmazonHandmade = 'AMAZON_HANDMADE',
  AmazonMusicAlbum = 'AMAZON_MUSIC_ALBUM',
  AmazonMusicPodcastEpisode = 'AMAZON_MUSIC_PODCAST_EPISODE',
  AmazonMusicPodcastShow = 'AMAZON_MUSIC_PODCAST_SHOW',
  AmazonMusicSong = 'AMAZON_MUSIC_SONG',
  AmazonProduct = 'AMAZON_PRODUCT',
  AmazonShop = 'AMAZON_SHOP',
  AnchorFmPodcastAmbiguous = 'ANCHOR_FM_PODCAST_AMBIGUOUS',
  AnchorFmPodcastEpisode = 'ANCHOR_FM_PODCAST_EPISODE',
  AnchorFmPodcastShow = 'ANCHOR_FM_PODCAST_SHOW',
  AnghamiAlbum = 'ANGHAMI_ALBUM',
  AnghamiPodcastEpisode = 'ANGHAMI_PODCAST_EPISODE',
  AnghamiPodcastShow = 'ANGHAMI_PODCAST_SHOW',
  AnghamiSong = 'ANGHAMI_SONG',
  AngusRobertsonBook = 'ANGUS_ROBERTSON_BOOK',
  AppleAlbum = 'APPLE_ALBUM',
  AppleAppStoreMobileApp = 'APPLE_APP_STORE_MOBILE_APP',
  AppleBook = 'APPLE_BOOK',
  AppleMusicAlbum = 'APPLE_MUSIC_ALBUM',
  AppleMusicSong = 'APPLE_MUSIC_SONG',
  ApplePodcast = 'APPLE_PODCAST',
  ApplePodcastEpisode = 'APPLE_PODCAST_EPISODE',
  AppleSong = 'APPLE_SONG',
  AudibleAmbiguous = 'AUDIBLE_AMBIGUOUS',
  AudiblePodcastAmbiguous = 'AUDIBLE_PODCAST_AMBIGUOUS',
  AudiomackAlbum = 'AUDIOMACK_ALBUM',
  AudiomackPlaylist = 'AUDIOMACK_PLAYLIST',
  AudiomackSong = 'AUDIOMACK_SONG',
  AudiusAlbum = 'AUDIUS_ALBUM',
  AudiusSong = 'AUDIUS_SONG',
  AwaAlbum = 'AWA_ALBUM',
  AwaAmbiguous = 'AWA_AMBIGUOUS',
  AwaSong = 'AWA_SONG',
  BandcampAlbum = 'BANDCAMP_ALBUM',
  BandcampArtist = 'BANDCAMP_ARTIST',
  BandcampSong = 'BANDCAMP_SONG',
  BarnesAndNobleBook = 'BARNES_AND_NOBLE_BOOK',
  BarnesAndNobleProduct = 'BARNES_AND_NOBLE_PRODUCT',
  BbcProgrammeAmbiguous = 'BBC_PROGRAMME_AMBIGUOUS',
  BbcSoundsAmbiguous = 'BBC_SOUNDS_AMBIGUOUS',
  BeatportAlbum = 'BEATPORT_ALBUM',
  BeatportSong = 'BEATPORT_SONG',
  BetterWorldBooksBook = 'BETTER_WORLD_BOOKS_BOOK',
  BiblioBook = 'BIBLIO_BOOK',
  BigwaxProduct = 'BIGWAX_PRODUCT',
  BitlyShortlink = 'BITLY_SHORTLINK',
  BleepAlbum = 'BLEEP_ALBUM',
  BookshopOrgBook = 'BOOKSHOP_ORG_BOOK',
  BooksAMillionBook = 'BOOKS_A_MILLION_BOOK',
  BooksAMillionProduct = 'BOOKS_A_MILLION_PRODUCT',
  BooktopiaBook = 'BOOKTOPIA_BOOK',
  BookDepositoryBook = 'BOOK_DEPOSITORY_BOOK',
  BookGeneric = 'BOOK_GENERIC',
  BookOutletBook = 'BOOK_OUTLET_BOOK',
  BoomplayAlbum = 'BOOMPLAY_ALBUM',
  BoomplaySong = 'BOOMPLAY_SONG',
  BoomAlbum = 'BOOM_ALBUM',
  BoomSong = 'BOOM_SONG',
  BullhornPodcastEpisode = 'BULLHORN_PODCAST_EPISODE',
  BullhornPodcastShow = 'BULLHORN_PODCAST_SHOW',
  CastboxPodcastEpisode = 'CASTBOX_PODCAST_EPISODE',
  CastboxPodcastShow = 'CASTBOX_PODCAST_SHOW',
  CastroPodcastShow = 'CASTRO_PODCAST_SHOW',
  Chatbot = 'CHATBOT',
  CheggBook = 'CHEGG_BOOK',
  ClaroMusicaAlbum = 'CLARO_MUSICA_ALBUM',
  ClaroMusicaSong = 'CLARO_MUSICA_SONG',
  Classic = 'CLASSIC',
  ClubhouseClub = 'CLUBHOUSE_CLUB',
  ClubhouseEvent = 'CLUBHOUSE_EVENT',
  ClubhouseGeneric = 'CLUBHOUSE_GENERIC',
  ClubhouseProfile = 'CLUBHOUSE_PROFILE',
  ClubhouseRoom = 'CLUBHOUSE_ROOM',
  Coaching = 'COACHING',
  CommercePay = 'COMMERCE_PAY',
  CommerceProduct = 'COMMERCE_PRODUCT',
  Community = 'COMMUNITY',
  CommunityChannel = 'COMMUNITY_CHANNEL',
  ContactDetails = 'CONTACT_DETAILS',
  DatpiffAlbum = 'DATPIFF_ALBUM',
  DeezerAlbum = 'DEEZER_ALBUM',
  DeezerAmbiguous = 'DEEZER_AMBIGUOUS',
  DeezerPodcastEpisode = 'DEEZER_PODCAST_EPISODE',
  DeezerPodcastShow = 'DEEZER_PODCAST_SHOW',
  DeezerSong = 'DEEZER_SONG',
  DigitalDownload = 'DIGITAL_DOWNLOAD',
  DonluAlbum = 'DONLU_ALBUM',
  DonluPodcastEpisode = 'DONLU_PODCAST_EPISODE',
  DonluSong = 'DONLU_SONG',
  DonluUser = 'DONLU_USER',
  DymocksProduct = 'DYMOCKS_PRODUCT',
  EbayProduct = 'EBAY_PRODUCT',
  Email = 'EMAIL',
  Extension = 'EXTENSION',
  FacebookGeneric = 'FACEBOOK_GENERIC',
  FacebookVideo = 'FACEBOOK_VIDEO',
  Flight13Album = 'FLIGHT13_ALBUM',
  Form = 'FORM',
  FoylesBook = 'FOYLES_BOOK',
  FridayAlbum = 'FRIDAY_ALBUM',
  FridaySong = 'FRIDAY_SONG',
  FyeProduct = 'FYE_PRODUCT',
  GaanaAlbum = 'GAANA_ALBUM',
  GaanaPodcastShow = 'GAANA_PODCAST_SHOW',
  GaanaSong = 'GAANA_SONG',
  GoodpodsPodcastEpisode = 'GOODPODS_PODCAST_EPISODE',
  GoodpodsPodcastShow = 'GOODPODS_PODCAST_SHOW',
  GoogleBooksBook = 'GOOGLE_BOOKS_BOOK',
  GooglePlayBook = 'GOOGLE_PLAY_BOOK',
  GooglePlayMobileApp = 'GOOGLE_PLAY_MOBILE_APP',
  GooglePlayMovie = 'GOOGLE_PLAY_MOVIE',
  GooglePlayTvShow = 'GOOGLE_PLAY_TV_SHOW',
  GooglePodcastEpisode = 'GOOGLE_PODCAST_EPISODE',
  GooglePodcastShow = 'GOOGLE_PODCAST_SHOW',
  Group = 'GROUP',
  HachetteBookGroupBook = 'HACHETTE_BOOK_GROUP_BOOK',
  HardtunesAlbum = 'HARDTUNES_ALBUM',
  HardtunesSong = 'HARDTUNES_SONG',
  HarperCollinsBook = 'HARPER_COLLINS_BOOK',
  HdtracksAlbum = 'HDTRACKS_ALBUM',
  Header = 'HEADER',
  HmvAlbum = 'HMV_ALBUM',
  HungamaAlbum = 'HUNGAMA_ALBUM',
  HungamaPodcastEpisode = 'HUNGAMA_PODCAST_EPISODE',
  HungamaPodcastShow = 'HUNGAMA_PODCAST_SHOW',
  HungamaSong = 'HUNGAMA_SONG',
  IdagioAlbum = 'IDAGIO_ALBUM',
  IheartradioAlbum = 'IHEARTRADIO_ALBUM',
  IheartradioPodcastEpisode = 'IHEARTRADIO_PODCAST_EPISODE',
  IheartradioPodcastShow = 'IHEARTRADIO_PODCAST_SHOW',
  IheartradioSong = 'IHEARTRADIO_SONG',
  InstagramPost = 'INSTAGRAM_POST',
  InstagramProfile = 'INSTAGRAM_PROFILE',
  InstagramReel = 'INSTAGRAM_REEL',
  InstagramStory = 'INSTAGRAM_STORY',
  ItunesAlbum = 'ITUNES_ALBUM',
  ItunesSong = 'ITUNES_SONG',
  IvooxPodcastEpisode = 'IVOOX_PODCAST_EPISODE',
  IvooxPodcastShow = 'IVOOX_PODCAST_SHOW',
  JiosaavnAlbum = 'JIOSAAVN_ALBUM',
  JiosaavnPodcastEpisode = 'JIOSAAVN_PODCAST_EPISODE',
  JiosaavnPodcastShow = 'JIOSAAVN_PODCAST_SHOW',
  JiosaavnSong = 'JIOSAAVN_SONG',
  JooxAlbum = 'JOOX_ALBUM',
  JooxAmbiguous = 'JOOX_AMBIGUOUS',
  JooxSong = 'JOOX_SONG',
  JunodownloadAlbum = 'JUNODOWNLOAD_ALBUM',
  JunodownloadSong = 'JUNODOWNLOAD_SONG',
  KajabiCourse = 'KAJABI_COURSE',
  KkboxAlbum = 'KKBOX_ALBUM',
  KkboxPodcastEpisode = 'KKBOX_PODCAST_EPISODE',
  KkboxPodcastShow = 'KKBOX_PODCAST_SHOW',
  KkboxShortlink = 'KKBOX_SHORTLINK',
  KkboxSong = 'KKBOX_SONG',
  KugouAlbum = 'KUGOU_ALBUM',
  KugouSong = 'KUGOU_SONG',
  LineMusicAlbum = 'LINE_MUSIC_ALBUM',
  LineMusicSong = 'LINE_MUSIC_SONG',
  LinkerRecommendations = 'LINKER_RECOMMENDATIONS',
  ListnrPodcastEpisode = 'LISTNR_PODCAST_EPISODE',
  ListnrPodcastShow = 'LISTNR_PODCAST_SHOW',
  LivemixtapesAlbum = 'LIVEMIXTAPES_ALBUM',
  LuminaryPodcastEpisode = 'LUMINARY_PODCAST_EPISODE',
  LuminaryPodcastShow = 'LUMINARY_PODCAST_SHOW',
  MacmillanPublishersBook = 'MACMILLAN_PUBLISHERS_BOOK',
  Mailchimp = 'MAILCHIMP',
  MatterAlbum = 'MATTER_ALBUM',
  MatterSong = 'MATTER_SONG',
  MediamarktProduct = 'MEDIAMARKT_PRODUCT',
  MegaphonePodcastShow = 'MEGAPHONE_PODCAST_SHOW',
  MessagingPreview = 'MESSAGING_PREVIEW',
  MixcloudShow = 'MIXCLOUD_SHOW',
  MixcloudUser = 'MIXCLOUD_USER',
  MobileAppGeneric = 'MOBILE_APP_GENERIC',
  MusicGeneric = 'MUSIC_GENERIC',
  Mx3ChSong = 'MX3CH_SONG',
  MyMixtapezAlbum = 'MY_MIXTAPEZ_ALBUM',
  MyMixtapezSong = 'MY_MIXTAPEZ_SONG',
  NapsterAlbum = 'NAPSTER_ALBUM',
  NapsterSong = 'NAPSTER_SONG',
  NeteaseCloudMusicAlbum = 'NETEASE_CLOUD_MUSIC_ALBUM',
  NeteaseCloudMusicSong = 'NETEASE_CLOUD_MUSIC_SONG',
  NewburyComicsProduct = 'NEWBURY_COMICS_PRODUCT',
  NftGallery = 'NFT_GALLERY',
  Odesli = 'ODESLI',
  OdesliAmbiguous = 'ODESLI_AMBIGUOUS',
  OkListenAlbum = 'OK_LISTEN_ALBUM',
  OkListenSong = 'OK_LISTEN_SONG',
  Onlyfans = 'ONLYFANS',
  OvercastPodcastEpisode = 'OVERCAST_PODCAST_EPISODE',
  OvercastPodcastShow = 'OVERCAST_PODCAST_SHOW',
  PandoraAlbum = 'PANDORA_ALBUM',
  PandoraAmbiguous = 'PANDORA_AMBIGUOUS',
  PandoraPodcastEpisode = 'PANDORA_PODCAST_EPISODE',
  PandoraPodcastShow = 'PANDORA_PODCAST_SHOW',
  PandoraSong = 'PANDORA_SONG',
  PeachpitBook = 'PEACHPIT_BOOK',
  PenguinRandomHouseBook = 'PENGUIN_RANDOM_HOUSE_BOOK',
  PhonicaRecordsProduct = 'PHONICA_RECORDS_PRODUCT',
  PinterestBoard = 'PINTEREST_BOARD',
  PinterestGeneric = 'PINTEREST_GENERIC',
  PinterestPin = 'PINTEREST_PIN',
  PinterestProfile = 'PINTEREST_PROFILE',
  PlayerFmPodcastEpisode = 'PLAYER_FM_PODCAST_EPISODE',
  PlayerFmPodcastShow = 'PLAYER_FM_PODCAST_SHOW',
  PocketcastsPodcastShow = 'POCKETCASTS_PODCAST_SHOW',
  PodbeanPodcastEpisode = 'PODBEAN_PODCAST_EPISODE',
  PodbeanPodcastShow = 'PODBEAN_PODCAST_SHOW',
  PodcastAddictPodcastEpisode = 'PODCAST_ADDICT_PODCAST_EPISODE',
  PodcastAddictPodcastShow = 'PODCAST_ADDICT_PODCAST_SHOW',
  PodcastGeneric = 'PODCAST_GENERIC',
  PodcastGuruPodcastEpisode = 'PODCAST_GURU_PODCAST_EPISODE',
  PodcastGuruPodcastShow = 'PODCAST_GURU_PODCAST_SHOW',
  PodcastRepublicPodcastShow = 'PODCAST_REPUBLIC_PODCAST_SHOW',
  PodfriendPodcastEpisode = 'PODFRIEND_PODCAST_EPISODE',
  PodfriendPodcastShow = 'PODFRIEND_PODCAST_SHOW',
  PodheroPodcastEpisode = 'PODHERO_PODCAST_EPISODE',
  PodheroPodcastShow = 'PODHERO_PODCAST_SHOW',
  PorchlightBookCompanyBook = 'PORCHLIGHT_BOOK_COMPANY_BOOK',
  PowellsBook = 'POWELLS_BOOK',
  PreSaveLink = 'PRE_SAVE_LINK',
  Product = 'PRODUCT',
  QbdBooksBook = 'QBD_BOOKS_BOOK',
  QobuzAlbum = 'QOBUZ_ALBUM',
  QobuzSong = 'QOBUZ_SONG',
  QqMusicAlbum = 'QQ_MUSIC_ALBUM',
  QqMusicSong = 'QQ_MUSIC_SONG',
  RaagaAlbum = 'RAAGA_ALBUM',
  RaagaSong = 'RAAGA_SONG',
  RadioPublicPodcastEpisode = 'RADIO_PUBLIC_PODCAST_EPISODE',
  RadioPublicPodcastShow = 'RADIO_PUBLIC_PODCAST_SHOW',
  RecochokuAlbum = 'RECOCHOKU_ALBUM',
  RecochokuSong = 'RECOCHOKU_SONG',
  RedeyeRecordsAlbum = 'REDEYE_RECORDS_ALBUM',
  RegisterAction = 'REGISTER_ACTION',
  Request = 'REQUEST',
  RessoAlbum = 'RESSO_ALBUM',
  RessoAmbiguous = 'RESSO_AMBIGUOUS',
  RessoSong = 'RESSO_SONG',
  RoughTradeProduct = 'ROUGH_TRADE_PRODUCT',
  RssFeed = 'RSS_FEED',
  RssGeneric = 'RSS_GENERIC',
  SevenDigitalAlbum = 'SEVEN_DIGITAL_ALBUM',
  ShopPreview = 'SHOP_PREVIEW',
  SimonSchusterBook = 'SIMON_SCHUSTER_BOOK',
  SonnetPodcastShow = 'SONNET_PODCAST_SHOW',
  SontrackRuAlbum = 'SONTRACK_RU_ALBUM',
  SoundcloudAmbiguous = 'SOUNDCLOUD_AMBIGUOUS',
  SoundcloudArtist = 'SOUNDCLOUD_ARTIST',
  SoundcloudPlaylist = 'SOUNDCLOUD_PLAYLIST',
  SoundcloudSong = 'SOUNDCLOUD_SONG',
  SpinrillaAlbum = 'SPINRILLA_ALBUM',
  SpinrillaSong = 'SPINRILLA_SONG',
  SpotifyAlbum = 'SPOTIFY_ALBUM',
  SpotifyAmbiguous = 'SPOTIFY_AMBIGUOUS',
  SpotifyArtist = 'SPOTIFY_ARTIST',
  SpotifyEpisode = 'SPOTIFY_EPISODE',
  SpotifyGeneric = 'SPOTIFY_GENERIC',
  SpotifyPlaylist = 'SPOTIFY_PLAYLIST',
  SpotifyShow = 'SPOTIFY_SHOW',
  SpotifySong = 'SPOTIFY_SONG',
  SpreakerPodcastEpisode = 'SPREAKER_PODCAST_EPISODE',
  SpreakerPodcastShow = 'SPREAKER_PODCAST_SHOW',
  Spring = 'SPRING',
  SpringGeneric = 'SPRING_GENERIC',
  StitcherPodcast = 'STITCHER_PODCAST',
  StitcherPodcastEpisode = 'STITCHER_PODCAST_EPISODE',
  SubscribeOnAndroidPodcastShow = 'SUBSCRIBE_ON_ANDROID_PODCAST_SHOW',
  TargetProduct = 'TARGET_PRODUCT',
  ThreadsGeneric = 'THREADS_GENERIC',
  ThreadsProfile = 'THREADS_PROFILE',
  ThreadsThread = 'THREADS_THREAD',
  ThriftbooksBook = 'THRIFTBOOKS_BOOK',
  TidalAlbum = 'TIDAL_ALBUM',
  TidalSong = 'TIDAL_SONG',
  TidalUser = 'TIDAL_USER',
  TiktokGeneric = 'TIKTOK_GENERIC',
  TiktokJump = 'TIKTOK_JUMP',
  TiktokProfile = 'TIKTOK_PROFILE',
  TiktokShortlink = 'TIKTOK_SHORTLINK',
  TiktokSong = 'TIKTOK_SONG',
  TiktokVideo = 'TIKTOK_VIDEO',
  TipGift = 'TIP_GIFT',
  TraxsourceAlbum = 'TRAXSOURCE_ALBUM',
  TraxsourceSong = 'TRAXSOURCE_SONG',
  TuneInPodcastEpisode = 'TUNE_IN_PODCAST_EPISODE',
  TuneInPodcastShow = 'TUNE_IN_PODCAST_SHOW',
  TwitchChannel = 'TWITCH_CHANNEL',
  TwitchCollection = 'TWITCH_COLLECTION',
  TwitchGeneric = 'TWITCH_GENERIC',
  TwitchVideo = 'TWITCH_VIDEO',
  TwitterGeneric = 'TWITTER_GENERIC',
  TwitterStatus = 'TWITTER_STATUS',
  TwitterStatusLatest = 'TWITTER_STATUS_LATEST',
  UrbanOutfittersProduct = 'URBAN_OUTFITTERS_PRODUCT',
  ValoreBooksBook = 'VALORE_BOOKS_BOOK',
  VideoGeneric = 'VIDEO_GENERIC',
  VimeoGeneric = 'VIMEO_GENERIC',
  VimeoVideo = 'VIMEO_VIDEO',
  VinylMePleaseProduct = 'VINYL_ME_PLEASE_PRODUCT',
  VkMusicAlbum = 'VK_MUSIC_ALBUM',
  VkMusicSong = 'VK_MUSIC_SONG',
  WalmartProduct = 'WALMART_PRODUCT',
  WaterstonesBook = 'WATERSTONES_BOOK',
  WynkMusicAlbum = 'WYNK_MUSIC_ALBUM',
  WynkMusicShortlink = 'WYNK_MUSIC_SHORTLINK',
  WynkMusicSong = 'WYNK_MUSIC_SONG',
  YandexAlbum = 'YANDEX_ALBUM',
  YandexMusicAlbum = 'YANDEX_MUSIC_ALBUM',
  YandexMusicSong = 'YANDEX_MUSIC_SONG',
  YandexSong = 'YANDEX_SONG',
  YoutubeChannel = 'YOUTUBE_CHANNEL',
  YoutubeGeneric = 'YOUTUBE_GENERIC',
  YoutubeMusicAlbum = 'YOUTUBE_MUSIC_ALBUM',
  YoutubeMusicPodcastEpisode = 'YOUTUBE_MUSIC_PODCAST_EPISODE',
  YoutubeMusicSong = 'YOUTUBE_MUSIC_SONG',
  YoutubePlaylist = 'YOUTUBE_PLAYLIST',
  YoutubeVideo = 'YOUTUBE_VIDEO',
  ZvukAlbum = 'ZVUK_ALBUM',
  ZvukPodcastShow = 'ZVUK_PODCAST_SHOW',
  ZvukSong = 'ZVUK_SONG'
}

export type LinkTypeCategory = {
  readonly __typename: 'LinkTypeCategory';
  readonly categoryId: Scalars['String']['output'];
  readonly description?: Maybe<Scalars['String']['output']>;
  readonly order?: Maybe<Scalars['Int']['output']>;
  readonly title: Scalars['String']['output'];
};

export type LinkTypeItem = {
  readonly description: Scalars['String']['output'];
  readonly linkTypeId: Scalars['String']['output'];
  readonly metadata?: Maybe<LinkTypeRecommendedMetaData>;
  readonly order?: Maybe<Scalars['Int']['output']>;
  readonly searchTerms: ReadonlyArray<Scalars['String']['output']>;
  readonly title: Scalars['String']['output'];
};

export type LinkTypeItemGroup = LinkTypeItem & {
  readonly __typename: 'LinkTypeItemGroup';
  readonly description: Scalars['String']['output'];
  readonly linkTypeId: Scalars['String']['output'];
  readonly metadata?: Maybe<LinkTypeRecommendedMetaData>;
  readonly order?: Maybe<Scalars['Int']['output']>;
  readonly searchTerms: ReadonlyArray<Scalars['String']['output']>;
  readonly subLinks?: Maybe<ReadonlyArray<Maybe<Scalars['String']['output']>>>;
  readonly title: Scalars['String']['output'];
};

export type LinkTypeItemSingle = LinkTypeItem & {
  readonly __typename: 'LinkTypeItemSingle';
  readonly description: Scalars['String']['output'];
  readonly linkType: Scalars['String']['output'];
  readonly linkTypeId: Scalars['String']['output'];
  readonly metadata?: Maybe<LinkTypeRecommendedMetaData>;
  readonly order?: Maybe<Scalars['Int']['output']>;
  readonly searchTerms: ReadonlyArray<Scalars['String']['output']>;
  readonly title: Scalars['String']['output'];
};

export type LinkTypeRecommendedMetaData = {
  readonly __typename: 'LinkTypeRecommendedMetaData';
  readonly isFallback?: Maybe<Scalars['Boolean']['output']>;
  readonly rank?: Maybe<Scalars['Int']['output']>;
  readonly source?: Maybe<ReadonlyArray<Maybe<Scalars['String']['output']>>>;
};

export type LinkTypes = {
  readonly __typename: 'LinkTypes';
  readonly categories: ReadonlyArray<Maybe<LinkTypesCategory>>;
  readonly recommended: ReadonlyArray<Maybe<LinkTypeItem>>;
};

export type LinkTypesCategory = {
  readonly __typename: 'LinkTypesCategory';
  readonly category?: Maybe<LinkTypeCategory>;
  readonly linkTypes: ReadonlyArray<Maybe<LinkTypeItem>>;
};

export type LinkerRecommendation = {
  readonly __typename: 'LinkerRecommendation';
  readonly accountUuid?: Maybe<Scalars['String']['output']>;
  readonly customAvatarUrl?: Maybe<Scalars['String']['output']>;
  readonly invalidUsername?: Maybe<Scalars['String']['output']>;
  readonly profileTitle?: Maybe<Scalars['String']['output']>;
  readonly username?: Maybe<Scalars['String']['output']>;
  readonly verificationTick?: Maybe<Scalars['Boolean']['output']>;
};

export type LinkerRecommendationsLinkContext = {
  readonly __typename: 'LinkerRecommendationsLinkContext';
  readonly recommendedAccounts?: Maybe<ReadonlyArray<Maybe<LinkerRecommendation>>>;
};

export type LinkerRecommendationsLinkContextInput = {
  readonly description?: InputMaybe<Scalars['String']['input']>;
  readonly recommendedAccounts: ReadonlyArray<Scalars['String']['input']>;
};

export type LinksFilterInput = {
  readonly excludeLayoutOptions?: InputMaybe<ReadonlyArray<InputMaybe<VisualLinkPreviewLayoutOption>>>;
  readonly hasAnimation?: InputMaybe<Scalars['Boolean']['input']>;
  readonly includeArchived?: InputMaybe<Scalars['Boolean']['input']>;
  readonly includeDeleted?: InputMaybe<Scalars['Boolean']['input']>;
  readonly includeDisabled?: InputMaybe<Scalars['Boolean']['input']>;
  readonly includeIncomplete?: InputMaybe<Scalars['Boolean']['input']>;
  readonly includeNested?: InputMaybe<Scalars['Boolean']['input']>;
  readonly includeScheduledOff?: InputMaybe<Scalars['Boolean']['input']>;
  readonly includeUnsafe?: InputMaybe<Scalars['Boolean']['input']>;
  readonly isForwardingActive?: InputMaybe<Scalars['Boolean']['input']>;
  readonly isSponsorshipLink?: InputMaybe<Scalars['Boolean']['input']>;
  readonly limit?: InputMaybe<Scalars['Int']['input']>;
  readonly linkTypes?: InputMaybe<ReadonlyArray<InputMaybe<LinkType>>>;
};

export type LinksPage = {
  readonly __typename: 'LinksPage';
  readonly items: ReadonlyArray<Link>;
  readonly totalCount: Scalars['Int']['output'];
};

export type LoginUserInput = {
  readonly password: Scalars['String']['input'];
  readonly username: Scalars['String']['input'];
};

export type LoginUserResult = {
  readonly __typename: 'LoginUserResult';
  readonly currentUser?: Maybe<User>;
};

/** The order direction. */
export enum LtFollowersApiOrderByDirection {
  Asc = 'ASC',
  Desc = 'DESC'
}

export type LtFollowersApiPageInfo = {
  readonly __typename: 'LtFollowersApiPageInfo';
  /** A 0-based index represents the position of the last item in this page within the entire set of query results. NOTE that this is calculated based on the cursor. It can be inaccurate when new items are added or removed between the queries. */
  readonly curPageEndIndex?: Maybe<Scalars['Int']['output']>;
  /** A 0-based index represents the position of the first item in this page within the entire set of query results. NOTE that this is calculated based on the cursor. It can be inaccurate when new items are added or removed between the queries. */
  readonly curPageStartIndex?: Maybe<Scalars['Int']['output']>;
  /** The cursor of the last item in the page. */
  readonly endCursor?: Maybe<Scalars['String']['output']>;
  readonly hasNextPage: Scalars['Boolean']['output'];
  readonly hasPreviousPage: Scalars['Boolean']['output'];
  /** The cursor of the first item in the page. */
  readonly startCursor?: Maybe<Scalars['String']['output']>;
  /** The total number of items for the query. */
  readonly totalCount?: Maybe<Scalars['Int']['output']>;
};

/** The type of form */
export enum LtFollowersFormType {
  CommunitySubscriptionForm = 'COMMUNITY_SUBSCRIPTION_FORM',
  CommunitySubscriptionWhatsappForm = 'COMMUNITY_SUBSCRIPTION_WHATSAPP_FORM',
  CustomForm = 'CUSTOM_FORM',
  DigitalDownloadForm = 'DIGITAL_DOWNLOAD_FORM',
  KajabiCourseForm = 'KAJABI_COURSE_FORM',
  LinkSubscribeUnlockForm = 'LINK_SUBSCRIBE_UNLOCK_FORM',
  ProfileSubscribeForm = 'PROFILE_SUBSCRIBE_FORM',
  Unknown = 'UNKNOWN'
}

export enum Luminance {
  Dark = 'DARK',
  Light = 'LIGHT'
}

export type MailChimpList = {
  readonly __typename: 'MailChimpList';
  readonly id?: Maybe<Scalars['String']['output']>;
  readonly name?: Maybe<Scalars['String']['output']>;
};

export type MailchimpIntegration = ServiceIntegration & {
  readonly __typename: 'MailchimpIntegration';
  readonly authorizationCode?: Maybe<Scalars['String']['output']>;
  readonly id: Scalars['String']['output'];
  readonly messages: ReadonlyArray<Maybe<Message>>;
  readonly status: ServiceIntegrationStatus;
  readonly title?: Maybe<Scalars['String']['output']>;
  readonly type: ServiceIntegrationType;
};

export type MailchimpIntegrationContext = {
  readonly __typename: 'MailchimpIntegrationContext';
  readonly accessToken?: Maybe<Scalars['String']['output']>;
  readonly message?: Maybe<Scalars['String']['output']>;
  readonly position?: Maybe<Scalars['String']['output']>;
  readonly storageKey?: Maybe<Scalars['String']['output']>;
  readonly termsActive?: Maybe<Scalars['Boolean']['output']>;
  readonly termsLabel?: Maybe<Scalars['String']['output']>;
  readonly termsUrl?: Maybe<Scalars['String']['output']>;
  readonly title?: Maybe<Scalars['String']['output']>;
};

export type MailingIntegrationContextInput = {
  readonly accessToken?: InputMaybe<Scalars['String']['input']>;
  readonly createdAt?: InputMaybe<Scalars['Int']['input']>;
  readonly expiresIn?: InputMaybe<Scalars['Int']['input']>;
  readonly message?: InputMaybe<Scalars['String']['input']>;
  readonly position?: InputMaybe<Scalars['String']['input']>;
  readonly refreshToken?: InputMaybe<Scalars['String']['input']>;
  readonly storageKey?: InputMaybe<Scalars['String']['input']>;
  readonly termsActive?: InputMaybe<Scalars['Boolean']['input']>;
  readonly termsLabel?: InputMaybe<Scalars['String']['input']>;
  readonly termsUrl?: InputMaybe<Scalars['String']['input']>;
  readonly title?: InputMaybe<Scalars['String']['input']>;
  readonly webhookUrl?: InputMaybe<Scalars['String']['input']>;
};

export type ManageAccountProductToCollectionInput = {
  readonly accountProductId: Scalars['String']['input'];
  readonly accountUuid: Scalars['String']['input'];
  readonly collectionId: Scalars['String']['input'];
};

export type ManageMarketplaceInstanceToCollectionInput = {
  readonly accountUuid: Scalars['String']['input'];
  readonly collectionId: Scalars['String']['input'];
  readonly marketplaceInstanceId: Scalars['String']['input'];
};

export type MarkAllNotificationsReadResponse = {
  readonly __typename: 'MarkAllNotificationsReadResponse';
  readonly updated: Scalars['Float']['output'];
};

export type MarkNotificationAsReadResponse = {
  readonly __typename: 'MarkNotificationAsReadResponse';
  readonly readAt?: Maybe<Scalars['String']['output']>;
  readonly success: Scalars['Boolean']['output'];
};

export type MediaKitMetricsMonolith = {
  readonly __typename: 'MediaKitMetricsMonolith';
  readonly isEnabled?: Maybe<Scalars['Boolean']['output']>;
  readonly name?: Maybe<Scalars['String']['output']>;
};

export type MediaKitMonolith = {
  readonly __typename: 'MediaKitMonolith';
  readonly avatar?: Maybe<Scalars['String']['output']>;
  readonly description?: Maybe<Scalars['String']['output']>;
  readonly location?: Maybe<Scalars['String']['output']>;
  readonly metrics?: Maybe<ReadonlyArray<Maybe<MediaKitMetricsMonolith>>>;
  readonly name?: Maybe<Scalars['String']['output']>;
  readonly pronouns?: Maybe<Scalars['String']['output']>;
  readonly socials?: Maybe<ReadonlyArray<Maybe<MediaKitSocialMonolith>>>;
  readonly tags?: Maybe<ReadonlyArray<Maybe<Scalars['String']['output']>>>;
};

export type MediaKitSocialMonolith = {
  readonly __typename: 'MediaKitSocialMonolith';
  readonly isEnabled?: Maybe<Scalars['Boolean']['output']>;
  readonly name?: Maybe<Scalars['String']['output']>;
};

export type Message = {
  readonly __typename: 'Message';
  readonly code: MessageCode;
  readonly context?: Maybe<MessageContext>;
  readonly level: MessageLevel;
  readonly path?: Maybe<ReadonlyArray<Scalars['String']['output']>>;
};

export enum MessageCode {
  AddInPlaceCallout = 'ADD_IN_PLACE_CALLOUT',
  AmazonAffiliateNotEnabled = 'AMAZON_AFFILIATE_NOT_ENABLED',
  AmazonAffiliateNotEnabledWithTag = 'AMAZON_AFFILIATE_NOT_ENABLED_WITH_TAG',
  AuthorizationRevoked = 'AUTHORIZATION_REVOKED',
  AwaitingStripeVerification = 'AWAITING_STRIPE_VERIFICATION',
  CommerceLinkAppCue = 'COMMERCE_LINK_APP_CUE',
  ConnectedServiceEmailNotConfirmed = 'CONNECTED_SERVICE_EMAIL_NOT_CONFIRMED',
  DigitalWalletCurrencyMismatch = 'DIGITAL_WALLET_CURRENCY_MISMATCH',
  DocumentPaymentLockAppCue = 'DOCUMENT_PAYMENT_LOCK_APP_CUE',
  DummyLink = 'DUMMY_LINK',
  EoiFeatureCommunityAudienceApproval = 'EOI_FEATURE_COMMUNITY_AUDIENCE_APPROVAL',
  EoiFeatureCommunityPricingPaid = 'EOI_FEATURE_COMMUNITY_PRICING_PAID',
  ExistingKajabiCourseLink = 'EXISTING_KAJABI_COURSE_LINK',
  ExpiredSocialIntegration = 'EXPIRED_SOCIAL_INTEGRATION',
  ExpiringSocialIntegration = 'EXPIRING_SOCIAL_INTEGRATION',
  FeatureNoLongerAvailable = 'FEATURE_NO_LONGER_AVAILABLE',
  InactivePaymentGate = 'INACTIVE_PAYMENT_GATE',
  IncompleteBookLink = 'INCOMPLETE_BOOK_LINK',
  IncompleteChatbotLink = 'INCOMPLETE_CHATBOT_LINK',
  IncompleteCoachingLink = 'INCOMPLETE_COACHING_LINK',
  IncompleteCommerceProductLink = 'INCOMPLETE_COMMERCE_PRODUCT_LINK',
  IncompleteCommunityChannelLink = 'INCOMPLETE_COMMUNITY_CHANNEL_LINK',
  IncompleteCommunityLink = 'INCOMPLETE_COMMUNITY_LINK',
  IncompleteDigitalDownloadLink = 'INCOMPLETE_DIGITAL_DOWNLOAD_LINK',
  IncompleteExtensionLink = 'INCOMPLETE_EXTENSION_LINK',
  IncompleteFormLink = 'INCOMPLETE_FORM_LINK',
  IncompleteInstagramProfileLink = 'INCOMPLETE_INSTAGRAM_PROFILE_LINK',
  IncompleteKajabiCourseLink = 'INCOMPLETE_KAJABI_COURSE_LINK',
  IncompleteMobileAppLink = 'INCOMPLETE_MOBILE_APP_LINK',
  IncompleteMusicLink = 'INCOMPLETE_MUSIC_LINK',
  IncompletePaymentGate = 'INCOMPLETE_PAYMENT_GATE',
  IncompletePayLink = 'INCOMPLETE_PAY_LINK',
  IncompletePodcastLink = 'INCOMPLETE_PODCAST_LINK',
  IncompletePreSaveLink = 'INCOMPLETE_PRE_SAVE_LINK',
  IncompleteProductLink = 'INCOMPLETE_PRODUCT_LINK',
  IncompleteSnapchatLink = 'INCOMPLETE_SNAPCHAT_LINK',
  IncompleteStripeSetup = 'INCOMPLETE_STRIPE_SETUP',
  IncompleteUrlLink = 'INCOMPLETE_URL_LINK',
  IncompleteVideoLink = 'INCOMPLETE_VIDEO_LINK',
  InstagramDmCoachmarkCallout = 'INSTAGRAM_DM_COACHMARK_CALLOUT',
  InsufficientDigitalProductPurchaseAmount = 'INSUFFICIENT_DIGITAL_PRODUCT_PURCHASE_AMOUNT',
  InsufficientPermissionsSocialIntegration = 'INSUFFICIENT_PERMISSIONS_SOCIAL_INTEGRATION',
  IntegrationIncomplete = 'INTEGRATION_INCOMPLETE',
  InvalidApplication = 'INVALID_APPLICATION',
  InvalidExtensionLink = 'INVALID_EXTENSION_LINK',
  InvalidUrl = 'INVALID_URL',
  LeapLinkExpired = 'LEAP_LINK_EXPIRED',
  LocationDeactivated = 'LOCATION_DEACTIVATED',
  MissingCapabilityCardPayments = 'MISSING_CAPABILITY_CARD_PAYMENTS',
  MissingCapabilityChargesEnabled = 'MISSING_CAPABILITY_CHARGES_ENABLED',
  MissingCapabilityTransfers = 'MISSING_CAPABILITY_TRANSFERS',
  MissingInstagramPageAccess = 'MISSING_INSTAGRAM_PAGE_ACCESS',
  MissingIntegration = 'MISSING_INTEGRATION',
  MissingPrimaryCurrency = 'MISSING_PRIMARY_CURRENCY',
  NextBestActionsCompleted = 'NEXT_BEST_ACTIONS_COMPLETED',
  NextBestActionsCustomizeAppearance = 'NEXT_BEST_ACTIONS_CUSTOMIZE_APPEARANCE',
  NextBestActionsSocialLinks = 'NEXT_BEST_ACTIONS_SOCIAL_LINKS',
  OnboardingAddImportantLinks = 'ONBOARDING_ADD_IMPORTANT_LINKS',
  OnboardingAddNameAndBio = 'ONBOARDING_ADD_NAME_AND_BIO',
  OnboardingAddProfileImage = 'ONBOARDING_ADD_PROFILE_IMAGE',
  OnboardingConnectInstagram = 'ONBOARDING_CONNECT_INSTAGRAM',
  OnboardingConnectTikTok = 'ONBOARDING_CONNECT_TIK_TOK',
  OnboardingShareLinktree = 'ONBOARDING_SHARE_LINKTREE',
  PaymentsNotEnabled = 'PAYMENTS_NOT_ENABLED',
  PaymentGateRemoved = 'PAYMENT_GATE_REMOVED',
  PaymentServiceUnavailable = 'PAYMENT_SERVICE_UNAVAILABLE',
  PreStripe = 'PRE_STRIPE',
  ProductLinkAppCue = 'PRODUCT_LINK_APP_CUE',
  ProductLinkUrlInvalid = 'PRODUCT_LINK_URL_INVALID',
  ReauthorizationRequired = 'REAUTHORIZATION_REQUIRED',
  ScheduledLinkExpired = 'SCHEDULED_LINK_EXPIRED',
  ScheduledLinkPending = 'SCHEDULED_LINK_PENDING',
  SensitiveAccount = 'SENSITIVE_ACCOUNT',
  ServiceUnavailable = 'SERVICE_UNAVAILABLE',
  ShareLinkTooltipEnabled = 'SHARE_LINK_TOOLTIP_ENABLED',
  ShopifyStoreUnavailable = 'SHOPIFY_STORE_UNAVAILABLE',
  ShopifyUnauthorized = 'SHOPIFY_UNAUTHORIZED',
  StripePreviouslyVerifiedWithNoAmount = 'STRIPE_PREVIOUSLY_VERIFIED_WITH_NO_AMOUNT',
  StripeVerifiedWithNoAmount = 'STRIPE_VERIFIED_WITH_NO_AMOUNT',
  TokenRefreshFailed = 'TOKEN_REFRESH_FAILED',
  UnhealthyServiceIntegration = 'UNHEALTHY_SERVICE_INTEGRATION',
  UnsafeLink = 'UNSAFE_LINK',
  UnsafeUrl = 'UNSAFE_URL',
  UnsupportedStripeCountry = 'UNSUPPORTED_STRIPE_COUNTRY',
  VisualLinkPreviewCallout = 'VISUAL_LINK_PREVIEW_CALLOUT'
}

export type MessageContext = {
  readonly __typename: 'MessageContext';
  readonly provider?: Maybe<Scalars['String']['output']>;
  readonly status?: Maybe<Scalars['String']['output']>;
};

export enum MessageLevel {
  Error = 'ERROR',
  Info = 'INFO',
  Warning = 'WARNING'
}

export type MessageTemplate = {
  readonly __typename: 'MessageTemplate';
  /** The body of the message template */
  readonly body: Scalars['String']['output'];
  /** The fields of the message template */
  readonly fields: ReadonlyArray<Scalars['String']['output']>;
  /** The id of the message template */
  readonly id: Scalars['String']['output'];
  /** The product of the message template */
  readonly product?: Maybe<CommerceStoreProduct>;
  /** The subtitle of the message template */
  readonly subtitle?: Maybe<Scalars['String']['output']>;
  /** The title of the message template */
  readonly title?: Maybe<Scalars['String']['output']>;
};

export type MessagingFaq = {
  readonly __typename: 'MessagingFaq';
  readonly answer: Scalars['String']['output'];
  readonly enabled: Scalars['Boolean']['output'];
  readonly id: Scalars['String']['output'];
  readonly order?: Maybe<Scalars['Int']['output']>;
  readonly question: Scalars['String']['output'];
};

export type MessagingFaqInput = {
  readonly answer?: InputMaybe<Scalars['String']['input']>;
  readonly enabled?: InputMaybe<Scalars['Boolean']['input']>;
  readonly id?: InputMaybe<Scalars['String']['input']>;
  readonly order?: InputMaybe<Scalars['Int']['input']>;
  readonly question?: InputMaybe<Scalars['String']['input']>;
};

export type MessagingSettings = {
  readonly __typename: 'MessagingSettings';
  readonly enabled?: Maybe<Scalars['Boolean']['output']>;
  readonly faqs?: Maybe<ReadonlyArray<Maybe<MessagingFaq>>>;
  readonly faqsEnabled?: Maybe<Scalars['Boolean']['output']>;
};

export type MessagingSettingsInput = {
  readonly enabled?: InputMaybe<Scalars['Boolean']['input']>;
};

export type MetaAttributes = {
  readonly __typename: 'MetaAttributes';
  readonly ogImageBackgroundColor?: Maybe<Scalars['String']['output']>;
  readonly ogImageBackgroundType?: Maybe<OgImageBackgroundType>;
};

export type MfaFactor = {
  readonly __typename: 'MfaFactor';
  readonly active: Scalars['Boolean']['output'];
  readonly authenticatorId: Scalars['String']['output'];
  readonly type: Scalars['String']['output'];
};

export type MigrateUserToPasswordUserMutationResult = {
  readonly __typename: 'MigrateUserToPasswordUserMutationResult';
  readonly success?: Maybe<Scalars['Boolean']['output']>;
};

export enum MigrationPath {
  BatchUpdate = 'batch_update',
  ScheduledWorker = 'scheduled_worker',
  SubscriptionReactivated = 'subscription_reactivated',
  SubscriptionRenewed = 'subscription_renewed'
}

export enum MigrationStatus {
  Completed = 'completed',
  EmailSent = 'email_sent',
  Failed = 'failed',
  Initiated = 'initiated',
  Scheduled = 'scheduled',
  Skipped = 'skipped',
  Stopped = 'stopped'
}

export type MinifiedCouponDto = {
  readonly __typename: 'MinifiedCouponDto';
  readonly code: Scalars['String']['output'];
  readonly id: Scalars['String']['output'];
};

export type MobileAppLinkContext = {
  readonly __typename: 'MobileAppLinkContext';
  readonly embedOption?: Maybe<LinkEmbedOptions>;
  readonly options: ReadonlyArray<MobileAppLinkOption>;
};


export type MobileAppLinkContextOptionsArgs = {
  evaluateGate?: InputMaybe<Scalars['Boolean']['input']>;
  includeHidden?: InputMaybe<Scalars['Boolean']['input']>;
};

export type MobileAppLinkContextInput = {
  readonly embedOption?: InputMaybe<LinkEmbedOptions>;
  readonly options?: InputMaybe<ReadonlyArray<MobileAppLinkOptionInput>>;
};

export type MobileAppLinkOption = {
  readonly __typename: 'MobileAppLinkOption';
  readonly type: Scalars['String']['output'];
  readonly url?: Maybe<Scalars['String']['output']>;
  readonly visible: Scalars['Boolean']['output'];
};

export type MobileAppLinkOptionInput = {
  readonly type: Scalars['String']['input'];
  readonly url?: InputMaybe<Scalars['String']['input']>;
  readonly visible: Scalars['Boolean']['input'];
};

/** Any item that can be monetized , i.e. a sponsored link, a product, a course, etc. */
export type MonetizableItem = {
  readonly __typename: 'MonetizableItem';
  /** The ID of the monetizable item */
  readonly id?: Maybe<Scalars['Int']['output']>;
  /** The image of the monetizable item */
  readonly image?: Maybe<Scalars['String']['output']>;
  /** The product ID of the monetizable item (collectionId for digital downloads, courseId for Kajabi courses). Only applicable for 1P products as the payments service references payments by product ID. */
  readonly productId?: Maybe<Scalars['String']['output']>;
  /** The title of the monetizable item */
  readonly title?: Maybe<Scalars['String']['output']>;
  /** The type of the monetizable item (DIGITAL_DOWNLOAD, KAJABI_COURSE, PRODUCT, SPONSORED_LINK) */
  readonly type: Scalars['String']['output'];
  /** The UUID of the monetizable item */
  readonly uuid?: Maybe<Scalars['String']['output']>;
};

export type MusicLinkContext = {
  readonly __typename: 'MusicLinkContext';
  readonly embedOption?: Maybe<LinkEmbedOptions>;
  readonly options: ReadonlyArray<MusicLinkOption>;
};


export type MusicLinkContextOptionsArgs = {
  evaluateGate?: InputMaybe<Scalars['Boolean']['input']>;
  includeHidden?: InputMaybe<Scalars['Boolean']['input']>;
};

export type MusicLinkContextInput = {
  readonly embedOption?: InputMaybe<LinkEmbedOptions>;
  readonly options?: InputMaybe<ReadonlyArray<MusicLinkOptionInput>>;
};

export type MusicLinkOption = {
  readonly __typename: 'MusicLinkOption';
  readonly type: Scalars['String']['output'];
  readonly url?: Maybe<Scalars['String']['output']>;
  readonly visible: Scalars['Boolean']['output'];
};

export type MusicLinkOptionInput = {
  readonly type: Scalars['String']['input'];
  readonly url?: InputMaybe<Scalars['String']['input']>;
  readonly visible: Scalars['Boolean']['input'];
};

export type Mutation = {
  readonly __typename: 'Mutation';
  readonly acceptAccountWorkspaceInvitation?: Maybe<AcceptAccountWorkspaceInvitationResult>;
  readonly acceptCommerceMonetizationTerms?: Maybe<CommerceStore>;
  readonly acceptPasswordlessUserEmailInvitation?: Maybe<OperationResult>;
  readonly acceptUserEmailInvitation?: Maybe<OperationResult>;
  readonly acceptUserWorkspaceInvitation?: Maybe<AcceptUserWorkspaceInvitationOutput>;
  /** @deprecated use 'addCommerceStoreProductsToCollection' API instead. */
  readonly addCommerceAccountProductsToCollection: CommerceCollection;
  readonly addCommerceBrandProfileRate: CommerceBrandProfile;
  readonly addCommerceCollection: CommerceCollection;
  readonly addCommerceCollectionFromTemplate: CommerceCollection;
  readonly addCommerceCollectionTemplateToCommerceCollectionTemplateGroup: CommerceCollectionTemplateGroup;
  readonly addCommerceMarketplaceInstanceToCollection: CommerceCollection;
  readonly addCommercePreviewForUser?: Maybe<Scalars['String']['output']>;
  readonly addCommercePreviewsForUser: ReadonlyArray<Maybe<Scalars['String']['output']>>;
  readonly addCommerceStoreProduct: CommerceStoreProduct;
  readonly addCommerceStoreProducts: ReadonlyArray<CommerceStoreProduct>;
  readonly addCommerceStoreProductsToCollection: CommerceCollection;
  readonly addCommerceStoreProductsToCollections: AddCommerceStoreProductsToCollectionsOutput;
  readonly addCommerceStoreProductsToStorefrontPosts: AddCommerceStoreProductsToStorefrontPostsOutput;
  readonly addCommerceStorefrontPost: CommerceStorefrontPost;
  /** @deprecated You shall not use UgcContent to a collection. Use CommerceStorefrontPost intead. */
  readonly addCommerceUgcContentToCollection: CommerceCollection;
  readonly addCommerceUgcContentToStorefrontPost: CommerceStorefrontPost;
  readonly addCommerceUserSelectedVendorAffinities: Scalars['Boolean']['output'];
  readonly addDocument: Scalars['Boolean']['output'];
  readonly addDocumentSync: AddDocumentResult;
  readonly addFeedback: Scalars['Boolean']['output'];
  readonly addFieldsToForm: AddFieldsToFormOutput;
  readonly addLink?: Maybe<Link>;
  readonly addMarketplaceInstanceToCommerceCollectionTemplate: CommerceCollectionTemplate;
  readonly addMultipleLinks?: Maybe<AddMultipleLinksResult>;
  readonly addMultipleSocialLinks?: Maybe<AddMutipleSocialLinksResult>;
  readonly addSocialContentToLinkAssociations?: Maybe<SocialContentToLinkAssociations>;
  readonly analyticsChat: AnalyticsChatCompletionResponse;
  readonly applySubscriptionCoupon?: Maybe<Subscription>;
  readonly applySubscriptionV2Coupon?: Maybe<SubscriptionV2>;
  /** @deprecated This mutation is deprecated and will be removed in future versions. Please use archiveAllInactiveLinksV2 instead. */
  readonly archiveAllInactiveLinks: Scalars['Boolean']['output'];
  readonly archiveAllInactiveLinksV2?: Maybe<ArchiveAllInactiveLinksResult>;
  readonly archiveLinks?: Maybe<Scalars['Boolean']['output']>;
  readonly archiveSponsoredLinks?: Maybe<ArchiveSponsoredLinksResult>;
  readonly archiveSponsoredLinksByAccount?: Maybe<ArchiveSponsoredLinksResult>;
  readonly archiveSponsoredOfferWithLinks: SponsoredOfferArchive;
  readonly assistantSendMessage?: Maybe<AssistantResponse>;
  readonly bulkAccountCreation?: Maybe<BulkAccountCreationResult>;
  readonly bulkPasswordReset?: Maybe<ReadonlyArray<Maybe<BulkPasswordResetResult>>>;
  readonly bulkSetCommerceOnboardingCohort: Scalars['String']['output'];
  readonly bulkSetCommerceStoreApplicationStatus: Scalars['String']['output'];
  readonly bulkUpdateLinkPreviewTitlesMutation?: Maybe<Account>;
  readonly changeLinkPreviewLinkTypeAndModifiers?: Maybe<Link>;
  readonly changeLinkType?: Maybe<Link>;
  readonly chatCompletion: ChatCompletionResponse;
  readonly chatIndexLinktree: IndexingResponse;
  /** Creates a new chat channel with participants. If a channel with participants already exists, it will be returned. */
  readonly commerceCreateChatChannel: CommerceChatChannel;
  /** Deletes a chat channel. */
  readonly commerceDeleteChatChannel: CommerceChatChannel;
  readonly confirmPasswordReset?: Maybe<ConfirmPasswordResetResult>;
  readonly createAccount?: Maybe<CreateAccountResult>;
  readonly createAffiliateToken?: Maybe<AffiliateToken>;
  readonly createBaseTheme?: Maybe<BaseTheme>;
  readonly createBaseThemeFromAccountTheme?: Maybe<BaseTheme>;
  readonly createCanvaAssetUploadJob?: Maybe<CanvaAssetUploadJobResult>;
  readonly createCanvaDesign?: Maybe<CreateCanvaDesignResult>;
  readonly createCanvaDesignExportJob?: Maybe<CanvaDesignExportJobResult>;
  readonly createCommerceCollectionShortLink: CommerceCollectionShortLink;
  readonly createCommerceCollectionTemplate: CommerceCollectionTemplate;
  readonly createCommerceCollectionTemplateGroup: CommerceCollectionTemplateGroup;
  readonly createCommerceStoreProductShortLink: CommerceStoreProductShortLink;
  readonly createCommerceStorefrontPostShortLink: CommerceStorefrontPostShortLink;
  /** Create a url override for a profile, link, or product. For individual link/product creation, returns true if an override was successfully created, false otherwise. Returns true if profile/shop override creation has started. */
  readonly createCommerceUrlOverride: Scalars['Boolean']['output'];
  readonly createCommerceWallet: Wallet;
  /** Creates a new wallet connection for an account. If a connection already exists, that is returned instead. */
  readonly createCommerceWalletConnection: WalletConnection;
  /** @deprecated This mutation is deprecated. Use `followAccount` */
  readonly createFollow?: Maybe<FollowModel>;
  readonly createForm: CreateFormOutput;
  readonly createInAppMessage?: Maybe<InAppMessage>;
  readonly createIncompleteGlowUpTool?: Maybe<Account>;
  readonly createIntegrationSubscription?: Maybe<SignupIntegrationResult>;
  readonly createKajabiCourseMutation?: Maybe<CreateKajabiCourseResult>;
  readonly createLinkPreviewCollectionWithChildren?: Maybe<ReadonlyArray<Maybe<Link>>>;
  readonly createMailchimpIntegration?: Maybe<ServiceIntegration>;
  readonly createMessagingFaq?: Maybe<MessagingSettings>;
  readonly createNewAccount?: Maybe<CreateAccountResult>;
  readonly createOrUpdateAccount: CreateOrUpdateAccountModel;
  readonly createPassword?: Maybe<CreatePasswordResult>;
  readonly createPasswordUnauthenticated?: Maybe<CreatePasswordUnauthenticatedResult>;
  readonly createPaypalIntegration?: Maybe<PaypalIntegration>;
  readonly createPixPaymentIntent?: Maybe<CreatePixPaymentIntentResult>;
  readonly createScheduledNotification: ScheduledNotificationResultModel;
  readonly createShopifyIntegration?: Maybe<ServiceIntegration>;
  readonly createSocialFeed?: Maybe<SocialFeed>;
  readonly createSocialFeedPost?: Maybe<SocialFeedPost>;
  readonly createSocialFeedPostMediaLink?: Maybe<Link>;
  readonly createSocialIntegration: Scalars['String']['output'];
  readonly createSocialNotificationConfig: CreateSocialNotificationConfigOutput;
  readonly createSpringIntegration?: Maybe<ServiceIntegration>;
  readonly createSquareIntegration?: Maybe<SquareIntegration>;
  readonly createStripeIntegration?: Maybe<StripeIntegration>;
  readonly createStripeIntegrationFromAccountId?: Maybe<StripeIntegration>;
  readonly createStripeIntentForFuturePayment?: Maybe<CreateStripeIntentResult>;
  readonly createStripePaymentIntent?: Maybe<CreateStripeIntentResult>;
  readonly createStripeSetupIntent?: Maybe<CreateStripeIntentResult>;
  readonly createSubscribeLockForm: CreateSubscribeLockFormOutput;
  readonly createSubscription?: Maybe<CreateSubscriptionResult>;
  readonly createSubscriptionAddOn?: Maybe<CreateSubscriptionAddOnResult>;
  readonly createSubscriptionV2?: Maybe<CreateSubscriptionResult>;
  readonly createUser?: Maybe<CreateUserResult>;
  readonly createWorkspace?: Maybe<Workspace>;
  readonly createYoutubeIntegration: Scalars['String']['output'];
  readonly deleteAccount?: Maybe<DeleteUserResult>;
  readonly deleteAccountPreviewChanges?: Maybe<Account>;
  readonly deleteAffiliateToken?: Maybe<AffiliateToken>;
  /** @deprecated use 'deleteCommerceStoreProductFromCollection' API instead. */
  readonly deleteCommerceAccountProductFromCollection: CommerceCollection;
  readonly deleteCommerceCollection?: Maybe<Scalars['String']['output']>;
  readonly deleteCommerceCollectionTemplate: CommerceCollectionTemplate;
  readonly deleteCommerceCollectionTemplateGroup: CommerceCollectionTemplateGroup;
  readonly deleteCommerceMarketplaceInstanceFromCollection: CommerceCollection;
  readonly deleteCommercePreviewForUser: Scalars['String']['output'];
  readonly deleteCommercePreviewsForUser: Scalars['String']['output'];
  readonly deleteCommerceStoreProduct?: Maybe<Scalars['String']['output']>;
  readonly deleteCommerceStoreProductFromCollection: CommerceCollection;
  readonly deleteCommerceStoreProductsFromCollection: CommerceCollection;
  readonly deleteCommerceStoreProductsFromStorefrontPost: CommerceStorefrontPost;
  readonly deleteCommerceStorefrontPost?: Maybe<Scalars['String']['output']>;
  readonly deleteCommerceUgcContentForUser: Scalars['Boolean']['output'];
  /** @deprecated You shall not use UgcContent to a collection. Use CommerceStorefrontPost intead. */
  readonly deleteCommerceUgcContentFromCollection: CommerceCollection;
  readonly deleteCommerceUgcContentFromStorefrontPost: CommerceStorefrontPost;
  readonly deleteDocument: Scalars['Boolean']['output'];
  readonly deleteFollower: DeleteFollowerModel;
  readonly deleteGlowUpState?: Maybe<Account>;
  readonly deleteGoogleAuthToken?: Maybe<DeleteGoogleAuthTokenResult>;
  readonly deleteInstagramWebhookMutation?: Maybe<DeleteInstagramWebhookResult>;
  readonly deleteIntegration?: Maybe<ReadonlyArray<Maybe<ServiceIntegration>>>;
  readonly deleteLink?: Maybe<Link>;
  readonly deleteMessagingFaq?: Maybe<MessagingSettings>;
  readonly deleteNotificationsByType: DeleteNotificationsByTypeResponse;
  readonly deleteScheduledNotification: ScheduledNotificationDeletionResultModel;
  readonly deleteShopPreviewLink?: Maybe<Scalars['Boolean']['output']>;
  readonly deleteSocialIntegration: Scalars['Boolean']['output'];
  readonly deleteSocialNotificationConfig: DeleteSocialNotificationConfigOutput;
  /** @deprecated Use `deleteIntegration` instead */
  readonly deleteSquareIntegration?: Maybe<ReadonlyArray<Maybe<ServiceIntegration>>>;
  readonly deleteUser?: Maybe<DeleteUserResult>;
  readonly dismissInAppMessage?: Maybe<InAppMessage>;
  readonly duplicateProfile?: Maybe<DuplicateProfileResult>;
  /** @deprecated use editCommerceCollection API instead */
  readonly editCommerceAccountCollection?: Maybe<CommerceCollection>;
  readonly editCommerceCollection: CommerceCollection;
  readonly editCommerceCollectionTemplate: CommerceCollectionTemplate;
  readonly editCommerceCollectionTemplateGroup: CommerceCollectionTemplateGroup;
  readonly editCommerceStoreProduct?: Maybe<CommerceStoreProduct>;
  readonly editCommerceStorefrontPost: CommerceStorefrontPost;
  readonly followAccount?: Maybe<FollowModel>;
  readonly generateCommercePreviewForUser?: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  readonly generateCommercePreviewForUserByPost?: Maybe<Scalars['String']['output']>;
  readonly generateSocialContentDefinitions: SocialContentDefinitionType;
  readonly generateSocialContentPostCaptions: ReadonlyArray<SocialContentPostCaptionType>;
  readonly generateSocialContentPostIdeas: ReadonlyArray<SocialContentPostIdeaType>;
  readonly glowUp?: Maybe<Account>;
  readonly glowUpProfile: GlowupResponse;
  readonly importProfileFromJson?: Maybe<ImportProfileFromJsonResult>;
  readonly indexIntercomArticles: Scalars['Boolean']['output'];
  readonly indexWebsite: Scalars['String']['output'];
  readonly inviteAccountToWorkspace?: Maybe<OperationResult>;
  readonly inviteAdmin?: Maybe<InviteAdminResult>;
  /** @deprecated Use `inviteAdmin` instead */
  readonly inviteUserByEmail?: Maybe<InviteUserByEmailResult>;
  readonly inviteUserToWorkspace?: Maybe<OperationResult>;
  readonly loginUser?: Maybe<LoginUserResult>;
  readonly ltfollowers_deleteAccount: DeleteAccountModel;
  readonly markAllNotificationsRead: MarkAllNotificationsReadResponse;
  readonly markNotificationAsRead: MarkNotificationAsReadResponse;
  /** Given a url, attempts to find an exact match within the catalog. If found, creates a store product for the url and returns it. Otherwise, returns null. */
  readonly matchAndCreateProduct: CommerceStoreProduct;
  readonly migrateUserToPasswordUser?: Maybe<MigrateUserToPasswordUserMutationResult>;
  readonly moveLinks?: Maybe<LinksPage>;
  readonly onboardCommerceWallet: Wallet;
  readonly optIntoCommerceConcierge: Scalars['Boolean']['output'];
  readonly pauseNotifications: Scalars['Boolean']['output'];
  readonly postEmailSummary: AccountEmailSummary;
  readonly rateSocialContentPostCaption: SocialContentPostCaptionType;
  readonly rateSocialContentPostIdea: SocialContentPostIdeaType;
  readonly reauthorizePaypalIntegration?: Maybe<PaypalIntegration>;
  readonly reauthorizeShopifyIntegration?: Maybe<ServiceIntegration>;
  readonly reauthorizeSquareIntegration?: Maybe<SquareIntegration>;
  readonly reauthorizeStripeIntegration?: Maybe<StripeIntegration>;
  /** Reverts the last undo that was made to the account preview. */
  readonly redoProfilePreviewChanges?: Maybe<Account>;
  /** This method is using self-signed guard, expect to be used by magic-link from visitor's email. */
  readonly refollow: FollowModel;
  readonly removeAccountCard?: Maybe<Account>;
  readonly removeAccountFromWorkspace?: Maybe<RemoveAccountFromWorkspaceResult>;
  readonly removeAdmin?: Maybe<RemoveAdminResult>;
  readonly removeChildLink?: Maybe<Link>;
  readonly removeCommerceBrandProfileRate: CommerceBrandProfile;
  readonly removeCommerceCollectionTemplateFromCommerceCollectionTemplateGroup: CommerceCollectionTemplateGroup;
  readonly removeFieldsFromForm: RemoveFieldsFromFormOutput;
  readonly removeMarketplaceInstanceFromCommerceCollectionTemplate: CommerceCollectionTemplate;
  readonly removeSocialContentToLinkAssociations?: Maybe<SocialContentToLinkAssociations>;
  readonly removeSocialFeed: Scalars['Boolean']['output'];
  readonly removeSocialFeedPost: Scalars['Boolean']['output'];
  readonly removeSocialFeedPostMediaLink: Scalars['Boolean']['output'];
  readonly removeSubscriptionCoupon?: Maybe<Subscription>;
  readonly removeSubscriptionScheduledCancellation?: Maybe<Subscription>;
  readonly removeSubscriptionScheduledChanges?: Maybe<Subscription>;
  readonly removeSubscriptionV2Coupon?: Maybe<SubscriptionV2>;
  readonly removeUserFromWorkspace?: Maybe<RemoveUserFromWorkspaceResult>;
  readonly removeYoutubeIntegration: Scalars['String']['output'];
  readonly reorderAudienceManagerSubscriberTableSchema: ReorderAudienceManagerSubscriberTableSchemaOutput;
  readonly reorderChildLink?: Maybe<Link>;
  readonly reorderCommerceCollection: CommerceCollections;
  /** @deprecated use 'reorderCommerceStoreProductInCollection' API instead. */
  readonly reorderCommerceProductInCollection?: Maybe<CommerceCollection>;
  readonly reorderCommerceStoreProduct: CommerceStoreProducts;
  readonly reorderCommerceStoreProductInCollection?: Maybe<CommerceCollection>;
  readonly reorderCommerceStoreProductsInCollection?: Maybe<CommerceCollection>;
  readonly reorderCommerceStoreProductsInStorefrontPost: CommerceStorefrontPost;
  readonly reorderCommerceStorefrontItem: CommerceStorefrontItems;
  readonly reorderCommerceStorefrontPost: CommerceStorefrontItems;
  /** @deprecated Use reorderCommerceUgcContentInStorefrontPost API instead */
  readonly reorderCommerceUgcContentInCollection?: Maybe<CommerceCollection>;
  readonly reorderCommerceUgcContentInStorefrontPost?: Maybe<CommerceStorefrontPost>;
  readonly reorderFormFields: ReorderFormFieldsOutput;
  readonly reorderLinks?: Maybe<LinksPage>;
  readonly reorderSocialLinks?: Maybe<UpdateSocialLinksResult>;
  readonly reorderSocialNotificationConfig: ReorderSocialNotificationConfigOutput;
  readonly requestAudienceSupportEmailVerificationCode?: Maybe<RequestAudienceSupportEmailVerificationCodeResult>;
  readonly requestCurrentUserVerificationCode: Scalars['Boolean']['output'];
  readonly requestEmailChangeOtp?: Maybe<RequestEmailChangeOtpResult>;
  readonly requestEmailVerification?: Maybe<RequestEmailVerificationResult>;
  readonly requestFollowerList: Scalars['Boolean']['output'];
  readonly requestFormSubmissionList: RequestFormSubmissionListOutput;
  readonly requestLtFollowersAccountSync: RequestLtFollowersAccountSyncOutput;
  readonly requestPasswordReset?: Maybe<RequestPasswordResetResult>;
  readonly requestUsername?: Maybe<RequestUsernameResult>;
  readonly resetCommerceOnboardingState: CommerceStore;
  readonly resetUserMFA?: Maybe<ResetUserMfaResult>;
  readonly resubscribeToDigest: SubscribedModel;
  readonly rewriteImageGenerationPrompt: Scalars['String']['output'];
  readonly saveGlowUpToProfile?: Maybe<Account>;
  readonly scheduleLeapLinkOff?: Maybe<ScheduleLinkOffResult>;
  readonly scheduleLinkOff?: Maybe<ScheduleLinkOffResult>;
  readonly scheduleLinkOn?: Maybe<ScheduleLinkOnResult>;
  readonly selectPlan?: Maybe<SelectPlanResult>;
  /** This endpoint is meant to be used internally via Retool when certain onboarding triggers occur. It publishes the events unsafely, so there are no guarantees on delivery. */
  readonly sendCommerceOnboardingBrazeEvent: Scalars['String']['output'];
  readonly sendFollowerNotifications: SendNotificationResultModel;
  readonly sendInstagramDirectMessageMutation?: Maybe<SendInstagramDirectMessageResult>;
  readonly sendInstagramMessagePublicReplyMutation?: Maybe<SendInstagramMessagePublicReplyResult>;
  readonly setAccountOnboardingState?: Maybe<Account>;
  readonly setAccountVerticals?: Maybe<Account>;
  readonly setAdminInvitationStatus?: Maybe<AdminInvitation>;
  readonly setAgreeToShare: AgreeToShareModel;
  readonly setAudienceNotificationsEnabled?: Maybe<Account>;
  readonly setBookLinkContext?: Maybe<Link>;
  readonly setChatbotLinkContext?: Maybe<Link>;
  readonly setChildLink?: Maybe<Link>;
  readonly setClubhouseLinkContext?: Maybe<Link>;
  readonly setCoachingLinkContext?: Maybe<Link>;
  readonly setCommerceAutoAffiliateLinksEnabled?: Maybe<CommerceStore>;
  readonly setCommerceAutoAffiliateLinksStrategy?: Maybe<CommerceStore>;
  /** This endpoint is meant to be called whenever the state of the Shop's concierge is changed via user interaction */
  readonly setCommerceConciergeShopState: CommerceStore;
  /** This endpoint is meant to be called whenever the state of the Shop's concierge is changed via Retool */
  readonly setCommerceConciergeShopStateRetool: CommerceStore;
  readonly setCommerceOnboardingCohort: CommerceStore;
  readonly setCommerceOnboardingTabBadge: CommerceStore;
  readonly setCommercePayLinkContext?: Maybe<Link>;
  readonly setCommerceProductLinkContext?: Maybe<Link>;
  readonly setCommerceStoreApplicationStatus: CommerceStore;
  readonly setCommunityLinkContext?: Maybe<Link>;
  readonly setContactDetailsLinkContext?: Maybe<Link>;
  readonly setDefaultNotificationMethod: SetDefaultNotificationMethodModel;
  readonly setDefaultProfilePage?: Maybe<Account>;
  readonly setDigitalDownloadLinkContext?: Maybe<Link>;
  readonly setExtensionLinkContext?: Maybe<Link>;
  readonly setFacebookLinkContext?: Maybe<Link>;
  readonly setFollowNotificationSettingsForAccount: Scalars['Boolean']['output'];
  readonly setFormLinkContext?: Maybe<Link>;
  readonly setGoogleAuthToken?: Maybe<SetGoogleAuthTokenResult>;
  readonly setGroupLinkContext?: Maybe<Link>;
  readonly setHasActioned: Insight;
  readonly setHasGeotargetingViews?: Maybe<Account>;
  readonly setHasViewed: Insight;
  readonly setHasVisitedDesignPage?: Maybe<Account>;
  readonly setHeaderLinkContext?: Maybe<Link>;
  readonly setInstagramPostLinkContext?: Maybe<Link>;
  readonly setInstagramProfileLinkContext?: Maybe<Link>;
  readonly setInstagramWebhookMutation?: Maybe<SetInstagramWebhookResult>;
  readonly setKajabiCourseContextMutation?: Maybe<Link>;
  readonly setLinkGatingRule?: Maybe<Link>;
  /** @deprecated Setting moderation-labels are no longer supported. The API can only be used to clear moderation-labels. */
  readonly setLinkModerationLabels?: Maybe<Link>;
  readonly setLinkModifiers?: Maybe<Link>;
  readonly setLinkerRecommendationsLinkContext?: Maybe<Link>;
  readonly setMailingListIntegration: Scalars['String']['output'];
  readonly setMessagingSettings?: Maybe<Account>;
  readonly setMobileAppLinkContext?: Maybe<Link>;
  readonly setMonetizationIntents?: Maybe<Account>;
  readonly setMultipleLinkPreviewGroupLinkContext?: Maybe<Account>;
  readonly setMusicLinkContext?: Maybe<Link>;
  readonly setNftGalleryLinkContext?: Maybe<Link>;
  readonly setNotificationMethod: SetNotificationMethodModel;
  readonly setNotificationsSettings: NotificationSettingsModel;
  readonly setOnboardingFlowStyle: CommerceStore;
  readonly setOnboardingGoals?: Maybe<Account>;
  readonly setPinterestLinkContext?: Maybe<Link>;
  readonly setPodcastLinkContext?: Maybe<Link>;
  readonly setPreSaveLinkContext?: Maybe<Link>;
  readonly setProductLinkContext?: Maybe<Link>;
  readonly setProfileBadges?: Maybe<Account>;
  readonly setRequestLinkContext?: Maybe<Link>;
  readonly setRssFeedLinkContext?: Maybe<Link>;
  readonly setShopEntryPointOnLinksEnabled?: Maybe<CommerceStore>;
  readonly setSocialAiConsent?: Maybe<Account>;
  readonly setSpotifyLinkContext?: Maybe<Link>;
  readonly setSpringLinkContext?: Maybe<Link>;
  readonly setStoreTabEnabled?: Maybe<Account>;
  readonly setThreadsLinkContext?: Maybe<Link>;
  readonly setTikTokJumpLinkContext?: Maybe<Link>;
  readonly setTikTokLinkContext?: Maybe<Link>;
  readonly setTikTokProfileLinkContext?: Maybe<Link>;
  readonly setTipGiftLinkContext?: Maybe<Link>;
  readonly setTwitchLinkContext?: Maybe<Link>;
  readonly setTwitterLinkContext?: Maybe<Link>;
  readonly setUserEmailVerificationLastSentAt?: Maybe<User>;
  readonly setUserEmailVerified?: Maybe<User>;
  readonly setVideoLinkContext?: Maybe<Link>;
  readonly setVimeoLinkContext?: Maybe<Link>;
  readonly setWeeklyDigestSubscribed: Scalars['Boolean']['output'];
  readonly setYoutubeLinkContext?: Maybe<Link>;
  readonly skipCommerceBrandProfileSetup: CommerceBrandProfile;
  readonly softDeleteAccount?: Maybe<DeleteAccountResult>;
  readonly softDeleteUser?: Maybe<DeleteUserResult>;
  readonly startChatkit: StartChatkitResponse;
  readonly submitCommerceProductNotFoundFeedback: SubmitCommerceProductNotFoundFeedbackOutput;
  readonly submitContactForm?: Maybe<SignupIntegrationResult>;
  readonly submitForm: SubmitFormOutput;
  readonly submitSponsoredOfferForReview: SponsoredOffer;
  readonly switchAccount?: Maybe<Account>;
  readonly toggleGlowUpChange?: Maybe<Account>;
  readonly triggerAddedVendorToCatalog: TriggerAddedVendorToCatalogResponse;
  /** Reverts the last appearance change made to the account preview from the undo stack. */
  readonly undoProfilePreviewChanges?: Maybe<Account>;
  /** This method is using self-signed guard, expect to be used by magic-link from visitor's email. */
  readonly unfollow: FollowingModel;
  readonly unfollowAll: Scalars['Boolean']['output'];
  readonly unfollowProfile: FollowingModel;
  readonly unsubscribeFromDigest: SubscribedModel;
  readonly updateAccountAppearance?: Maybe<Account>;
  readonly updateAccountInfo?: Maybe<CreateAccountResult>;
  readonly updateAccountSettings: Scalars['Boolean']['output'];
  readonly updateAccountTitleAndDescription?: Maybe<Account>;
  readonly updateAffiliateToken?: Maybe<AffiliateToken>;
  readonly updateAudienceManagerSubscriberTableSchemaColumnChecked: UpdateAudienceManagerSubscriberTableSchemaColumnCheckedOutput;
  readonly updateAudienceNotificationsEmail?: Maybe<Account>;
  /** Providing null will clear the audience support email and the Query resolver will default to the owning user's email. */
  readonly updateAudienceSupportEmail?: Maybe<Account>;
  readonly updateBaseThemeByKey?: Maybe<BaseTheme>;
  readonly updateBaseThemeFromAccountTheme?: Maybe<BaseTheme>;
  readonly updateCommerceBrandProfileCollaborationInterests: CommerceBrandProfile;
  readonly updateCommerceBrandProfileCreatorInfo: CommerceBrandProfile;
  readonly updateCommerceBrandProfileHasConnectedSocials: CommerceBrandProfile;
  readonly updateCommerceBrandProfileMailingAddress: CommerceBrandProfile;
  readonly updateCommerceBrandProfilePersonalInfo: CommerceBrandProfile;
  readonly updateCommerceBrandProfilePreviousCollaborations: CommerceBrandProfile;
  readonly updateCommerceBrandProfileProfessionalInformation: CommerceBrandProfile;
  readonly updateCommerceVendor: CommerceVendor;
  readonly updateCommunicationStyle: Scalars['Boolean']['output'];
  readonly updateDocument: Scalars['Boolean']['output'];
  readonly updateForm: UpdateFormOutput;
  readonly updateFormField: UpdateFormFieldOutput;
  readonly updateGlowUpStatus?: Maybe<Account>;
  readonly updateInAppMessage?: Maybe<InAppMessage>;
  readonly updateInAppSubscription?: Maybe<UpdateInAppSubscriptionResult>;
  readonly updateIntegration?: Maybe<IntegrationResult>;
  readonly updateLink?: Maybe<Link>;
  readonly updateMailchimpIntegration?: Maybe<ReadonlyArray<Maybe<ServiceIntegration>>>;
  readonly updateMailingListIntegration: Scalars['String']['output'];
  readonly updateMessagingFaq?: Maybe<MessagingSettings>;
  readonly updateMessagingFaqsEnabled?: Maybe<MessagingSettings>;
  readonly updatePaypalIntegration?: Maybe<ReadonlyArray<Maybe<ServiceIntegration>>>;
  readonly updateProcessedCustomVideo?: Maybe<UpdateProcessedCustomVideoResult>;
  readonly updateProfileWithPreviewState?: Maybe<Account>;
  readonly updateScheduledNotification: ScheduledNotificationResultModel;
  readonly updateShopifyIntegration?: Maybe<ReadonlyArray<Maybe<ServiceIntegration>>>;
  readonly updateSocialFeed?: Maybe<SocialFeed>;
  readonly updateSocialFeedPost?: Maybe<SocialFeedPost>;
  readonly updateSocialFeedPostMedia?: Maybe<SocialFeedPostMedia>;
  readonly updateSocialFeedPostMediaLink?: Maybe<Link>;
  readonly updateSocialIntegration: SocialIntegration;
  readonly updateSocialLink?: Maybe<UpdateSocialLinksResult>;
  readonly updateSocialLinksPosition?: Maybe<UpdateSocialLinksPositionResult>;
  readonly updateSocialNotificationConfig: UpdateSocialNotificationConfigOutput;
  readonly updateSocialNotificationConfigSocialIntegration: UpdateSocialNotificationConfigOutput;
  readonly updateSponsoredLinks?: Maybe<UpdateSponsoredLinksResult>;
  readonly updateSpringIntegration?: Maybe<ReadonlyArray<Maybe<ServiceIntegration>>>;
  readonly updateSquareIntegration?: Maybe<ReadonlyArray<Maybe<ServiceIntegration>>>;
  readonly updateStripeIntegration?: Maybe<ReadonlyArray<Maybe<ServiceIntegration>>>;
  readonly updateSubscription?: Maybe<UpdateSubscriptionResult>;
  readonly updateSubscriptionAddOn?: Maybe<UpdateSubscriptionAddOnResult>;
  readonly updateSubscriptionV2?: Maybe<UpdateSubscriptionResult>;
  readonly updateSubscriptionV2ActiveAccount?: Maybe<UpdateSubscriptionResult>;
  readonly updateTemplateQuestions: Scalars['Boolean']['output'];
  readonly updateTimeZone?: Maybe<Scalars['Boolean']['output']>;
  readonly updateUser?: Maybe<UpdateUserResult>;
  readonly updateUserPhoneNumber?: Maybe<UpdateUserPhoneNumberResult>;
  readonly updateUserUsername?: Maybe<User>;
  readonly updateUsername?: Maybe<Account>;
  readonly upsertSponsoredOffers: ReadonlyArray<SponsoredOffer>;
  readonly upsertVendors: ReadonlyArray<CommerceVendor>;
  readonly verifiedDeleteAccount: VerifiedDeleteAccountResult;
  readonly verifiedDeleteCurrentUser: VerifiedDeleteCurrentUserResult;
  readonly verifyEmail?: Maybe<VerifyEmailResult>;
  readonly verifyEmailChangeOtp?: Maybe<VerifyEmailChangeOtpResult>;
};


export type MutationAcceptAccountWorkspaceInvitationArgs = {
  token: Scalars['String']['input'];
};


export type MutationAcceptCommerceMonetizationTermsArgs = {
  accountUuid: Scalars['String']['input'];
};


export type MutationAcceptPasswordlessUserEmailInvitationArgs = {
  confirmationToken: Scalars['String']['input'];
};


export type MutationAcceptUserEmailInvitationArgs = {
  confirmationToken: Scalars['String']['input'];
  password: Scalars['String']['input'];
};


export type MutationAcceptUserWorkspaceInvitationArgs = {
  token: Scalars['String']['input'];
};


export type MutationAddCommerceAccountProductsToCollectionArgs = {
  input: AddAccountProductsToCollectionInput;
};


export type MutationAddCommerceBrandProfileRateArgs = {
  input: AddCommerceBrandProfileRateArgs;
};


export type MutationAddCommerceCollectionArgs = {
  input: AddCommerceCollectionInput;
};


export type MutationAddCommerceCollectionFromTemplateArgs = {
  input: AddCommerceCollectionFromTemplateInput;
};


export type MutationAddCommerceCollectionTemplateToCommerceCollectionTemplateGroupArgs = {
  groupId: Scalars['String']['input'];
  templateId: Scalars['String']['input'];
};


export type MutationAddCommerceMarketplaceInstanceToCollectionArgs = {
  input: ManageMarketplaceInstanceToCollectionInput;
};


export type MutationAddCommercePreviewForUserArgs = {
  input: AddCommercePreviewForUserInput;
};


export type MutationAddCommercePreviewsForUserArgs = {
  accountUuid: Scalars['String']['input'];
};


export type MutationAddCommerceStoreProductArgs = {
  input: AddCommerceStoreProductInput;
};


export type MutationAddCommerceStoreProductsArgs = {
  input: AddCommerceStoreProductsInput;
};


export type MutationAddCommerceStoreProductsToCollectionArgs = {
  input: AddCommerceStoreProductsToCollectionInput;
};


export type MutationAddCommerceStoreProductsToCollectionsArgs = {
  input: AddCommerceStoreProductsToCollectionsInput;
};


export type MutationAddCommerceStoreProductsToStorefrontPostsArgs = {
  input: AddCommerceStoreProductsToStorefrontPostsInput;
};


export type MutationAddCommerceStorefrontPostArgs = {
  input: AddCommerceStorefrontPostInput;
};


export type MutationAddCommerceUgcContentToCollectionArgs = {
  input: AddCommerceUgcContentToCollectionInput;
};


export type MutationAddCommerceUgcContentToStorefrontPostArgs = {
  input: AddCommerceUgcContentToStorefrontPostInput;
};


export type MutationAddCommerceUserSelectedVendorAffinitiesArgs = {
  input: AddCommerceUserSelectedVendorAffinitiesInput;
};


export type MutationAddDocumentArgs = {
  accountUuid: Scalars['String']['input'];
  async?: InputMaybe<Scalars['Boolean']['input']>;
  content: Scalars['String']['input'];
  isGlobalContent?: InputMaybe<Scalars['Boolean']['input']>;
  options?: InputMaybe<ChatEmbeddingIndexOptions>;
  sourceType: Scalars['String']['input'];
  url?: InputMaybe<Scalars['String']['input']>;
  useCase?: InputMaybe<Scalars['String']['input']>;
};


export type MutationAddDocumentSyncArgs = {
  accountUuid: Scalars['String']['input'];
  content: Scalars['String']['input'];
  isGlobalContent?: InputMaybe<Scalars['Boolean']['input']>;
  options?: InputMaybe<ChatEmbeddingIndexOptions>;
  sourceType: Scalars['String']['input'];
  url?: InputMaybe<Scalars['String']['input']>;
  useCase?: InputMaybe<Scalars['String']['input']>;
};


export type MutationAddFeedbackArgs = {
  feedback: ChatQuestionFeedback;
};


export type MutationAddFieldsToFormArgs = {
  input: AddFieldsToFormInput;
};


export type MutationAddLinkArgs = {
  accountId?: InputMaybe<Scalars['Int']['input']>;
  accountUuid?: InputMaybe<Scalars['String']['input']>;
  glowUp?: InputMaybe<GlowUpInput>;
  input?: InputMaybe<AddLinkInput>;
  type: LinkType;
  viewId?: InputMaybe<Scalars['Int']['input']>;
};


export type MutationAddMarketplaceInstanceToCommerceCollectionTemplateArgs = {
  instanceId: Scalars['String']['input'];
  templateId: Scalars['String']['input'];
};


export type MutationAddMultipleLinksArgs = {
  accountUuid?: InputMaybe<Scalars['String']['input']>;
  links?: InputMaybe<ReadonlyArray<InputMaybe<AddLinkMutationInput>>>;
};


export type MutationAddMultipleSocialLinksArgs = {
  addMultipleSocialLinksMutation: ReadonlyArray<InputMaybe<SocialLinkInput>>;
};


export type MutationAddSocialContentToLinkAssociationsArgs = {
  input: AddSocialContentToLinkAssociationsInput;
};


export type MutationAnalyticsChatArgs = {
  accountUuid: Scalars['String']['input'];
  conversationId?: InputMaybe<Scalars['String']['input']>;
  endDate?: InputMaybe<Scalars['String']['input']>;
  question?: InputMaybe<Scalars['String']['input']>;
  startDate?: InputMaybe<Scalars['String']['input']>;
  useMcp?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationApplySubscriptionCouponArgs = {
  couponId: Scalars['String']['input'];
  subscriptionId?: InputMaybe<Scalars['Int']['input']>;
};


export type MutationApplySubscriptionV2CouponArgs = {
  couponId: Scalars['String']['input'];
  subscriptionId?: InputMaybe<Scalars['Int']['input']>;
};


export type MutationArchiveAllInactiveLinksArgs = {
  accountId?: InputMaybe<Scalars['Int']['input']>;
};


export type MutationArchiveAllInactiveLinksV2Args = {
  accountId?: InputMaybe<Scalars['Int']['input']>;
};


export type MutationArchiveLinksArgs = {
  ids: ReadonlyArray<Scalars['Int']['input']>;
};


export type MutationArchiveSponsoredLinksArgs = {
  offerId?: InputMaybe<Scalars['String']['input']>;
};


export type MutationArchiveSponsoredLinksByAccountArgs = {
  accountUuid: Scalars['String']['input'];
  sponsorshipId: Scalars['String']['input'];
};


export type MutationArchiveSponsoredOfferWithLinksArgs = {
  offerId: Scalars['String']['input'];
};


export type MutationAssistantSendMessageArgs = {
  accountUuid: Scalars['String']['input'];
  conversationId?: InputMaybe<Scalars['String']['input']>;
  message?: InputMaybe<ChatMessage>;
};


export type MutationBulkAccountCreationArgs = {
  captchaToken: Scalars['String']['input'];
  sourceAccountId?: InputMaybe<Scalars['Int']['input']>;
  usernames: ReadonlyArray<InputMaybe<Scalars['String']['input']>>;
  uuid: Scalars['String']['input'];
};


export type MutationBulkPasswordResetArgs = {
  usernames?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationBulkSetCommerceOnboardingCohortArgs = {
  accountUuids: ReadonlyArray<Scalars['String']['input']>;
  cohort?: InputMaybe<CommerceOnboardingCohort>;
};


export type MutationBulkSetCommerceStoreApplicationStatusArgs = {
  accountUuids: ReadonlyArray<Scalars['String']['input']>;
  applicationStatus?: InputMaybe<CommerceStoreApplicationStatus>;
};


export type MutationBulkUpdateLinkPreviewTitlesMutationArgs = {
  accountUuid?: InputMaybe<Scalars['String']['input']>;
  glowUp: GlowUpInput;
  isGlowUpPreview?: InputMaybe<Scalars['Boolean']['input']>;
  linkUpdates: ReadonlyArray<BulkUpdateLinkTitlesInput>;
};


export type MutationChangeLinkPreviewLinkTypeAndModifiersArgs = {
  accountUuid?: InputMaybe<Scalars['String']['input']>;
  glowUp: GlowUpInput;
  id: Scalars['Int']['input'];
  isGlowUpPreview?: InputMaybe<Scalars['Boolean']['input']>;
  linkTypeId?: InputMaybe<Scalars['String']['input']>;
  spotifyContext?: InputMaybe<SpotifyLinkContextInput>;
  type: LinkType;
  youtubeContext?: InputMaybe<YoutubeLinkContextInput>;
};


export type MutationChangeLinkTypeArgs = {
  id: Scalars['Int']['input'];
  linkTypeId?: InputMaybe<Scalars['String']['input']>;
  setLinkTypeChangeExplicit?: InputMaybe<Scalars['Boolean']['input']>;
  type: LinkType;
};


export type MutationChatCompletionArgs = {
  accountUuid: Scalars['String']['input'];
  chatRequest: ChatRequest;
  llmProvider?: InputMaybe<Scalars['String']['input']>;
};


export type MutationChatIndexLinktreeArgs = {
  accountUuid: Scalars['String']['input'];
  indexingOptions?: InputMaybe<ChatEmbeddingIndexOptions>;
};


export type MutationCommerceCreateChatChannelArgs = {
  accountUuid?: InputMaybe<Scalars['String']['input']>;
  campaignId?: InputMaybe<Scalars['String']['input']>;
  coverImageUrl?: InputMaybe<Scalars['String']['input']>;
  creatorId: Scalars['String']['input'];
  creatorMetadata?: InputMaybe<CommerceChatUserMetadata>;
  initialMessage: Scalars['String']['input'];
  name?: InputMaybe<Scalars['String']['input']>;
  participantIds: ReadonlyArray<Scalars['String']['input']>;
  sendMessageIfChannelExists?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCommerceDeleteChatChannelArgs = {
  accountUuid?: InputMaybe<Scalars['String']['input']>;
  channelId: Scalars['String']['input'];
  vendorSlug?: InputMaybe<Scalars['String']['input']>;
};


export type MutationConfirmPasswordResetArgs = {
  confirmPasswordReset: ConfirmPasswordResetInput;
};


export type MutationCreateAccountArgs = {
  account: CreateAccountInput;
};


export type MutationCreateAffiliateTokenArgs = {
  createAffiliateToken: CreateAffiliateTokenInput;
};


export type MutationCreateBaseThemeArgs = {
  input: CreateBaseThemeInput;
};


export type MutationCreateBaseThemeFromAccountThemeArgs = {
  input: CreateBaseThemeFromAccountThemeInput;
};


export type MutationCreateCanvaAssetUploadJobArgs = {
  input: CreateCanvaAssetUploadJobInput;
};


export type MutationCreateCanvaDesignArgs = {
  input: CreateCanvaDesignInput;
};


export type MutationCreateCanvaDesignExportJobArgs = {
  input: CreateCanvaDesignOutputJobInput;
};


export type MutationCreateCommerceCollectionShortLinkArgs = {
  input: CreateCommerceCollectionShortLinkInput;
};


export type MutationCreateCommerceCollectionTemplateArgs = {
  title: Scalars['String']['input'];
};


export type MutationCreateCommerceCollectionTemplateGroupArgs = {
  title: Scalars['String']['input'];
};


export type MutationCreateCommerceStoreProductShortLinkArgs = {
  input: CreateCommerceStoreProductShortLinkInput;
};


export type MutationCreateCommerceStorefrontPostShortLinkArgs = {
  input: CreateCommerceStorefrontPostShortLinkInput;
};


export type MutationCreateCommerceUrlOverrideArgs = {
  input: CreateUrlOverrideInput;
};


export type MutationCreateCommerceWalletArgs = {
  accountUuid: Scalars['String']['input'];
};


export type MutationCreateCommerceWalletConnectionArgs = {
  accountUuid: Scalars['String']['input'];
  country?: InputMaybe<Scalars['String']['input']>;
  program?: InputMaybe<Scalars['String']['input']>;
};


export type MutationCreateFollowArgs = {
  follow: CreateFollowInput;
};


export type MutationCreateFormArgs = {
  input: CreateFormInput;
};


export type MutationCreateInAppMessageArgs = {
  accountUuid?: InputMaybe<Scalars['String']['input']>;
  code: Scalars['String']['input'];
  count?: InputMaybe<Scalars['Int']['input']>;
  level: Scalars['String']['input'];
};


export type MutationCreateIncompleteGlowUpToolArgs = {
  glowUp: GlowUpInput;
  isGlowUpPreview?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateIntegrationSubscriptionArgs = {
  input: IntegrationSubscribeInput;
};


export type MutationCreateLinkPreviewCollectionWithChildrenArgs = {
  accountUuid?: InputMaybe<Scalars['String']['input']>;
  childGroups: ReadonlyArray<ChildGroupInput>;
  glowUp: GlowUpInput;
  isGlowUpPreview?: InputMaybe<Scalars['Boolean']['input']>;
  parentGroupContext?: InputMaybe<GroupLinkContextInput>;
};


export type MutationCreateMailchimpIntegrationArgs = {
  input?: InputMaybe<CreateMailchimpIntegrationInput>;
};


export type MutationCreateMessagingFaqArgs = {
  accountId: Scalars['Int']['input'];
  faq: MessagingFaqInput;
};


export type MutationCreateNewAccountArgs = {
  captchaToken: Scalars['String']['input'];
  sourceAccountId?: InputMaybe<Scalars['Int']['input']>;
  sourceSubscriptionId?: InputMaybe<Scalars['Int']['input']>;
  username: Scalars['String']['input'];
};


export type MutationCreateOrUpdateAccountArgs = {
  account: FollowerInput;
};


export type MutationCreatePasswordArgs = {
  createPassword: CreatePasswordInput;
};


export type MutationCreatePasswordUnauthenticatedArgs = {
  createPasswordUnauthenticated: CreatePasswordUnauthenticatedInput;
};


export type MutationCreatePaypalIntegrationArgs = {
  input: CreatePaypalIntegrationInput;
};


export type MutationCreatePixPaymentIntentArgs = {
  createPixPaymentIntentInput: CreatePixPaymentIntentInput;
};


export type MutationCreateScheduledNotificationArgs = {
  notification: CreateScheduledNotificationInput;
};


export type MutationCreateShopifyIntegrationArgs = {
  input: CreateShopifyIntegrationInput;
};


export type MutationCreateSocialFeedArgs = {
  input?: InputMaybe<CreateSocialFeedMutationInput>;
};


export type MutationCreateSocialFeedPostArgs = {
  feedId?: InputMaybe<Scalars['String']['input']>;
  input: CreateSocialFeedPostMutationInput;
};


export type MutationCreateSocialFeedPostMediaLinkArgs = {
  input: CreateSocialFeedPostMediaLinkMutationInput;
  mediaId: Scalars['String']['input'];
};


export type MutationCreateSocialIntegrationArgs = {
  input: CreateSocialIntegrationInput;
};


export type MutationCreateSocialNotificationConfigArgs = {
  input: CreateSocialNotificationConfigInput;
};


export type MutationCreateSpringIntegrationArgs = {
  input: CreateSpringIntegrationInput;
};


export type MutationCreateSquareIntegrationArgs = {
  input: CreateSquareIntegrationInput;
};


export type MutationCreateStripeIntegrationArgs = {
  input: CreateStripeIntegrationInput;
};


export type MutationCreateStripeIntegrationFromAccountIdArgs = {
  input: CreateStripeIntegrationFromAccountIdInput;
};


export type MutationCreateStripeIntentForFuturePaymentArgs = {
  billingDetails?: InputMaybe<BillingDetailsInput>;
  currency: Scalars['String']['input'];
  isFreeTrial?: InputMaybe<Scalars['Boolean']['input']>;
  paymentMethodIds: ReadonlyArray<Scalars['String']['input']>;
  paymentMethodType?: InputMaybe<Scalars['String']['input']>;
  stripeGateway?: InputMaybe<Scalars['String']['input']>;
};


export type MutationCreateStripePaymentIntentArgs = {
  accountIds?: InputMaybe<ReadonlyArray<Scalars['Int']['input']>>;
  billingDetails: BillingDetailsInput;
  couponId?: InputMaybe<Scalars['String']['input']>;
  currency: Scalars['String']['input'];
  frequency: Scalars['String']['input'];
  paymentMethodId: Scalars['String']['input'];
  price?: InputMaybe<Scalars['Int']['input']>;
  profileQuantity?: InputMaybe<Scalars['Int']['input']>;
  stripeGateway?: InputMaybe<Scalars['String']['input']>;
  tier: Scalars['String']['input'];
  unitPrice?: InputMaybe<Scalars['Int']['input']>;
};


export type MutationCreateStripeSetupIntentArgs = {
  billingDetails?: InputMaybe<BillingDetailsInput>;
  currency?: InputMaybe<Scalars['String']['input']>;
  isFreeTrial?: InputMaybe<Scalars['Boolean']['input']>;
  paymentMethodId: Scalars['String']['input'];
  stripeGateway?: InputMaybe<Scalars['String']['input']>;
};


export type MutationCreateSubscribeLockFormArgs = {
  input: CreateSubscribeLockFormInput;
};


export type MutationCreateSubscriptionArgs = {
  createSubscription: CreateSubscriptionInput;
};


export type MutationCreateSubscriptionAddOnArgs = {
  createSubscriptionAddOn: CreateSubscriptionAddOnInput;
};


export type MutationCreateSubscriptionV2Args = {
  createSubscription: CreateSubscriptionV2Input;
};


export type MutationCreateUserArgs = {
  source?: InputMaybe<Scalars['String']['input']>;
  user: CreateUserInput;
};


export type MutationCreateWorkspaceArgs = {
  avatarUrl?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
};


export type MutationCreateYoutubeIntegrationArgs = {
  integration: IntegrationInput;
};


export type MutationDeleteAccountArgs = {
  accountUuid: Scalars['String']['input'];
};


export type MutationDeleteAffiliateTokenArgs = {
  deleteAffiliateToken: DeleteAffiliateTokenInput;
};


export type MutationDeleteCommerceAccountProductFromCollectionArgs = {
  input: ManageAccountProductToCollectionInput;
};


export type MutationDeleteCommerceCollectionArgs = {
  input: DeleteCommerceCollectionInput;
};


export type MutationDeleteCommerceCollectionTemplateArgs = {
  id: Scalars['String']['input'];
};


export type MutationDeleteCommerceCollectionTemplateGroupArgs = {
  id: Scalars['String']['input'];
};


export type MutationDeleteCommerceMarketplaceInstanceFromCollectionArgs = {
  input: ManageMarketplaceInstanceToCollectionInput;
};


export type MutationDeleteCommercePreviewForUserArgs = {
  input: DeleteCommercePreviewForUserInput;
};


export type MutationDeleteCommercePreviewsForUserArgs = {
  accountUuid: Scalars['String']['input'];
};


export type MutationDeleteCommerceStoreProductArgs = {
  accountUuid: Scalars['String']['input'];
  id: Scalars['String']['input'];
};


export type MutationDeleteCommerceStoreProductFromCollectionArgs = {
  input: DeleteCommerceStoreProductFromCollectionInput;
};


export type MutationDeleteCommerceStoreProductsFromCollectionArgs = {
  input: DeleteCommerceStoreProductsFromCollectionInput;
};


export type MutationDeleteCommerceStoreProductsFromStorefrontPostArgs = {
  input: DeleteCommerceStoreProductsFromStorefrontPostInput;
};


export type MutationDeleteCommerceStorefrontPostArgs = {
  input: DeleteCommerceStorefrontPostInput;
};


export type MutationDeleteCommerceUgcContentForUserArgs = {
  input: DeleteCommerceUgcContentForUserInput;
};


export type MutationDeleteCommerceUgcContentFromCollectionArgs = {
  input: DeleteCommerceUgcContentInCollectionInput;
};


export type MutationDeleteCommerceUgcContentFromStorefrontPostArgs = {
  input: DeleteCommerceUgcContentFromStorefrontPostInput;
};


export type MutationDeleteDocumentArgs = {
  accountUuid: Scalars['String']['input'];
  id: Scalars['String']['input'];
};


export type MutationDeleteFollowerArgs = {
  input: DeleteFollowerInput;
};


export type MutationDeleteGlowUpStateArgs = {
  accountUuid?: InputMaybe<Scalars['String']['input']>;
  isGlowUpPreview?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationDeleteGoogleAuthTokenArgs = {
  integrationId: Scalars['String']['input'];
};


export type MutationDeleteInstagramWebhookMutationArgs = {
  accountUuid?: InputMaybe<Scalars['String']['input']>;
  instagramBusinessAccountId: Scalars['String']['input'];
  integrationId: Scalars['String']['input'];
};


export type MutationDeleteIntegrationArgs = {
  id: Scalars['String']['input'];
};


export type MutationDeleteLinkArgs = {
  id: Scalars['Int']['input'];
  input?: InputMaybe<DeleteLinkInput>;
  viewId?: InputMaybe<Scalars['Int']['input']>;
};


export type MutationDeleteMessagingFaqArgs = {
  accountId: Scalars['Int']['input'];
  faqId: Scalars['String']['input'];
};


export type MutationDeleteNotificationsByTypeArgs = {
  eventName: Scalars['String']['input'];
};


export type MutationDeleteScheduledNotificationArgs = {
  notification: DeleteScheduledNotificationInput;
};


export type MutationDeleteSocialIntegrationArgs = {
  id: Scalars['String']['input'];
  type: SocialIntegrationType;
};


export type MutationDeleteSocialNotificationConfigArgs = {
  input: DeleteSocialNotificationConfigInput;
};


export type MutationDeleteSquareIntegrationArgs = {
  id: Scalars['String']['input'];
};


export type MutationDeleteUserArgs = {
  uuid: Scalars['String']['input'];
};


export type MutationDismissInAppMessageArgs = {
  code: Scalars['String']['input'];
};


export type MutationDuplicateProfileArgs = {
  overrides?: InputMaybe<ReadonlyArray<OverrideArguments>>;
  sourceAccountId?: InputMaybe<Scalars['Int']['input']>;
};


export type MutationEditCommerceAccountCollectionArgs = {
  input: EditCommerceAccountCollectionInput;
};


export type MutationEditCommerceCollectionArgs = {
  input: EditCommerceCollectionInput;
};


export type MutationEditCommerceCollectionTemplateArgs = {
  input: EditCommerceCollectionTemplateInput;
};


export type MutationEditCommerceCollectionTemplateGroupArgs = {
  input: EditCommerceCollectionTemplateGroupInput;
};


export type MutationEditCommerceStoreProductArgs = {
  input: EditCommerceStoreProductInput;
};


export type MutationEditCommerceStorefrontPostArgs = {
  input: EditCommerceStorefrontPostInput;
};


export type MutationFollowAccountArgs = {
  follow: FollowAccountInput;
};


export type MutationGenerateCommercePreviewForUserArgs = {
  accountUuid: Scalars['String']['input'];
};


export type MutationGenerateCommercePreviewForUserByPostArgs = {
  accountUuid: Scalars['String']['input'];
  isShopMy: Scalars['Boolean']['input'];
  postId: Scalars['String']['input'];
};


export type MutationGenerateSocialContentDefinitionsArgs = {
  input: SocialContentDefinitionInput;
};


export type MutationGenerateSocialContentPostCaptionsArgs = {
  accountUuid: Scalars['String']['input'];
  input: SocialContentPostCaptionInput;
};


export type MutationGenerateSocialContentPostIdeasArgs = {
  accountUuid: Scalars['String']['input'];
  input: SocialContentPostIdeaInput;
};


export type MutationGlowUpArgs = {
  accountUuid?: InputMaybe<Scalars['String']['input']>;
  isGlowUpPreview?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationGlowUpProfileArgs = {
  accountUuid: Scalars['String']['input'];
  input: GlowupInput;
};


export type MutationImportProfileFromJsonArgs = {
  profileJson: Scalars['String']['input'];
};


export type MutationIndexIntercomArticlesArgs = {
  accountUuid: Scalars['String']['input'];
};


export type MutationIndexWebsiteArgs = {
  accountUuid: Scalars['String']['input'];
  indexingOptions?: InputMaybe<ChatEmbeddingIndexOptions>;
  templateQuestions?: InputMaybe<ChatQuestionAnswerList>;
  url: Scalars['String']['input'];
};


export type MutationInviteAccountToWorkspaceArgs = {
  accountUuid: Scalars['String']['input'];
  workspaceUuid: Scalars['String']['input'];
};


export type MutationInviteAdminArgs = {
  accountId: Scalars['String']['input'];
  identifier: Scalars['String']['input'];
  inviteeRole?: InputMaybe<AdminInvitationInviteeRole>;
  isRequireConfirmation?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationInviteUserByEmailArgs = {
  accountId: Scalars['String']['input'];
  email: Scalars['String']['input'];
};


export type MutationInviteUserToWorkspaceArgs = {
  email?: InputMaybe<Scalars['String']['input']>;
  role: Scalars['String']['input'];
  userUuid?: InputMaybe<Scalars['String']['input']>;
  workspaceUuid: Scalars['String']['input'];
};


export type MutationLoginUserArgs = {
  user: LoginUserInput;
};


export type MutationLtfollowers_DeleteAccountArgs = {
  account: DeleteAccountInput;
};


export type MutationMarkAllNotificationsReadArgs = {
  accountUuid: Scalars['String']['input'];
};


export type MutationMarkNotificationAsReadArgs = {
  accountUuid: Scalars['String']['input'];
  notificationId: Scalars['ID']['input'];
};


export type MutationMatchAndCreateProductArgs = {
  accountUuid: Scalars['String']['input'];
  url: Scalars['String']['input'];
};


export type MutationMigrateUserToPasswordUserArgs = {
  password?: InputMaybe<Scalars['String']['input']>;
  username: Scalars['String']['input'];
};


export type MutationMoveLinksArgs = {
  ids: ReadonlyArray<Scalars['Int']['input']>;
  parentId?: InputMaybe<Scalars['Int']['input']>;
  positions: ReadonlyArray<Scalars['Int']['input']>;
};


export type MutationOnboardCommerceWalletArgs = {
  accountUuid: Scalars['String']['input'];
};


export type MutationOptIntoCommerceConciergeArgs = {
  accountUuid: Scalars['String']['input'];
};


export type MutationPauseNotificationsArgs = {
  follower?: InputMaybe<PauseNotificationsInput>;
};


export type MutationPostEmailSummaryArgs = {
  accountId: Scalars['Int']['input'];
  range: Scalars['String']['input'];
  timezone?: InputMaybe<Scalars['String']['input']>;
};


export type MutationRateSocialContentPostCaptionArgs = {
  accountUuid: Scalars['String']['input'];
  input: SocialContentPostCaptionRateInput;
};


export type MutationRateSocialContentPostIdeaArgs = {
  accountUuid: Scalars['String']['input'];
  input: SocialContentPostIdeaRateInput;
};


export type MutationReauthorizePaypalIntegrationArgs = {
  input: ReauthorizePaypalIntegrationInput;
};


export type MutationReauthorizeShopifyIntegrationArgs = {
  input: ReauthorizeShopifyIntegrationInput;
};


export type MutationReauthorizeSquareIntegrationArgs = {
  input: ReauthorizeSquareIntegrationInput;
};


export type MutationReauthorizeStripeIntegrationArgs = {
  input: ReauthorizeStripeIntegrationInput;
};


export type MutationRefollowArgs = {
  follow?: InputMaybe<RefollowInput>;
};


export type MutationRemoveAccountCardArgs = {
  cardId: Scalars['String']['input'];
};


export type MutationRemoveAccountFromWorkspaceArgs = {
  accountId: Scalars['String']['input'];
  workspaceId: Scalars['String']['input'];
};


export type MutationRemoveAdminArgs = {
  accountId: Scalars['String']['input'];
  userId: Scalars['String']['input'];
};


export type MutationRemoveChildLinkArgs = {
  input: RemoveChildLinkInput;
};


export type MutationRemoveCommerceBrandProfileRateArgs = {
  accountUuid: Scalars['String']['input'];
  rateId: Scalars['String']['input'];
};


export type MutationRemoveCommerceCollectionTemplateFromCommerceCollectionTemplateGroupArgs = {
  groupId: Scalars['String']['input'];
  templateId: Scalars['String']['input'];
};


export type MutationRemoveFieldsFromFormArgs = {
  input: RemoveFieldsFromFormInput;
};


export type MutationRemoveMarketplaceInstanceFromCommerceCollectionTemplateArgs = {
  instanceId: Scalars['String']['input'];
  templateId: Scalars['String']['input'];
};


export type MutationRemoveSocialContentToLinkAssociationsArgs = {
  input: RemoveSocialContentToLinkAssociationsInput;
};


export type MutationRemoveSocialFeedArgs = {
  feedId: Scalars['String']['input'];
};


export type MutationRemoveSocialFeedPostArgs = {
  postId: Scalars['String']['input'];
};


export type MutationRemoveSocialFeedPostMediaLinkArgs = {
  linkId: Scalars['Int']['input'];
};


export type MutationRemoveSubscriptionCouponArgs = {
  couponId: Scalars['String']['input'];
  subscriptionId?: InputMaybe<Scalars['Int']['input']>;
};


export type MutationRemoveSubscriptionScheduledCancellationArgs = {
  subscriptionId?: InputMaybe<Scalars['Int']['input']>;
};


export type MutationRemoveSubscriptionScheduledChangesArgs = {
  subscriptionId?: InputMaybe<Scalars['Int']['input']>;
};


export type MutationRemoveSubscriptionV2CouponArgs = {
  couponId: Scalars['String']['input'];
  subscriptionId?: InputMaybe<Scalars['Int']['input']>;
};


export type MutationRemoveUserFromWorkspaceArgs = {
  userId: Scalars['Int']['input'];
  workspaceId: Scalars['String']['input'];
};


export type MutationRemoveYoutubeIntegrationArgs = {
  integrationId: Scalars['String']['input'];
};


export type MutationReorderAudienceManagerSubscriberTableSchemaArgs = {
  input: ReorderAudienceManagerSubscriberTableSchemaInput;
};


export type MutationReorderChildLinkArgs = {
  input: ReorderChildLinkInput;
};


export type MutationReorderCommerceCollectionArgs = {
  input: EditCommerceRenderOrderInput;
};


export type MutationReorderCommerceProductInCollectionArgs = {
  input: EditCommerceProductInCollectionOrderInput;
};


export type MutationReorderCommerceStoreProductArgs = {
  input: EditCommerceRenderOrderInput;
};


export type MutationReorderCommerceStoreProductInCollectionArgs = {
  input: ReorderCommerceStoreProductInCollectionInput;
};


export type MutationReorderCommerceStoreProductsInCollectionArgs = {
  input: ReorderCommerceStoreProductsInCollectionInput;
};


export type MutationReorderCommerceStoreProductsInStorefrontPostArgs = {
  input: ReorderCommerceStoreProductsInStorefrontPostInput;
};


export type MutationReorderCommerceStorefrontItemArgs = {
  input: EditCommerceRenderOrderInput;
};


export type MutationReorderCommerceStorefrontPostArgs = {
  input: EditCommerceRenderOrderInput;
};


export type MutationReorderCommerceUgcContentInCollectionArgs = {
  input: ReorderCommerceStoreProductInCollectionInput;
};


export type MutationReorderCommerceUgcContentInStorefrontPostArgs = {
  input: ReorderCommerceUgcContentInStorefrontPostInput;
};


export type MutationReorderFormFieldsArgs = {
  input: ReorderFormFieldsInput;
};


export type MutationReorderLinksArgs = {
  destination: Scalars['Int']['input'];
  id: Scalars['Int']['input'];
  source: Scalars['Int']['input'];
  viewId?: InputMaybe<Scalars['Int']['input']>;
};


export type MutationReorderSocialLinksArgs = {
  reorderSocialLinks: SocialLinkReorderInput;
};


export type MutationReorderSocialNotificationConfigArgs = {
  input: ReorderSocialNotificationConfigInput;
};


export type MutationRequestAudienceSupportEmailVerificationCodeArgs = {
  email: Scalars['String']['input'];
};


export type MutationRequestEmailChangeOtpArgs = {
  input: RequestEmailChangeOtpInput;
};


export type MutationRequestFollowerListArgs = {
  account?: InputMaybe<RequestFollowerListInput>;
};


export type MutationRequestFormSubmissionListArgs = {
  input: RequestFormSubmissionListInput;
};


export type MutationRequestLtFollowersAccountSyncArgs = {
  input: RequestLtFollowersAccountSyncInput;
};


export type MutationRequestPasswordResetArgs = {
  requestPasswordReset: RequestPasswordResetInput;
};


export type MutationRequestUsernameArgs = {
  requestUsername: RequestUsernameInput;
};


export type MutationResetCommerceOnboardingStateArgs = {
  accountUuid: Scalars['String']['input'];
};


export type MutationResubscribeToDigestArgs = {
  follower?: InputMaybe<UnsubscribeDigestInput>;
};


export type MutationRewriteImageGenerationPromptArgs = {
  input: RewritePromptInput;
};


export type MutationSaveGlowUpToProfileArgs = {
  accountUuid?: InputMaybe<Scalars['String']['input']>;
};


export type MutationScheduleLeapLinkOffArgs = {
  scheduleLeapLinkOff: ScheduleLeapLinkOffInput;
};


export type MutationScheduleLinkOffArgs = {
  scheduleLinkOff: ScheduleLinkOffInput;
};


export type MutationScheduleLinkOnArgs = {
  scheduleLinkOn: ScheduleLinkOnInput;
};


export type MutationSendCommerceOnboardingBrazeEventArgs = {
  accountUuids: ReadonlyArray<Scalars['String']['input']>;
  eventType: CommerceOnboardingEventType;
};


export type MutationSendFollowerNotificationsArgs = {
  notification: SendNotificationInput;
};


export type MutationSendInstagramDirectMessageMutationArgs = {
  input: SendInstagramDirectMessageInput;
};


export type MutationSendInstagramMessagePublicReplyMutationArgs = {
  input: SendInstagramMessagePublicReplyInput;
};


export type MutationSetAccountOnboardingStateArgs = {
  onboardingState?: InputMaybe<OnboardingStateType>;
};


export type MutationSetAccountVerticalsArgs = {
  id: Scalars['Int']['input'];
  input: SetAccountVerticalsInput;
};


export type MutationSetAdminInvitationStatusArgs = {
  status?: InputMaybe<AdminInvitationStatus>;
  uuid: Scalars['String']['input'];
};


export type MutationSetAgreeToShareArgs = {
  follow: SetAgreeToShareInput;
};


export type MutationSetAudienceNotificationsEnabledArgs = {
  enabled: Scalars['Boolean']['input'];
};


export type MutationSetBookLinkContextArgs = {
  context: BookLinkContextInput;
  id: Scalars['Int']['input'];
};


export type MutationSetChatbotLinkContextArgs = {
  context: ChatbotLinkContextInput;
  id: Scalars['Int']['input'];
};


export type MutationSetChildLinkArgs = {
  input: SetChildLinkInput;
};


export type MutationSetClubhouseLinkContextArgs = {
  context: ClubhouseLinkContextInput;
  id: Scalars['Int']['input'];
};


export type MutationSetCoachingLinkContextArgs = {
  context: CoachingLinkContextInput;
  id: Scalars['Int']['input'];
};


export type MutationSetCommerceAutoAffiliateLinksEnabledArgs = {
  accountUuid: Scalars['String']['input'];
  enabled: Scalars['Boolean']['input'];
};


export type MutationSetCommerceAutoAffiliateLinksStrategyArgs = {
  accountUuid: Scalars['String']['input'];
  strategy: CommerceAutoAffiliateLinksStrategy;
};


export type MutationSetCommerceConciergeShopStateArgs = {
  accountUuid: Scalars['String']['input'];
  state?: InputMaybe<CommerceConciergeShopState>;
};


export type MutationSetCommerceConciergeShopStateRetoolArgs = {
  accountUuid: Scalars['String']['input'];
  state?: InputMaybe<CommerceConciergeShopState>;
};


export type MutationSetCommerceOnboardingCohortArgs = {
  accountUuid: Scalars['String']['input'];
  cohort?: InputMaybe<CommerceOnboardingCohort>;
};


export type MutationSetCommerceOnboardingTabBadgeArgs = {
  accountUuid: Scalars['String']['input'];
  tabBadge?: InputMaybe<CommerceOnboardingTabBadge>;
};


export type MutationSetCommercePayLinkContextArgs = {
  context: CommercePayLinkContextInput;
  id: Scalars['Int']['input'];
};


export type MutationSetCommerceProductLinkContextArgs = {
  context: CommerceProductLinkContextInput;
  id: Scalars['Int']['input'];
};


export type MutationSetCommerceStoreApplicationStatusArgs = {
  accountUuid: Scalars['String']['input'];
  applicationStatus?: InputMaybe<CommerceStoreApplicationStatus>;
};


export type MutationSetCommunityLinkContextArgs = {
  context: CommunityLinkContextInput;
  id: Scalars['Int']['input'];
};


export type MutationSetContactDetailsLinkContextArgs = {
  context: ContactDetailsLinkContextInput;
  id: Scalars['Int']['input'];
};


export type MutationSetDefaultNotificationMethodArgs = {
  input: SetDefaultNotificationMethodInput;
};


export type MutationSetDefaultProfilePageArgs = {
  defaultProfilePage?: InputMaybe<DefaultProfilePage>;
  id: Scalars['Int']['input'];
};


export type MutationSetDigitalDownloadLinkContextArgs = {
  context: DigitalDownloadLinkContextInput;
  id: Scalars['Int']['input'];
};


export type MutationSetExtensionLinkContextArgs = {
  context: ExtensionLinkContextInput;
  id: Scalars['Int']['input'];
};


export type MutationSetFacebookLinkContextArgs = {
  context: FacebookLinkContextInput;
  id: Scalars['Int']['input'];
};


export type MutationSetFollowNotificationSettingsForAccountArgs = {
  follow?: InputMaybe<SetFollowNotificationSettingsInput>;
};


export type MutationSetFormLinkContextArgs = {
  context: FormLinkContextInput;
  id: Scalars['Int']['input'];
};


export type MutationSetGoogleAuthTokenArgs = {
  integrationId: Scalars['String']['input'];
  token: Scalars['String']['input'];
};


export type MutationSetGroupLinkContextArgs = {
  context: GroupLinkContextInput;
  id: Scalars['Int']['input'];
};


export type MutationSetHasActionedArgs = {
  accountUuid: Scalars['String']['input'];
  insightId: Scalars['String']['input'];
};


export type MutationSetHasGeotargetingViewsArgs = {
  id: Scalars['Int']['input'];
  input: SetHasGeotargetingViewsInput;
};


export type MutationSetHasViewedArgs = {
  accountUuid: Scalars['String']['input'];
  insightId: Scalars['String']['input'];
};


export type MutationSetHeaderLinkContextArgs = {
  context: HeaderLinkContextInput;
  id: Scalars['Int']['input'];
};


export type MutationSetInstagramPostLinkContextArgs = {
  context: InstagramPostLinkContextInput;
  id: Scalars['Int']['input'];
};


export type MutationSetInstagramProfileLinkContextArgs = {
  context: InstagramProfileLinkContextInput;
  id: Scalars['Int']['input'];
};


export type MutationSetInstagramWebhookMutationArgs = {
  accountUuid?: InputMaybe<Scalars['String']['input']>;
  instagramBusinessAccountId: Scalars['String']['input'];
  integrationId: Scalars['String']['input'];
  shouldUseInstagramBusiness?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationSetKajabiCourseContextMutationArgs = {
  context: KajabiCourseContextInput;
  id: Scalars['Int']['input'];
};


export type MutationSetLinkGatingRuleArgs = {
  gate: GateRuleInput;
  id: Scalars['Int']['input'];
};


export type MutationSetLinkModerationLabelsArgs = {
  id: Scalars['Int']['input'];
  moderationLabels?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']['input']>>>;
};


export type MutationSetLinkModifiersArgs = {
  accountUuid?: InputMaybe<Scalars['String']['input']>;
  glowUp?: InputMaybe<GlowUpInput>;
  id: Scalars['Int']['input'];
  isGlowUpPreview?: InputMaybe<Scalars['Boolean']['input']>;
  modifiers: LinkModifiersInput;
};


export type MutationSetLinkerRecommendationsLinkContextArgs = {
  context: LinkerRecommendationsLinkContextInput;
  id: Scalars['Int']['input'];
};


export type MutationSetMailingListIntegrationArgs = {
  integration: IntegrationInput;
};


export type MutationSetMessagingSettingsArgs = {
  id: Scalars['Int']['input'];
  messagingSettings: MessagingSettingsInput;
};


export type MutationSetMobileAppLinkContextArgs = {
  context: MobileAppLinkContextInput;
  id: Scalars['Int']['input'];
};


export type MutationSetMonetizationIntentsArgs = {
  id: Scalars['Int']['input'];
  input: SetMonetizationIntentsInput;
};


export type MutationSetMultipleLinkPreviewGroupLinkContextArgs = {
  context: GroupLinkContextInput;
};


export type MutationSetMusicLinkContextArgs = {
  context: MusicLinkContextInput;
  id: Scalars['Int']['input'];
};


export type MutationSetNftGalleryLinkContextArgs = {
  context: NftGalleryLinkContextInput;
  id: Scalars['Int']['input'];
};


export type MutationSetNotificationMethodArgs = {
  method: NotificationMethodInput;
};


export type MutationSetNotificationsSettingsArgs = {
  account: SetNotificationSettingsInput;
};


export type MutationSetOnboardingFlowStyleArgs = {
  accountUuid: Scalars['String']['input'];
  style?: InputMaybe<CommerceOnboardingFlowStyle>;
};


export type MutationSetOnboardingGoalsArgs = {
  goals: ReadonlyArray<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
};


export type MutationSetPinterestLinkContextArgs = {
  context: PinterestLinkContextInput;
  id: Scalars['Int']['input'];
};


export type MutationSetPodcastLinkContextArgs = {
  context: PodcastLinkContextInput;
  id: Scalars['Int']['input'];
};


export type MutationSetPreSaveLinkContextArgs = {
  context: PreSaveLinkContextInput;
  id: Scalars['Int']['input'];
};


export type MutationSetProductLinkContextArgs = {
  context: ProductLinkContextInput;
  id: Scalars['Int']['input'];
};


export type MutationSetProfileBadgesArgs = {
  id: Scalars['Int']['input'];
  profileBadges?: InputMaybe<ReadonlyArray<ProfileBadges>>;
};


export type MutationSetRequestLinkContextArgs = {
  context: RequestLinkContextInput;
  id: Scalars['Int']['input'];
};


export type MutationSetRssFeedLinkContextArgs = {
  context: RssFeedLinkContextInput;
  id: Scalars['Int']['input'];
};


export type MutationSetShopEntryPointOnLinksEnabledArgs = {
  accountUuid: Scalars['String']['input'];
  enabled: Scalars['Boolean']['input'];
};


export type MutationSetSocialAiConsentArgs = {
  consent: Scalars['Boolean']['input'];
  id: Scalars['Int']['input'];
};


export type MutationSetSpotifyLinkContextArgs = {
  context: SpotifyLinkContextInput;
  id: Scalars['Int']['input'];
};


export type MutationSetSpringLinkContextArgs = {
  context: SpringLinkContextInput;
  id: Scalars['Int']['input'];
};


export type MutationSetStoreTabEnabledArgs = {
  enabled: Scalars['Boolean']['input'];
  id: Scalars['Int']['input'];
};


export type MutationSetThreadsLinkContextArgs = {
  context: ThreadsLinkContextInput;
  id: Scalars['Int']['input'];
};


export type MutationSetTikTokJumpLinkContextArgs = {
  context: TikTokJumpLinkContextInput;
  id: Scalars['Int']['input'];
};


export type MutationSetTikTokLinkContextArgs = {
  context: TikTokLinkContextInput;
  id: Scalars['Int']['input'];
};


export type MutationSetTikTokProfileLinkContextArgs = {
  context: TikTokProfileLinkContextInput;
  id: Scalars['Int']['input'];
};


export type MutationSetTipGiftLinkContextArgs = {
  context: TipGiftLinkContextInput;
  id: Scalars['Int']['input'];
};


export type MutationSetTwitchLinkContextArgs = {
  context: TwitchLinkContextInput;
  id: Scalars['Int']['input'];
};


export type MutationSetTwitterLinkContextArgs = {
  context: TwitterLinkContextInput;
  id: Scalars['Int']['input'];
};


export type MutationSetUserEmailVerificationLastSentAtArgs = {
  date: Scalars['Date']['input'];
  id: Scalars['Int']['input'];
};


export type MutationSetUserEmailVerifiedArgs = {
  id: Scalars['Int']['input'];
};


export type MutationSetVideoLinkContextArgs = {
  context: VideoLinkContextInput;
  id: Scalars['Int']['input'];
};


export type MutationSetVimeoLinkContextArgs = {
  context: VimeoLinkContextInput;
  id: Scalars['Int']['input'];
};


export type MutationSetWeeklyDigestSubscribedArgs = {
  follower?: InputMaybe<SubscribeWeeklyDigestInput>;
};


export type MutationSetYoutubeLinkContextArgs = {
  context: YoutubeLinkContextInput;
  id: Scalars['Int']['input'];
};


export type MutationSkipCommerceBrandProfileSetupArgs = {
  accountUuid: Scalars['String']['input'];
};


export type MutationSoftDeleteAccountArgs = {
  accountUuid: Scalars['String']['input'];
};


export type MutationSoftDeleteUserArgs = {
  uuid: Scalars['String']['input'];
};


export type MutationStartChatkitArgs = {
  accountUuid: Scalars['String']['input'];
  request: StartChatkitRequest;
};


export type MutationSubmitCommerceProductNotFoundFeedbackArgs = {
  input: SubmitCommerceProductNotFoundFeedbackInput;
};


export type MutationSubmitContactFormArgs = {
  input: ContactFormIntegrationInput;
};


export type MutationSubmitFormArgs = {
  input: SubmitFormInput;
};


export type MutationSubmitSponsoredOfferForReviewArgs = {
  submission: SponsoredOfferSubmissionInput;
};


export type MutationSwitchAccountArgs = {
  id: Scalars['Int']['input'];
};


export type MutationToggleGlowUpChangeArgs = {
  input: ToggleGlowUpChangeInput;
  isGlowUpPreview?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationTriggerAddedVendorToCatalogArgs = {
  input: TriggerAddedVendorToCatalogInput;
};


export type MutationUnfollowArgs = {
  follow?: InputMaybe<UnfollowInput>;
};


export type MutationUnfollowAllArgs = {
  follow?: InputMaybe<UnfollowInput>;
};


export type MutationUnfollowProfileArgs = {
  follow?: InputMaybe<UnfollowProfileInput>;
};


export type MutationUnsubscribeFromDigestArgs = {
  follower?: InputMaybe<UnsubscribeDigestInput>;
};


export type MutationUpdateAccountAppearanceArgs = {
  accountUuid?: InputMaybe<Scalars['String']['input']>;
  appearance: UpdateAccountAppearanceInput;
  glowUp?: InputMaybe<GlowUpInput>;
};


export type MutationUpdateAccountInfoArgs = {
  account: UpdateAccountInfoInput;
};


export type MutationUpdateAccountSettingsArgs = {
  accountSettings: AccountSettingsInput;
  accountUuid: Scalars['String']['input'];
};


export type MutationUpdateAccountTitleAndDescriptionArgs = {
  accountUuid?: InputMaybe<Scalars['String']['input']>;
  glowUp?: InputMaybe<GlowUpInput>;
  input: UpdateAccountTitleAndDescriptionInput;
  isGlowUpPreview?: InputMaybe<Scalars['Boolean']['input']>;
  shouldUpdatePreview?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationUpdateAffiliateTokenArgs = {
  updateAffiliateToken: UpdateAffiliateTokenInput;
};


export type MutationUpdateAudienceManagerSubscriberTableSchemaColumnCheckedArgs = {
  input: UpdateAudienceManagerSubscriberTableSchemaColumnCheckedInput;
};


export type MutationUpdateAudienceNotificationsEmailArgs = {
  email: Scalars['String']['input'];
};


export type MutationUpdateAudienceSupportEmailArgs = {
  email?: InputMaybe<Scalars['String']['input']>;
  otpCode?: InputMaybe<Scalars['String']['input']>;
};


export type MutationUpdateBaseThemeByKeyArgs = {
  input: UpdateBaseThemeByKeyInput;
};


export type MutationUpdateBaseThemeFromAccountThemeArgs = {
  input: UpdateBaseThemeFromAccountThemeInput;
};


export type MutationUpdateCommerceBrandProfileCollaborationInterestsArgs = {
  input: UpdateCommerceBrandProfileCollaborationInterestsArgs;
};


export type MutationUpdateCommerceBrandProfileCreatorInfoArgs = {
  input: UpdateCommerceBrandProfileCreatorInfoArgs;
};


export type MutationUpdateCommerceBrandProfileHasConnectedSocialsArgs = {
  accountUuid: Scalars['String']['input'];
  hasConnectedSocials: Scalars['Boolean']['input'];
};


export type MutationUpdateCommerceBrandProfileMailingAddressArgs = {
  input: UpdateCommerceBrandProfileMailingAddressArgs;
};


export type MutationUpdateCommerceBrandProfilePersonalInfoArgs = {
  input: UpdateCommerceBrandProfilePersonalInfoArgs;
};


export type MutationUpdateCommerceBrandProfilePreviousCollaborationsArgs = {
  input: UpdateCommerceBrandProfilePreviousCollaborationsArgs;
};


export type MutationUpdateCommerceBrandProfileProfessionalInformationArgs = {
  input: UpdateCommerceBrandProfileProfessionalInformationArgs;
};


export type MutationUpdateCommerceVendorArgs = {
  input: UpdateVendorInput;
  slug: Scalars['String']['input'];
};


export type MutationUpdateCommunicationStyleArgs = {
  accountUuid: Scalars['String']['input'];
  commStyle?: InputMaybe<Scalars['String']['input']>;
};


export type MutationUpdateDocumentArgs = {
  accountUuid: Scalars['String']['input'];
  doc: DocumentInput;
};


export type MutationUpdateFormArgs = {
  input: UpdateFormInput;
};


export type MutationUpdateFormFieldArgs = {
  input: UpdateFormFieldInput;
};


export type MutationUpdateGlowUpStatusArgs = {
  accountUuid?: InputMaybe<Scalars['String']['input']>;
  status: GlowUpStatus;
};


export type MutationUpdateInAppMessageArgs = {
  code: Scalars['String']['input'];
  count?: InputMaybe<Scalars['Int']['input']>;
  dismissedAt?: InputMaybe<Scalars['Date']['input']>;
  level?: InputMaybe<Scalars['String']['input']>;
};


export type MutationUpdateInAppSubscriptionArgs = {
  planId?: InputMaybe<Scalars['String']['input']>;
};


export type MutationUpdateLinkArgs = {
  accountUuid?: InputMaybe<Scalars['String']['input']>;
  glowUp?: InputMaybe<GlowUpInput>;
  id: Scalars['Int']['input'];
  input: UpdateLinkInput;
  viewId?: InputMaybe<Scalars['Int']['input']>;
};


export type MutationUpdateMailchimpIntegrationArgs = {
  input: UpdateMailchimpIntegrationInput;
};


export type MutationUpdateMailingListIntegrationArgs = {
  integration: IntegrationInput;
  options?: InputMaybe<IntegrationOptionsInput>;
};


export type MutationUpdateMessagingFaqArgs = {
  accountId: Scalars['Int']['input'];
  faq: MessagingFaqInput;
  faqId: Scalars['String']['input'];
};


export type MutationUpdateMessagingFaqsEnabledArgs = {
  accountId: Scalars['Int']['input'];
  enabled: Scalars['Boolean']['input'];
};


export type MutationUpdatePaypalIntegrationArgs = {
  id: Scalars['String']['input'];
  title: Scalars['String']['input'];
};


export type MutationUpdateProcessedCustomVideoArgs = {
  input: UpdateProcessedCustomVideoInput;
};


export type MutationUpdateScheduledNotificationArgs = {
  notification: UpdateScheduledNotificationInput;
};


export type MutationUpdateShopifyIntegrationArgs = {
  input: UpdateShopifyIntegrationInput;
};


export type MutationUpdateSocialFeedArgs = {
  feedId: Scalars['String']['input'];
  input: UpdateSocialFeedMutationInput;
};


export type MutationUpdateSocialFeedPostArgs = {
  accountId?: InputMaybe<Scalars['Int']['input']>;
  input: UpdateSocialFeedPostMutationInput;
  postId: Scalars['String']['input'];
};


export type MutationUpdateSocialFeedPostMediaArgs = {
  accountId?: InputMaybe<Scalars['Int']['input']>;
  input: UpdateSocialFeedPostMediaMutationInput;
  mediaId: Scalars['String']['input'];
};


export type MutationUpdateSocialFeedPostMediaLinkArgs = {
  input: UpdateSocialFeedPostMediaLinkMutationInput;
  linkId: Scalars['Int']['input'];
};


export type MutationUpdateSocialIntegrationArgs = {
  input: UpdateSocialIntegrationInput;
};


export type MutationUpdateSocialLinkArgs = {
  accountUuid?: InputMaybe<Scalars['String']['input']>;
  glowUp?: InputMaybe<GlowUpInput>;
  isGlowUpPreview?: InputMaybe<Scalars['Boolean']['input']>;
  updateSocialLink: SocialLinkInput;
};


export type MutationUpdateSocialLinksPositionArgs = {
  updateSocialLinksPosition: UpdateSocialLinksPositionInput;
};


export type MutationUpdateSocialNotificationConfigArgs = {
  input: UpdateSocialNotificationConfigInput;
};


export type MutationUpdateSocialNotificationConfigSocialIntegrationArgs = {
  input: UpdateSocialNotificationConfigSocialIntegrationInput;
};


export type MutationUpdateSponsoredLinksArgs = {
  newSponsorshipId?: InputMaybe<Scalars['String']['input']>;
  oldSponsorshipId?: InputMaybe<Scalars['String']['input']>;
};


export type MutationUpdateSpringIntegrationArgs = {
  input: UpdateSpringIntegrationInput;
};


export type MutationUpdateSquareIntegrationArgs = {
  id: Scalars['String']['input'];
  input?: InputMaybe<UpdateSquareIntegrationInput>;
};


export type MutationUpdateStripeIntegrationArgs = {
  id: Scalars['String']['input'];
  title: Scalars['String']['input'];
};


export type MutationUpdateSubscriptionArgs = {
  updateSubscription: UpdateSubscriptionInput;
};


export type MutationUpdateSubscriptionAddOnArgs = {
  updateSubscriptionAddOn: UpdateSubscriptionAddOnInput;
};


export type MutationUpdateSubscriptionV2Args = {
  updateSubscription: UpdateSubscriptionV2Input;
};


export type MutationUpdateSubscriptionV2ActiveAccountArgs = {
  updateSubscriptionV2ActiveAccount: UpdateSubscriptionV2ActiveAccountInput;
};


export type MutationUpdateTemplateQuestionsArgs = {
  accountUuid: Scalars['String']['input'];
  templateQuestions?: InputMaybe<ChatQuestionAnswerList>;
};


export type MutationUpdateTimeZoneArgs = {
  timezone?: InputMaybe<Scalars['String']['input']>;
};


export type MutationUpdateUserArgs = {
  input: UpdateUserInput;
};


export type MutationUpdateUserPhoneNumberArgs = {
  phoneNumber: Scalars['String']['input'];
  username: Scalars['String']['input'];
};


export type MutationUpdateUserUsernameArgs = {
  userId: Scalars['String']['input'];
  username: Scalars['String']['input'];
};


export type MutationUpdateUsernameArgs = {
  accountId: Scalars['Int']['input'];
  username: Scalars['String']['input'];
};


export type MutationUpsertSponsoredOffersArgs = {
  offers: ReadonlyArray<SponsoredOfferInput>;
};


export type MutationUpsertVendorsArgs = {
  vendors: ReadonlyArray<UpsertVendorInput>;
};


export type MutationVerifiedDeleteAccountArgs = {
  accountUuid: Scalars['String']['input'];
  otpCode: Scalars['String']['input'];
};


export type MutationVerifiedDeleteCurrentUserArgs = {
  otpCode: Scalars['String']['input'];
};


export type MutationVerifyEmailArgs = {
  assertion: Scalars['String']['input'];
  username: Scalars['String']['input'];
};


export type MutationVerifyEmailChangeOtpArgs = {
  input: VerifyEmailChangeOtpInput;
};

export type NftGateRule = {
  readonly __typename: 'NFTGateRule';
  readonly collectionName?: Maybe<Scalars['String']['output']>;
  readonly contractAddress?: Maybe<Scalars['String']['output']>;
  readonly message?: Maybe<Scalars['String']['output']>;
};

export type NftGateRuleInput = {
  readonly collectionName?: InputMaybe<Scalars['String']['input']>;
  readonly contractAddress?: InputMaybe<Scalars['String']['input']>;
  readonly message?: InputMaybe<Scalars['String']['input']>;
};

export type NftInput = {
  readonly balance?: InputMaybe<Scalars['String']['input']>;
  readonly linkId?: InputMaybe<Scalars['String']['input']>;
};

export type NavigateAction = {
  readonly __typename: 'NavigateAction';
  readonly mobileScreen?: Maybe<Scalars['String']['output']>;
  readonly params?: Maybe<NavigateActionParams>;
  readonly webPath?: Maybe<Scalars['String']['output']>;
};

export type NavigateActionParams = {
  readonly __typename: 'NavigateActionParams';
  readonly action?: Maybe<Scalars['String']['output']>;
  readonly initialMessage?: Maybe<Scalars['String']['output']>;
  readonly title?: Maybe<Scalars['String']['output']>;
};

export type NextBestActionItem = {
  readonly __typename: 'NextBestActionItem';
  readonly actionLabel?: Maybe<Scalars['String']['output']>;
  readonly id: Scalars['String']['output'];
  readonly imageUrl?: Maybe<Scalars['String']['output']>;
  readonly subtitle?: Maybe<Scalars['String']['output']>;
  readonly title: Scalars['String']['output'];
  readonly type: HomeNextBestActionType;
};

export type NextBestActionSectionData = HomeSectionData & {
  readonly __typename: 'NextBestActionSectionData';
  readonly nextBestActionItems?: Maybe<ReadonlyArray<Maybe<NextBestActionItem>>>;
  readonly type: Scalars['String']['output'];
};

export type NftAsset = {
  readonly __typename: 'NftAsset';
  readonly collectionName?: Maybe<Scalars['String']['output']>;
  readonly collectionSymbol?: Maybe<Scalars['String']['output']>;
  readonly collectionVerified?: Maybe<Scalars['Boolean']['output']>;
  readonly contractAddress?: Maybe<Scalars['String']['output']>;
  readonly creatorVerified?: Maybe<Scalars['Boolean']['output']>;
  readonly description?: Maybe<Scalars['String']['output']>;
  readonly externalLink?: Maybe<Scalars['String']['output']>;
  readonly imageUrl?: Maybe<Scalars['String']['output']>;
  readonly name?: Maybe<Scalars['String']['output']>;
  readonly openseaId?: Maybe<Scalars['Int']['output']>;
  readonly openseaLink?: Maybe<Scalars['String']['output']>;
  readonly ownerAddress?: Maybe<Scalars['String']['output']>;
  readonly ownerName?: Maybe<Scalars['String']['output']>;
  readonly tokenId?: Maybe<Scalars['String']['output']>;
};

export type NftAssetInput = {
  readonly collectionName?: InputMaybe<Scalars['String']['input']>;
  readonly collectionSymbol?: InputMaybe<Scalars['String']['input']>;
  readonly collectionVerified?: InputMaybe<Scalars['Boolean']['input']>;
  readonly contractAddress?: InputMaybe<Scalars['String']['input']>;
  readonly creatorVerified?: InputMaybe<Scalars['Boolean']['input']>;
  readonly description?: InputMaybe<Scalars['String']['input']>;
  readonly externalLink?: InputMaybe<Scalars['String']['input']>;
  readonly imageUrl?: InputMaybe<Scalars['String']['input']>;
  readonly name?: InputMaybe<Scalars['String']['input']>;
  readonly openseaId?: InputMaybe<Scalars['Int']['input']>;
  readonly openseaLink?: InputMaybe<Scalars['String']['input']>;
  readonly ownerAddress?: InputMaybe<Scalars['String']['input']>;
  readonly ownerName?: InputMaybe<Scalars['String']['input']>;
  readonly tokenId?: InputMaybe<Scalars['String']['input']>;
};

export type NftGalleryLinkContext = {
  readonly __typename: 'NftGalleryLinkContext';
  readonly assets?: Maybe<ReadonlyArray<Maybe<NftAsset>>>;
  readonly lastUpdated?: Maybe<Scalars['Int']['output']>;
  readonly marketplace?: Maybe<Scalars['String']['output']>;
  readonly signedMessage?: Maybe<Scalars['String']['output']>;
  readonly walletAddress?: Maybe<Scalars['String']['output']>;
  readonly walletProvider?: Maybe<Scalars['String']['output']>;
};

export type NftGalleryLinkContextInput = {
  readonly assets?: InputMaybe<ReadonlyArray<InputMaybe<NftAssetInput>>>;
  readonly lastUpdated?: InputMaybe<Scalars['Int']['input']>;
  readonly marketplace?: InputMaybe<Scalars['String']['input']>;
  readonly signedMessage?: InputMaybe<Scalars['String']['input']>;
  readonly walletAddress?: InputMaybe<Scalars['String']['input']>;
  readonly walletProvider?: InputMaybe<Scalars['String']['input']>;
};

export type Notification = {
  readonly __typename: 'Notification';
  readonly title: Scalars['String']['output'];
};

/** Categories for notifications */
export enum NotificationCategory {
  All = 'ALL',
  Insights = 'INSIGHTS',
  Messages = 'MESSAGES',
  Opportunities = 'OPPORTUNITIES',
  Updates = 'UPDATES'
}

export type NotificationConnection = {
  readonly __typename: 'NotificationConnection';
  readonly edges: ReadonlyArray<NotificationEdge>;
  readonly pageInfo: PageInfo;
};

export type NotificationCounts = {
  readonly __typename: 'NotificationCounts';
  readonly categories: ReadonlyArray<NotificationCountsByCategory>;
  readonly summary: NotificationCountsSummary;
};

export type NotificationCountsByCategory = {
  readonly __typename: 'NotificationCountsByCategory';
  readonly category: NotificationCategory;
  readonly readCount: Scalars['Int']['output'];
  readonly totalCount: Scalars['Int']['output'];
  readonly unreadCount: Scalars['Int']['output'];
};

export type NotificationCountsSummary = {
  readonly __typename: 'NotificationCountsSummary';
  readonly readCount: Scalars['Int']['output'];
  readonly totalCount: Scalars['Int']['output'];
  readonly unreadCount: Scalars['Int']['output'];
};

export type NotificationEdge = {
  readonly __typename: 'NotificationEdge';
  readonly cursor: Scalars['String']['output'];
  readonly node: NotificationNode;
};

/** Reason for failed request to send a notification. */
export enum NotificationError {
  DailyLimitReached = 'DAILY_LIMIT_REACHED',
  FailedToFetchLinkData = 'FAILED_TO_FETCH_LINK_DATA',
  NotificationAlreadyScheduled = 'NOTIFICATION_ALREADY_SCHEDULED',
  NotificationAlreadySent = 'NOTIFICATION_ALREADY_SENT',
  NotificationDoesNotExist = 'NOTIFICATION_DOES_NOT_EXIST',
  ScheduledNotificationAlreadyExists = 'SCHEDULED_NOTIFICATION_ALREADY_EXISTS',
  WeeklyLimitReached = 'WEEKLY_LIMIT_REACHED'
}

export enum NotificationMethod {
  Email = 'EMAIL',
  Phone = 'PHONE',
  Whatsapp = 'WHATSAPP'
}

export type NotificationMethodInput = {
  readonly accountUuid: Scalars['String']['input'];
  readonly method: Scalars['String']['input'];
};

export type NotificationModel = {
  readonly __typename: 'NotificationModel';
  readonly accountUuid: Scalars['String']['output'];
  readonly createdAt: Scalars['DateTime']['output'];
  readonly id: Scalars['String']['output'];
  readonly linkId: Scalars['Int']['output'];
  readonly notificationSent?: Maybe<Scalars['DateTime']['output']>;
  readonly recipientCount?: Maybe<Scalars['Int']['output']>;
  readonly scheduledAt?: Maybe<Scalars['DateTime']['output']>;
  readonly scheduledAtTimezone?: Maybe<Scalars['String']['output']>;
  readonly status: NotificationStatus;
  readonly updatedAt: Scalars['DateTime']['output'];
  readonly url: Scalars['String']['output'];
};

export type NotificationNode = {
  readonly __typename: 'NotificationNode';
  readonly body: Scalars['String']['output'];
  readonly category: NotificationCategory;
  readonly createdAt: Scalars['String']['output'];
  readonly deepLink?: Maybe<DeepLink>;
  readonly eventName: Scalars['String']['output'];
  readonly id: Scalars['ID']['output'];
  readonly imageGallery?: Maybe<ReadonlyArray<ImageGalleryItem>>;
  readonly imageUrl?: Maybe<Scalars['String']['output']>;
  readonly readAt?: Maybe<Scalars['String']['output']>;
  readonly status: Scalars['String']['output'];
  readonly title: Scalars['String']['output'];
  readonly type: Scalars['String']['output'];
};

export type NotificationSettingsModel = {
  readonly __typename: 'NotificationSettingsModel';
  readonly enabled: Scalars['Boolean']['output'];
};

/** Status of the notification. */
export enum NotificationStatus {
  Failed = 'FAILED',
  Pending = 'PENDING',
  Processed = 'PROCESSED',
  Scheduled = 'SCHEDULED',
  Skipped = 'SKIPPED',
  Success = 'SUCCESS'
}

export type NotificationsModel = {
  readonly __typename: 'NotificationsModel';
  readonly links: ReadonlyArray<NotificationModel>;
};

export enum OgImageBackgroundType {
  Color = 'COLOR'
}

export enum OnboardingStateType {
  Complete = 'complete',
  Incomplete = 'incomplete'
}

export type OperationResult = {
  readonly __typename: 'OperationResult';
  readonly message?: Maybe<Scalars['String']['output']>;
  readonly status: Scalars['String']['output'];
};

export enum Order {
  Asc = 'ASC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  Desc = 'DESC',
  ProcessedAtAsc = 'PROCESSED_AT_ASC',
  ProcessedAtDesc = 'PROCESSED_AT_DESC',
  ValueAsc = 'VALUE_ASC',
  ValueDesc = 'VALUE_DESC'
}

export type OverrideArguments = {
  readonly bgColor?: InputMaybe<Scalars['String']['input']>;
  readonly fontColor?: InputMaybe<Scalars['String']['input']>;
  readonly fontStyle?: InputMaybe<Scalars['String']['input']>;
};

export type PageInfo = {
  readonly __typename: 'PageInfo';
  readonly endCursor?: Maybe<Scalars['String']['output']>;
  readonly hasNextPage: Scalars['Boolean']['output'];
  readonly hasPreviousPage: Scalars['Boolean']['output'];
  readonly startCursor?: Maybe<Scalars['String']['output']>;
};

export type PageMeta = {
  readonly __typename: 'PageMeta';
  readonly description?: Maybe<Scalars['String']['output']>;
  readonly title?: Maybe<Scalars['String']['output']>;
};

export type PaginationResult = {
  readonly __typename: 'PaginationResult';
  readonly currentPage: Scalars['Int']['output'];
  readonly hasNextPage: Scalars['Boolean']['output'];
  readonly hasPreviousPage: Scalars['Boolean']['output'];
  readonly totalCount: Scalars['Int']['output'];
  readonly totalPages: Scalars['Int']['output'];
};

export type PartnerIntegration = ServiceIntegration & {
  readonly __typename: 'PartnerIntegration';
  readonly externalIntegrationId?: Maybe<Scalars['String']['output']>;
  readonly icon?: Maybe<Scalars['String']['output']>;
  readonly id: Scalars['String']['output'];
  readonly messages: ReadonlyArray<Maybe<Message>>;
  readonly status: ServiceIntegrationStatus;
  readonly title?: Maybe<Scalars['String']['output']>;
  readonly type: ServiceIntegrationType;
  readonly vendorIntegrationId?: Maybe<Scalars['String']['output']>;
  readonly vendorIntegrationTitle?: Maybe<Scalars['String']['output']>;
};

export type PasscodeGateRule = {
  readonly __typename: 'PasscodeGateRule';
  readonly code?: Maybe<Scalars['String']['output']>;
  readonly message?: Maybe<Scalars['String']['output']>;
};

export type PasscodeGateRuleInput = {
  readonly code?: InputMaybe<Scalars['String']['input']>;
  readonly message?: InputMaybe<Scalars['String']['input']>;
};

export type PasscodeInput = {
  readonly code?: InputMaybe<Scalars['String']['input']>;
  readonly linkId?: InputMaybe<Scalars['String']['input']>;
};

export type PasswordGateRule = {
  readonly __typename: 'PasswordGateRule';
  readonly message?: Maybe<Scalars['String']['output']>;
  readonly password?: Maybe<Scalars['String']['output']>;
};

export type PasswordGateRuleInput = {
  readonly message?: InputMaybe<Scalars['String']['input']>;
  readonly password?: InputMaybe<Scalars['String']['input']>;
};

export type PasswordInput = {
  readonly linkId?: InputMaybe<Scalars['String']['input']>;
  readonly password?: InputMaybe<Scalars['String']['input']>;
};

export type PastPaymentsForChargehound = {
  readonly __typename: 'PastPaymentsForChargehound';
  readonly amount: Scalars['Int']['output'];
  readonly chargedAt: Scalars['String']['output'];
  readonly currency: Scalars['String']['output'];
  readonly id: Scalars['String']['output'];
};

export type PauseNotificationsInput = {
  readonly email: Scalars['String']['input'];
  readonly notificationsPaused: Scalars['Boolean']['input'];
};

export type PayloadContext = {
  readonly browserId?: InputMaybe<Scalars['String']['input']>;
  readonly channel?: InputMaybe<Scalars['String']['input']>;
  readonly countryCode?: InputMaybe<Scalars['String']['input']>;
  readonly device?: InputMaybe<Scalars['String']['input']>;
  readonly language?: InputMaybe<Scalars['String']['input']>;
  readonly referrer?: InputMaybe<Scalars['String']['input']>;
  readonly url?: InputMaybe<Scalars['String']['input']>;
  readonly userAgent?: InputMaybe<Scalars['String']['input']>;
};

export type Payment = {
  readonly __typename: 'Payment';
  readonly currency: Scalars['String']['output'];
  readonly revenueGross: Scalars['Int']['output'];
  readonly revenueNet: Scalars['Int']['output'];
  readonly transactions: Scalars['Int']['output'];
};

export type PaymentDetailsInput = {
  readonly cardId?: InputMaybe<Scalars['String']['input']>;
  readonly couponId?: InputMaybe<Scalars['String']['input']>;
  readonly paymentSource?: InputMaybe<Scalars['String']['input']>;
  readonly stripeGateway?: InputMaybe<Scalars['String']['input']>;
  readonly stripeIntentId?: InputMaybe<Scalars['String']['input']>;
  readonly token?: InputMaybe<Scalars['String']['input']>;
};

export type PaymentGateRule = {
  readonly __typename: 'PaymentGateRule';
  readonly amount?: Maybe<Scalars['Int']['output']>;
  readonly descriptionMessage?: Maybe<Scalars['String']['output']>;
  readonly helpCoverFees?: Maybe<Scalars['Boolean']['output']>;
  readonly isValid?: Maybe<Scalars['Boolean']['output']>;
  readonly serviceIntegration?: Maybe<ServiceIntegration>;
  readonly successMessage?: Maybe<Scalars['String']['output']>;
};

export type PaymentGateRuleInput = {
  readonly amount?: InputMaybe<Scalars['Int']['input']>;
  readonly descriptionMessage?: InputMaybe<Scalars['String']['input']>;
  readonly helpCoverFees?: InputMaybe<Scalars['Boolean']['input']>;
  readonly serviceIntegrationId?: InputMaybe<Scalars['String']['input']>;
  readonly successMessage?: InputMaybe<Scalars['String']['input']>;
};

export enum PaymentProcessor {
  Stripe = 'Stripe'
}

export enum PaymentSourceType {
  ApplePay = 'applePay',
  Card = 'card',
  GooglePay = 'googlePay',
  None = 'none',
  Paypal = 'paypal',
  Pix = 'pix'
}

export type PaymentsByAccountDaily = {
  readonly __typename: 'PaymentsByAccountDaily';
  readonly clickCount?: Maybe<Scalars['Int']['output']>;
  readonly conversionRate?: Maybe<Scalars['Float']['output']>;
  readonly date?: Maybe<Scalars['String']['output']>;
  readonly revenueGross?: Maybe<Scalars['Float']['output']>;
  readonly revenueNet?: Maybe<Scalars['Float']['output']>;
  readonly transactions?: Maybe<Scalars['Int']['output']>;
};

export type PaymentsByLinkDaily = {
  readonly __typename: 'PaymentsByLinkDaily';
  readonly clickCount: Scalars['Int']['output'];
  readonly conversionRate: Scalars['Float']['output'];
  readonly date: Scalars['String']['output'];
  readonly revenueGross: Scalars['Float']['output'];
  readonly revenueNet: Scalars['Float']['output'];
  readonly transactions: Scalars['Int']['output'];
};

export type PaymentsByLinkTotals = {
  readonly __typename: 'PaymentsByLinkTotals';
  readonly clickCount: Scalars['Int']['output'];
  readonly conversionRate: Scalars['Float']['output'];
  readonly revenueGross: Scalars['Float']['output'];
  readonly revenueNet: Scalars['Float']['output'];
  readonly transactions: Scalars['Int']['output'];
};

export type Payout = {
  readonly __typename: 'Payout';
  readonly amount: Scalars['Float']['output'];
  readonly created: Scalars['DateTime']['output'];
  readonly currency: Scalars['String']['output'];
  readonly description: Scalars['String']['output'];
  readonly id: Scalars['String']['output'];
  readonly processor: Scalars['String']['output'];
  readonly status: Scalars['String']['output'];
};

export enum PayoutFrequency {
  Daily = 'DAILY',
  Fortnightly = 'FORTNIGHTLY',
  Monthly = 'MONTHLY',
  Weekly = 'WEEKLY'
}

export type PaypalIntegration = ServiceIntegration & {
  readonly __typename: 'PaypalIntegration';
  readonly accountStatus?: Maybe<Scalars['String']['output']>;
  readonly currencyCode?: Maybe<CurrencyCode>;
  readonly id: Scalars['String']['output'];
  readonly merchantId?: Maybe<Scalars['String']['output']>;
  readonly messages: ReadonlyArray<Maybe<Message>>;
  readonly paypalIntegrationId?: Maybe<Scalars['String']['output']>;
  readonly status: ServiceIntegrationStatus;
  readonly title?: Maybe<Scalars['String']['output']>;
  readonly type: ServiceIntegrationType;
};

export type PendingWalletConnection = BaseWalletConnection & {
  readonly __typename: 'PendingWalletConnection';
  readonly accountId: Scalars['String']['output'];
  readonly countryCode?: Maybe<Scalars['String']['output']>;
  readonly currency: Scalars['String']['output'];
  readonly dashboardUrl?: Maybe<Scalars['String']['output']>;
  readonly expiresAt: Scalars['Float']['output'];
  readonly onboardingUrl: Scalars['String']['output'];
  readonly program: Scalars['String']['output'];
  readonly provider: Scalars['String']['output'];
  readonly status: Scalars['String']['output'];
  readonly updatedAt: Scalars['Float']['output'];
};

export type PinterestLinkContext = {
  readonly __typename: 'PinterestLinkContext';
  readonly embedOption?: Maybe<LinkEmbedOptions>;
};

export type PinterestLinkContextInput = {
  readonly embedOption?: InputMaybe<LinkEmbedOptions>;
};

export type Plan = {
  readonly __typename: 'Plan';
  readonly currency?: Maybe<Scalars['String']['output']>;
  readonly frequency?: Maybe<Scalars['String']['output']>;
  readonly id?: Maybe<Scalars['String']['output']>;
  readonly price?: Maybe<Scalars['Int']['output']>;
  readonly tier?: Maybe<Scalars['String']['output']>;
};

export type PlanSubscription = {
  readonly __typename: 'PlanSubscription';
  readonly coupon?: Maybe<Coupon>;
  readonly couponId?: Maybe<Scalars['String']['output']>;
  readonly hasScheduledChanges: Scalars['Boolean']['output'];
  readonly id: Scalars['Int']['output'];
  readonly isActive: Scalars['Boolean']['output'];
  readonly isNonRenewing: Scalars['Boolean']['output'];
  readonly isPaused: Scalars['Boolean']['output'];
  readonly isPausing: Scalars['Boolean']['output'];
  readonly isPro: Scalars['Boolean']['output'];
  readonly pauseEnd?: Maybe<Scalars['Date']['output']>;
  readonly pauseStart?: Maybe<Scalars['Date']['output']>;
  readonly paymentMethod: Scalars['String']['output'];
  readonly periodEnd?: Maybe<Scalars['Date']['output']>;
  readonly periodStart?: Maybe<Scalars['Date']['output']>;
  readonly plan?: Maybe<Scalars['String']['output']>;
  readonly platform?: Maybe<SubscriptionPlatform>;
};

export type PodcastLinkContext = {
  readonly __typename: 'PodcastLinkContext';
  readonly embedOption?: Maybe<LinkEmbedOptions>;
  readonly options: ReadonlyArray<PodcastLinkOption>;
  readonly useLatestEpisode: Scalars['Boolean']['output'];
};


export type PodcastLinkContextOptionsArgs = {
  evaluateGate?: InputMaybe<Scalars['Boolean']['input']>;
  includeHidden?: InputMaybe<Scalars['Boolean']['input']>;
};

export type PodcastLinkContextInput = {
  readonly embedOption?: InputMaybe<LinkEmbedOptions>;
  readonly options?: InputMaybe<ReadonlyArray<PodcastLinkOptionInput>>;
  readonly useLatestEpisode?: InputMaybe<Scalars['Boolean']['input']>;
};

export type PodcastLinkOption = {
  readonly __typename: 'PodcastLinkOption';
  readonly type: Scalars['String']['output'];
  readonly url?: Maybe<Scalars['String']['output']>;
  readonly visible: Scalars['Boolean']['output'];
};

export type PodcastLinkOptionInput = {
  readonly type: Scalars['String']['input'];
  readonly url?: InputMaybe<Scalars['String']['input']>;
  readonly visible: Scalars['Boolean']['input'];
};

export type PreSaveLinkContext = {
  readonly __typename: 'PreSaveLinkContext';
  readonly alertSubscribers?: Maybe<Scalars['Boolean']['output']>;
  readonly artist?: Maybe<Scalars['String']['output']>;
  readonly confirmationMessage?: Maybe<Scalars['String']['output']>;
  readonly description?: Maybe<Scalars['String']['output']>;
  readonly isAppleMusicEnabled?: Maybe<Scalars['Boolean']['output']>;
  readonly isSpotifyEnabled?: Maybe<Scalars['Boolean']['output']>;
  readonly options: ReadonlyArray<PreSaveLinkOption>;
  readonly releaseDateTime?: Maybe<Scalars['String']['output']>;
  readonly releaseDateTimeZone?: Maybe<Scalars['String']['output']>;
  readonly songTitle?: Maybe<Scalars['String']['output']>;
  readonly uniqueId?: Maybe<Scalars['String']['output']>;
  readonly userUploadedCoverArt?: Maybe<Scalars['String']['output']>;
};

export type PreSaveLinkContextInput = {
  readonly alertSubscribers?: InputMaybe<Scalars['Boolean']['input']>;
  readonly artist?: InputMaybe<Scalars['String']['input']>;
  readonly confirmationMessage?: InputMaybe<Scalars['String']['input']>;
  readonly description?: InputMaybe<Scalars['String']['input']>;
  readonly isAppleMusicEnabled?: InputMaybe<Scalars['Boolean']['input']>;
  readonly isSpotifyEnabled?: InputMaybe<Scalars['Boolean']['input']>;
  readonly options?: InputMaybe<ReadonlyArray<PreSaveLinkOptionInput>>;
  readonly releaseDateTime?: InputMaybe<Scalars['String']['input']>;
  readonly releaseDateTimeZone?: InputMaybe<Scalars['String']['input']>;
  readonly songTitle?: InputMaybe<Scalars['String']['input']>;
  readonly uniqueId?: InputMaybe<Scalars['String']['input']>;
  readonly userUploadedCoverArt?: InputMaybe<Scalars['String']['input']>;
};

export type PreSaveLinkOption = {
  readonly __typename: 'PreSaveLinkOption';
  readonly type: Scalars['String']['output'];
  readonly visible: Scalars['Boolean']['output'];
};

export type PreSaveLinkOptionInput = {
  readonly type: Scalars['String']['input'];
  readonly visible: Scalars['Boolean']['input'];
};

export enum ProcessedCustomVideoType {
  AccountBackgroundImage = 'ACCOUNT_BACKGROUND_IMAGE',
  AccountCustomAvatar = 'ACCOUNT_CUSTOM_AVATAR',
  AccountCustomAvatarVideo = 'ACCOUNT_CUSTOM_AVATAR_VIDEO',
  Avatar = 'AVATAR',
  Background = 'BACKGROUND',
  LinkThumbnail = 'LINK_THUMBNAIL'
}

export type Product = {
  readonly __typename: 'Product';
  readonly cartDeepLinkUrl?: Maybe<Scalars['String']['output']>;
  readonly currencyCode?: Maybe<CurrencyCode>;
  readonly cursor?: Maybe<Scalars['String']['output']>;
  readonly description?: Maybe<Scalars['String']['output']>;
  readonly id?: Maybe<Scalars['String']['output']>;
  /** @deprecated Use `imageUrl` instead */
  readonly image?: Maybe<Image>;
  readonly imageUrl?: Maybe<Scalars['String']['output']>;
  readonly message?: Maybe<Scalars['String']['output']>;
  readonly options?: Maybe<ReadonlyArray<Maybe<ProductOption>>>;
  readonly price?: Maybe<Scalars['Float']['output']>;
  readonly promotionalBanner?: Maybe<ProductPromotionalBannerOptions>;
  readonly salePrice?: Maybe<Scalars['Float']['output']>;
  readonly shopName?: Maybe<Scalars['String']['output']>;
  readonly shopUrl?: Maybe<Scalars['String']['output']>;
  readonly title?: Maybe<Scalars['String']['output']>;
  readonly url?: Maybe<Scalars['String']['output']>;
  readonly variants?: Maybe<ReadonlyArray<Maybe<ProductVariant>>>;
};

export type ProductAnalytics = {
  readonly __typename: 'ProductAnalytics';
  readonly insights?: Maybe<ProductInsights>;
  readonly productId?: Maybe<Scalars['String']['output']>;
};

export type ProductCollection = {
  readonly __typename: 'ProductCollection';
  readonly cursor?: Maybe<Scalars['String']['output']>;
  readonly description?: Maybe<Scalars['String']['output']>;
  readonly id: Scalars['String']['output'];
  readonly image?: Maybe<Image>;
  readonly products: ReadonlyArray<Maybe<Product>>;
  readonly shopName?: Maybe<Scalars['String']['output']>;
  readonly shopUrl?: Maybe<Scalars['String']['output']>;
  readonly title: Scalars['String']['output'];
};

export type ProductCollectionsPage = {
  readonly __typename: 'ProductCollectionsPage';
  readonly hasNextPage: Scalars['Boolean']['output'];
  readonly items: ReadonlyArray<ProductCollection>;
};

export type ProductImageResult = {
  readonly __typename: 'ProductImageResult';
  /** The product image URL */
  readonly imageUrl?: Maybe<Scalars['String']['output']>;
  /** The type of link (DIGITAL_DOWNLOAD, COACHING, etc.) */
  readonly linkType?: Maybe<Scalars['String']['output']>;
};

export type ProductInput = {
  readonly currencyCode?: InputMaybe<Scalars['String']['input']>;
  readonly description?: InputMaybe<Scalars['String']['input']>;
  readonly id?: InputMaybe<Scalars['String']['input']>;
  readonly imageUrl?: InputMaybe<Scalars['String']['input']>;
  readonly price?: InputMaybe<Scalars['Float']['input']>;
  readonly promotionalBanner?: InputMaybe<ProductPromotionalBannerOptions>;
  readonly salePrice?: InputMaybe<Scalars['Float']['input']>;
  readonly title?: InputMaybe<Scalars['String']['input']>;
  readonly url?: InputMaybe<Scalars['String']['input']>;
};

export type ProductInsights = {
  readonly __typename: 'ProductInsights';
  readonly clicks: ProductInsightsClicks;
  readonly views: ProductInsightsViews;
};

export type ProductInsightsClicks = {
  readonly __typename: 'ProductInsightsClicks';
  /** Total number of clicks for the current range */
  readonly total: Scalars['Int']['output'];
};

export type ProductInsightsViews = {
  readonly __typename: 'ProductInsightsViews';
  /** Total number of storefront views for the current range */
  readonly total: Scalars['Int']['output'];
};

export type ProductLinkContext = {
  readonly __typename: 'ProductLinkContext';
  readonly collection?: Maybe<ProductCollection>;
  readonly collectionId?: Maybe<Scalars['String']['output']>;
  readonly description?: Maybe<Scalars['String']['output']>;
  readonly descriptionMessage?: Maybe<Scalars['String']['output']>;
  readonly embedOption?: Maybe<LinkEmbedOptions>;
  readonly paymentServiceIntegration?: Maybe<ServiceIntegration>;
  readonly productIds: ReadonlyArray<Maybe<Scalars['String']['output']>>;
  readonly products?: Maybe<ReadonlyArray<Maybe<Product>>>;
  readonly providerServiceIntegration?: Maybe<ServiceIntegration>;
};

export type ProductLinkContextInput = {
  readonly collectionId?: InputMaybe<Scalars['String']['input']>;
  readonly descriptionMessage?: InputMaybe<Scalars['String']['input']>;
  readonly embedOption?: InputMaybe<LinkEmbedOptions>;
  readonly paymentServiceIntegrationId?: InputMaybe<Scalars['String']['input']>;
  readonly productIds?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']['input']>>>;
  readonly products?: InputMaybe<ReadonlyArray<InputMaybe<ProductInput>>>;
  readonly providerServiceIntegrationId?: InputMaybe<Scalars['String']['input']>;
};

export type ProductListing = {
  readonly __typename: 'ProductListing';
  /** The product image URL */
  readonly imageUrl?: Maybe<Scalars['String']['output']>;
  /** The product listing ID */
  readonly listingId?: Maybe<Scalars['String']['output']>;
  /** The product ID from payment service */
  readonly productId?: Maybe<Scalars['String']['output']>;
  /** The product title */
  readonly title?: Maybe<Scalars['String']['output']>;
};

export type ProductOption = {
  readonly __typename: 'ProductOption';
  readonly name: Scalars['String']['output'];
  readonly values: ReadonlyArray<Scalars['String']['output']>;
};

export type ProductPageDetectionInput = {
  readonly accountUuid: Scalars['String']['input'];
  /** The pruned HTML string to use for product page detection */
  readonly prunedHtmlString: Scalars['String']['input'];
  readonly url: Scalars['String']['input'];
};

export type ProductPageDetectionResult = {
  readonly __typename: 'ProductPageDetectionResult';
  readonly isProductPage: Scalars['Boolean']['output'];
};

export type ProductPageDetectionTargets = {
  readonly __typename: 'ProductPageDetectionTargets';
  /** The HTML targets for product page detection */
  readonly htmlTargets: ReadonlyArray<Scalars['String']['output']>;
  /** Whether to include product linked data for detection */
  readonly includeProductLdData: Scalars['Boolean']['output'];
};

export type ProductPageDetectionTargetsInput = {
  readonly accountUuid: Scalars['String']['input'];
  readonly url: Scalars['String']['input'];
};

export enum ProductPromotionalBannerOptions {
  New = 'NEW',
  None = 'NONE',
  Sale = 'SALE'
}

export type ProductVariant = {
  readonly __typename: 'ProductVariant';
  readonly availableForSale: Scalars['Boolean']['output'];
  readonly cartDeepLinkUrl?: Maybe<Scalars['String']['output']>;
  readonly id: Scalars['String']['output'];
  readonly imageUrl?: Maybe<Scalars['String']['output']>;
  readonly price: Scalars['Float']['output'];
  readonly selectedOptions?: Maybe<ReadonlyArray<Maybe<ProductVariantSelectedOption>>>;
  readonly title: Scalars['String']['output'];
};

export type ProductVariantSelectedOption = {
  readonly __typename: 'ProductVariantSelectedOption';
  readonly name: Scalars['String']['output'];
  readonly value?: Maybe<Scalars['String']['output']>;
};

export type ProductsPage = {
  readonly __typename: 'ProductsPage';
  readonly hasNextPage: Scalars['Boolean']['output'];
  readonly items: ReadonlyArray<Product>;
};

export enum ProfileBadges {
  VerificationTick = 'VERIFICATION_TICK',
  VerifiedAndNotableTick = 'VERIFIED_AND_NOTABLE_TICK'
}

export type Query = {
  readonly __typename: 'Query';
  /** To be used via retool to get the rewards program points event logs for a given account */
  readonly CommerceAccountRewardsPointsEventLog: CommerceAccountRewardsPointsEventConnection;
  readonly accountFromIntegration?: Maybe<Account>;
  readonly accountFromUsername?: Maybe<Account>;
  readonly accountFromUuid?: Maybe<Account>;
  readonly accountSettings?: Maybe<AccountSettings>;
  readonly accountsFromUsername?: Maybe<ReadonlyArray<Maybe<Account>>>;
  readonly accountsFromUuids?: Maybe<ReadonlyArray<Account>>;
  readonly allQuestions: ReadonlyArray<Question>;
  readonly analyticsAlive?: Maybe<Scalars['Boolean']['output']>;
  readonly appearanceOptions?: Maybe<AppearanceOptions>;
  readonly appearanceSettings?: Maybe<AppearanceSettings>;
  readonly assistantFollowUpQuestions: ReadonlyArray<Scalars['String']['output']>;
  readonly assistantLastMessage?: Maybe<AssistantResponse>;
  readonly assistantPollResponse?: Maybe<AssistantResponse>;
  readonly calculateCoupon: GetCouponQueryResponse;
  readonly chatAlive: Scalars['Boolean']['output'];
  readonly chatLinktreeIndexStatus: ChatIndexingReport;
  readonly checkAccountNotificationLimits: CheckAccountNotificationLimitsResultModel;
  readonly checkFacebookPixelId: FacebookPixel;
  readonly checkSocialNotificationConfigCoTrigger: CheckSocialNotificationCoTriggerOutput;
  readonly checkSocialNotificationConfigPostNextAliveAllowed: CheckSocialNotificationConfigPostNextAliveAllowedOutput;
  readonly commerceAccountRewards: CommerceAccountRewards;
  readonly commerceBrandProfile: CommerceBrandProfile;
  readonly commerceCatalogLayout: CommerceCatalogLayout;
  readonly commerceCatalogProducts: CommerceStoreProductConnection;
  /** Returns a list of message templates chat. */
  readonly commerceChatMessageTemplates: ReadonlyArray<MessageTemplate>;
  /** Returns a Sendbird session token for a given user. Error if user is not found. A user is only created when a chat channel involving the user is created. */
  readonly commerceChatSessionToken?: Maybe<CommerceChatSessionToken>;
  /** Returns a Sendbird session token for a given vendor. Error if vendor is not found. A user is only created when a chat channel involving the vendor is created. */
  readonly commerceChatSessionTokenForVendor?: Maybe<CommerceChatSessionToken>;
  /** Given an account uuid, returns a list of vendors that are suggested to the user based on the products they have added to their account. */
  readonly commerceChatSuggestedVendors: ReadonlyArray<CommerceVendor>;
  readonly commerceCollectionTemplate: CommerceCollectionTemplate;
  readonly commerceCollectionTemplateGroup: CommerceCollectionTemplateGroup;
  readonly commerceCollectionTemplateGroups: CommerceCollectionTemplateGroupConnection;
  readonly commerceCollectionTemplates: CommerceCollectionTemplateConnection;
  /** A service-guarded endpoint which gets the onboarding-related state for a storefront. */
  readonly commerceConciergeStore: CommerceConciergeStore;
  /** This endpoint is for fetching Storefronts that are opted into the concierge process. */
  readonly commerceConciergeStores: CommerceConciergeStoreConnection;
  /** Detect if a web page is a product details page */
  readonly commerceDetectProductPage: ProductPageDetectionResult;
  readonly commerceLinkiqProfile: CommerceLinkiqProfile;
  readonly commercePollRewardsNotifications: RewardsNotificationPollResult;
  readonly commerceStoreProductsForAccount: CommerceStoreProductConnection;
  /** Get the targets for product details page detection. These should be used to prune the HTML page for more efficient product page detection. */
  readonly commerceTargetsForProductPageDetection: ProductPageDetectionTargets;
  /** Returns url overrides that should be served for a profile. I.e. auto-magical urls and non-auto-magical iff the enable auto affiliate setting is true. */
  readonly commerceUrlOverridesForProfile: ReadonlyArray<CommerceUrlOverride>;
  /** Returns a single vendor by slug, if it exists */
  readonly commerceVendor: CommerceVendor;
  readonly commerceVendorAffinities: UserAffinities;
  readonly commerceVendorSearch: CommerceVendorConnection;
  readonly commerceVendors: CommerceVendorConnection;
  /** @deprecated Use searchVendorsRetool or getVendorsByMarketplaceRetool instead */
  readonly commerceVendorsRetool: CommerceVendorRetoolConnection;
  readonly commerceVendorsWithMetadata: CommerceVendorsWithMetadata;
  readonly currentCountryCode: CountryCode;
  readonly currentUser?: Maybe<User>;
  readonly discoverAccountsFromUsernames?: Maybe<ReadonlyArray<DiscoverAccount>>;
  readonly discoverLinksFromIds?: Maybe<ReadonlyArray<DiscoverLink>>;
  readonly documents: ReadonlyArray<ChatDocument>;
  readonly findAccountsForWorkspace: WorkspaceProfilesPage;
  readonly followSourcesByAccount: FollowSourcesByAccountOutput;
  readonly followersAreEnabled?: Maybe<FollowerEnablementModel>;
  readonly followsByAccount: FollowsByAccountOutput;
  readonly followsByFollower: FollowsByFollowerOutput;
  readonly generateTitleSuggestions: LinkTitleSuggestionResponse;
  readonly getAILinkAppRecommendations: AiLinkAppRecommendationsResponse;
  readonly getAccountAnalytics?: Maybe<AccountAnalytics>;
  readonly getAccountEntitlements: GetAccountEntitlementsQueryResult;
  readonly getAccountStatsig?: Maybe<AccountStatsigResult>;
  readonly getAccountsAnalytics?: Maybe<AccountsAnalytics>;
  readonly getAccountsInvitableToWorkspace: GetAccountsInvitableToWorkspaceResult;
  readonly getActiveSponsoredOffers: ReadonlyArray<SponsoredOffer>;
  /** @deprecated use getLinkAnalytics instead */
  readonly getActivityByLink?: Maybe<LinkActivity>;
  readonly getAffiliateTokens?: Maybe<ReadonlyArray<AffiliateToken>>;
  readonly getAllCommerceStoreProductsForAccount: CommerceStoreRetoolProducts;
  readonly getAllSponsoredOffers: ReadonlyArray<SponsoredOffer>;
  readonly getAudienceManagerSubscriberTableSchema?: Maybe<GetAudienceManagerSubscriberTableSchemaOutput>;
  readonly getBaseThemes?: Maybe<ReadonlyArray<BaseTheme>>;
  readonly getBraintreeToken?: Maybe<GetBraintreeTokenResult>;
  readonly getCanAccessGoogleSheets?: Maybe<CanAccessGoogleSheets>;
  readonly getCanAccessGoogleYouTube?: Maybe<CanAccessGoogleYouTube>;
  readonly getCanvaAssetUploadJob: CanvaAssetUploadJobResult;
  readonly getCanvaDesignExportJob: CanvaDesignExportJobResult;
  /** @deprecated use getLinkAnalytics instead */
  readonly getClicksTrendByLink?: Maybe<LinkClicksTrend>;
  readonly getCollection: ProductCollection;
  readonly getCollectionAnalytics: CollectionAnalytics;
  readonly getCollections: ProductCollectionsPage;
  readonly getColorSchemaOptions?: Maybe<ReadonlyArray<Maybe<ColorSchemaOptions>>>;
  /** This endpoint is used to get the user earning boost for a banner. */
  readonly getCommerceBannerInfoUserEarningBoost: CommerceBannerInfoUserEarningBoost;
  /** This endpoint is used to get the banner user group for an account. */
  readonly getCommerceBannerUserGroups: CommerceBannerUserGroup;
  readonly getCommerceBatchAnalytics: CommerceBatchAnalyticsOutput;
  /** @deprecated Use commerceCatalogLayout instead */
  readonly getCommerceCatalogLayout: CommerceCatalogLayout;
  readonly getCommerceCatalogProducts: CatalogProductsList;
  readonly getCommerceCatalogProductsWithMetadata: CommerceCatalogProductsWithMetadata;
  readonly getCommerceCollection?: Maybe<CommerceCollection>;
  /** @deprecated Use getCommerceStoreItemsForAccount API instead */
  readonly getCommerceCollections: AccountCollections;
  /** @deprecated Use getCommerceStoreItemsForProfile API instead */
  readonly getCommerceCollectionsForProfile: AccountCollections;
  readonly getCommerceCommissionsByAccountUuid: GetCommerceCommissionsByAccountUuidResult;
  readonly getCommerceLinkFees?: Maybe<CommerceLinkFees>;
  /** This endpoint is used to get the monetization variation for a storefront */
  readonly getCommerceMonetizationVariation: CommerceMonetizationVariation;
  readonly getCommercePreviewForUser: CommerceCollectionPreview;
  readonly getCommercePreviewsForUser: CommercePreviews;
  readonly getCommerceProductRecommendations: CommerceRecommendationList;
  readonly getCommerceProductsForAccount: AccountProducts;
  readonly getCommerceStore?: Maybe<CommerceStore>;
  readonly getCommerceStoreAccessForCollection: CommerceStoreAccess;
  readonly getCommerceStoreAccessForProduct: CommerceStoreAccess;
  readonly getCommerceStoreForProfile?: Maybe<CommerceStoreForProfile>;
  readonly getCommerceStoreItemsForAccount?: Maybe<CommerceStorefrontItems>;
  readonly getCommerceStoreItemsForProfile?: Maybe<CommerceStorefrontItems>;
  readonly getCommerceStoreProduct?: Maybe<CommerceStoreProduct>;
  /** Given a url, returns different types of product matches against the url. Eg exact match, similar, custom. Please see the object type for more details. */
  readonly getCommerceStoreProductAndSimilarProductsDetails: CommerceSimilarStoreProducts;
  readonly getCommerceStoreProductDetails: CommerceStoreProduct;
  readonly getCommerceStoreProductsForAccount: CommerceStoreProducts;
  readonly getCommerceStoreProductsForProfile: CommerceStoreProducts;
  readonly getCommerceStorefrontPost?: Maybe<CommerceStorefrontPost>;
  readonly getCommerceTrendingProducts: CommerceRecommendationList;
  readonly getCommerceUserAffinitiesCatalog: CatalogProductsList;
  readonly getCommerceVendors: CommerceVendorConnection;
  readonly getCommerceVendorsByMarketplaceRetool: CommerceVendorRetoolConnection;
  readonly getCommerceWallet: Wallet;
  /** Retrieves a single wallet connection for an account based on the provided country and program. Returns null if no connection exists. */
  readonly getCommerceWalletConnection?: Maybe<WalletConnection>;
  /** Retrieves all wallet connections associated with an account. Returns an empty array if no connections exist. */
  readonly getCommerceWalletConnections?: Maybe<ReadonlyArray<WalletConnection>>;
  /** This endpoint is used to get the wallet enabled for an account. */
  readonly getCommerceWalletEnabled: CommerceWalletEnabled;
  readonly getCommerceWalletPayoutHistory: WalletPayoutHistory;
  readonly getCorrilyPrices: CorrilyPricesResponse;
  readonly getEarnAnalytics?: Maybe<EarnOverview>;
  /** @deprecated This method only returns the first follow. Use `followsByFollower` instead if you want to get all follows. */
  readonly getFollow: FollowModel;
  readonly getFollowSource: GetFollowSourceOutput;
  readonly getFollowUpQuestions: ReadonlyArray<FollowUpQuestion>;
  readonly getFollowerAssets: GetFollowerAssetsOutput;
  readonly getFollowerByEmail?: Maybe<FollowerModel>;
  readonly getFollowerNotificationSettings: FollowerNotificationSettingsModel;
  /** This method is to provide a summary of followers for a given account. It is intend to provide simple summary data based on the ground-truth real-time data, to power feature like "how many followers do I have right now?". It provides similar features to the Analytics service (which is more complicated and async events driven). If you just need a simple summary, and care about data accuracy and latency, you can use this API. If you need a more comprehensive analytics, such as breakdown by any dimensions or date range, you should use the Analytics service. */
  readonly getFollowers: FollowersSummaryModel;
  readonly getForm?: Maybe<GetFormOutput>;
  readonly getFormTemplates?: Maybe<GetFormTemplatesOutput>;
  readonly getFormsByAccount?: Maybe<GetFormsByAccountOutput>;
  /** Get all Google Calendar integrations for the current user */
  readonly getGoogleCalendarIntegrations?: Maybe<ReadonlyArray<Maybe<Integration>>>;
  readonly getGoogleYouTubeChannel?: Maybe<GetGoogleYouTubeChannelResult>;
  readonly getGoogleYouTubeMostPopular?: Maybe<YouTubeMostPopularResult>;
  /** @deprecated Deprecated: this query will be removed in a future release. */
  readonly getGoogleYouTubeMyLikedVideos?: Maybe<YouTubeMostPopularResult>;
  readonly getHomeLayout?: Maybe<HomeLayout>;
  readonly getIGDMSendsForPeriod: IgdmSendsForPeriodOutput;
  readonly getInsights?: Maybe<GetInsights>;
  readonly getInstagramBusinessAccountQuery?: Maybe<GetInstagramBusinessAccountResult>;
  readonly getInstagramBusinessSocialAnalytics: InstagramBusinessAnalytics;
  /** Get integration by id */
  readonly getIntegrationById?: Maybe<Integration>;
  readonly getIntegrations?: Maybe<ReadonlyArray<ServiceIntegration>>;
  /** Get all integrations with a specified service type for the current user */
  readonly getIntegrationsByServiceType?: Maybe<ReadonlyArray<Maybe<Integration>>>;
  readonly getLink?: Maybe<Link>;
  readonly getLinkAnalytics?: Maybe<LinkAnalytics>;
  readonly getLinkBatchAnalytics: ReadonlyArray<LinkBatchAnalytics>;
  readonly getLinkGatedContent?: Maybe<LinkGatedContentResult>;
  readonly getLinkTypes: LinkTypes;
  readonly getLinkiqAudienceCategories?: Maybe<LinkIqAudienceCategories>;
  readonly getLinks: LinksPage;
  readonly getMailChimpLists: ReadonlyArray<MailChimpList>;
  /** Fetches Mailchimp lists using a provided API key */
  readonly getMailchimpListsByApiKey: ReadonlyArray<MailChimpList>;
  readonly getMailingListIntegrations?: Maybe<ReadonlyArray<Integration>>;
  readonly getMfaAccessUrlQuery?: Maybe<GetMfaAccessUrlResult>;
  readonly getMfaEnrolmentUrlQuery?: Maybe<GetMfaEnrolmentUrlResult>;
  readonly getMonetizableProfileItems: ReadonlyArray<MonetizableItem>;
  readonly getNotificationCounts: NotificationCounts;
  readonly getNotifications: NotificationConnection;
  readonly getNotificationsForLinks: NotificationsModel;
  readonly getNotificationsSettings?: Maybe<NotificationSettingsModel>;
  /** @deprecated use getLinkAnalytics instead */
  readonly getPaymentsByLink?: Maybe<LinkPayments>;
  /** @deprecated use getLinkAnalytics instead */
  readonly getPaymentsTrendByLink?: Maybe<LinkPaymentsTrend>;
  readonly getPlans: ReadonlyArray<Plan>;
  readonly getPlansWithPrices: ReadonlyArray<GetPlansWithPricesResponse>;
  readonly getProductAnalytics: ProductAnalytics;
  readonly getProductCollections: ProductCollectionsPage;
  readonly getProductImageByListingId?: Maybe<ProductImageResult>;
  readonly getProductListingsByAccount: ReadonlyArray<ProductListing>;
  readonly getProducts: ProductsPage;
  readonly getSauceKey: Scalars['String']['output'];
  readonly getSelectedAccountOwner?: Maybe<SelectedAccountOwnerResult>;
  readonly getShortLinkChannelBreakdown?: Maybe<GetShortLinkChannelBreakdown>;
  readonly getShortLinkChannelSummaries?: Maybe<ShortLinkChannelSummaries>;
  readonly getShortLinkCityBreakdown?: Maybe<GetShortLinkCityBreakdown>;
  readonly getShortLinkCountryBreakdown?: Maybe<GetShortLinkCountryBreakdown>;
  readonly getShortLinkDeviceBreakdown?: Maybe<GetShortLinkDeviceBreakdown>;
  readonly getShortLinkReferrerBreakdown?: Maybe<GetShortLinkReferrerBreakdown>;
  readonly getShortLinkTrafficDaily?: Maybe<GetShortLinkTrafficDaily>;
  readonly getShortLinkTrafficHourly?: Maybe<GetShortLinkTraffic>;
  readonly getShortLinkTrafficLifetime?: Maybe<GetShortLinkTrafficLifetime>;
  readonly getSocialContentIndustries: SocialContentIndustryType;
  readonly getSocialContentToLinkAssociations?: Maybe<ReadonlyArray<Maybe<SocialContentToLinkAssociations>>>;
  readonly getSocialContentTones: ReadonlyArray<SocialContentToneType>;
  readonly getSocialFeedPostAnalytics: ReadonlyArray<SocialFeedPostAnalytics>;
  readonly getSocialNotificationAnalytics?: Maybe<SocialNotificationAnalytics>;
  readonly getSocialNotificationConfigByAccount: GetSocialNotificationConfigOutput;
  readonly getSocialNotificationConfigById: GetSocialNotificationConfigOutput;
  readonly getSocialNotificationConfigByLinkId: GetSocialNotificationConfigOutput;
  readonly getSponsoredOfferBySponsorshipId: SponsoredOffer;
  readonly getSponsoredOffersBySponsorshipIds: ReadonlyArray<SponsoredOffer>;
  readonly getSponsoredOffersWithMetadata: CommerceSponsoredOffersWithMetadata;
  readonly getSquareApplications?: Maybe<ReadonlyArray<Maybe<SquareApplication>>>;
  readonly getSquareLocations?: Maybe<ReadonlyArray<Maybe<SquareLocation>>>;
  readonly getStorefrontAnalytics: StorefrontAnalytics;
  readonly getStripeBalance?: Maybe<StripeBalance>;
  /** @deprecated use getLinkAnalytics instead */
  readonly getSubscribersByLink?: Maybe<LinkSubscribers>;
  readonly getSubscriptionAddOnCheckoutURL: GetSubscriptionAddOnCheckoutUrlResult;
  readonly getSubscriptionAddOnProducts: ReadonlyArray<SubscriptionAddOnProductResponse>;
  readonly getTikTokBusinessMetricsQuery?: Maybe<ReadonlyArray<Maybe<GetTikTokBusinessMetricsResult>>>;
  readonly getTikTokBusinessProfileQuery?: Maybe<GetTikTokBusinessProfileResult>;
  readonly getTikTokBusinessSocialAnalytics: TikTokBusinessAnalytics;
  readonly getTikTokBusinessVideosWithMetricsQuery?: Maybe<GetTikTokBusinessVideosWithMetricsResult>;
  readonly getTikTokProfile?: Maybe<GetTikTokProfileResult>;
  readonly getTikTokProfileLatest?: Maybe<GetTikTokProfileResult>;
  readonly getTikTokProfiles?: Maybe<ReadonlyArray<Maybe<GetTikTokProfilesResult>>>;
  readonly getTikTokVideosAll?: Maybe<GetTikTokVideosResult>;
  readonly getTikTokVideosById?: Maybe<GetTikTokVideosResult>;
  readonly getTotalBalanceByCurrency: ReadonlyArray<WalletTotalBalance>;
  readonly getUserEntitlements: GetUserEntitlementsQueryResult;
  readonly getUserFromCredentials?: Maybe<LoginUserResult>;
  readonly getUserStatusByUsername?: Maybe<UserStatus>;
  readonly getWalletStateV3: WalletStateV3;
  readonly getWorkspace?: Maybe<GetWorkspaceResult>;
  readonly getWorkspaceOverviewAnalytics: WorkspaceOverviewAnalytics;
  readonly getWorkspacesForCurrentUser: ReadonlyArray<WorkspaceUser>;
  readonly getYoutubeSocialAnalytics: YouTubeBusinessAnalytics;
  readonly globalBilling?: Maybe<GlobalBillingResult>;
  readonly indexingReport: ChatIndexingReport;
  readonly indexingStatus: Scalars['String']['output'];
  readonly isEligibleForAffiliateMonetizationFeatures: Scalars['Boolean']['output'];
  readonly isFollowingAccount: FollowingModel;
  readonly isWalletViewable: Scalars['Boolean']['output'];
  readonly isWalletViewableV3: IsWalletViewableV3;
  readonly listAccounts?: Maybe<ReadonlyArray<Maybe<Account>>>;
  readonly listLinks?: Maybe<ReadonlyArray<Maybe<Link>>>;
  readonly ltcommerceAlive: Scalars['Boolean']['output'];
  readonly ltcommerceRedisAlive: Scalars['Boolean']['output'];
  readonly ltfollowersAmAlive: Scalars['Boolean']['output'];
  readonly messagingFaqs?: Maybe<ReadonlyArray<Maybe<MessagingFaq>>>;
  readonly monolithAlive: Scalars['Boolean']['output'];
  readonly notificationsIsHealthy: Scalars['Boolean']['output'];
  readonly queryFormFields: QueryFormFieldsOutput;
  readonly question: Question;
  readonly questions: ReadonlyArray<Question>;
  readonly relevantChunks: ReadonlyArray<ChatEmbeddingQueryResult>;
  readonly searchCommerceVendorsRetool: CommerceVendorRetoolConnection;
  readonly searchSocialContentIndustries: SocialContentIndustryType;
  readonly searchSponsoredOffers: CommerceSponsoredOfferConnection;
  readonly socialLinks: ReadonlyArray<SocialLink>;
  readonly subscriptionEstimate: SubscriptionEstimateResponse;
  readonly user?: Maybe<User>;
  readonly userDetailsForChargehound?: Maybe<UserDetailsForChargehound>;
  readonly userFromEmail?: Maybe<UserFromEmailResult>;
  readonly userFromUsername?: Maybe<User>;
  readonly userFromUuid?: Maybe<User>;
  readonly users?: Maybe<ReadonlyArray<Maybe<Account>>>;
  readonly usersFromUuids?: Maybe<ReadonlyArray<User>>;
  /** Validates if a Google Sheet ID is accessible using the credentials from a specific integration */
  readonly validateGoogleSheetsId?: Maybe<ValidateGoogleSheetsIdResult>;
  readonly validateGoogleYouTube?: Maybe<ValidateGoogleYouTubeResult>;
  readonly validateLinksGate?: Maybe<ReadonlyArray<Maybe<Link>>>;
  readonly validatePaymentAmount: Scalars['Boolean']['output'];
  readonly version?: Maybe<Version>;
  readonly walletExperience: WalletExperience;
};


export type QueryCommerceAccountRewardsPointsEventLogArgs = {
  accountUuid: Scalars['String']['input'];
  after?: InputMaybe<Scalars['String']['input']>;
  end: Scalars['DateTime']['input'];
  first?: InputMaybe<Scalars['Int']['input']>;
  start: Scalars['DateTime']['input'];
};


export type QueryAccountFromIntegrationArgs = {
  serviceIntegrationId: Scalars['String']['input'];
};


export type QueryAccountFromUsernameArgs = {
  username: Scalars['String']['input'];
};


export type QueryAccountFromUuidArgs = {
  isDowngradedPreview?: InputMaybe<Scalars['Boolean']['input']>;
  isGlowUpPreview?: InputMaybe<Scalars['Boolean']['input']>;
  isProfilePreview?: InputMaybe<Scalars['Boolean']['input']>;
  uuid: Scalars['String']['input'];
};


export type QueryAccountSettingsArgs = {
  accountUuid: Scalars['String']['input'];
};


export type QueryAccountsFromUsernameArgs = {
  username: Scalars['String']['input'];
};


export type QueryAccountsFromUuidsArgs = {
  uuids: ReadonlyArray<Scalars['String']['input']>;
};


export type QueryAllQuestionsArgs = {
  useCase: Scalars['String']['input'];
};


export type QueryAssistantFollowUpQuestionsArgs = {
  conversationId: Scalars['String']['input'];
};


export type QueryAssistantLastMessageArgs = {
  conversationId: Scalars['String']['input'];
};


export type QueryAssistantPollResponseArgs = {
  conversationId: Scalars['String']['input'];
  responseId: Scalars['String']['input'];
};


export type QueryCalculateCouponArgs = {
  accountIds?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']['input']>>>;
  couponId: Scalars['String']['input'];
  currency: Scalars['String']['input'];
  frequency: Scalars['String']['input'];
  price?: InputMaybe<Scalars['Int']['input']>;
  tier: Scalars['String']['input'];
};


export type QueryChatLinktreeIndexStatusArgs = {
  accountUuid?: InputMaybe<Scalars['String']['input']>;
  ticketId?: InputMaybe<Scalars['String']['input']>;
};


export type QueryCheckAccountNotificationLimitsArgs = {
  accountDetails: CheckAccountNotificationLimitsInput;
};


export type QueryCheckFacebookPixelIdArgs = {
  pixelId: Scalars['String']['input'];
};


export type QueryCheckSocialNotificationConfigCoTriggerArgs = {
  input: CheckSocialNotificationCoTriggerInput;
};


export type QueryCheckSocialNotificationConfigPostNextAliveAllowedArgs = {
  input: CheckSocialNotificationConfigPostNextAliveAllowedInput;
};


export type QueryCommerceAccountRewardsArgs = {
  accountUuid: Scalars['String']['input'];
};


export type QueryCommerceBrandProfileArgs = {
  accountUuid: Scalars['String']['input'];
};


export type QueryCommerceCatalogLayoutArgs = {
  input: CommerceCatalogLayoutInput;
};


export type QueryCommerceCatalogProductsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  input: CatalogProductsInput;
};


export type QueryCommerceChatMessageTemplatesArgs = {
  accountUuid: Scalars['String']['input'];
  catalogId?: InputMaybe<Scalars['String']['input']>;
};


export type QueryCommerceChatSessionTokenArgs = {
  accountUuid: Scalars['String']['input'];
};


export type QueryCommerceChatSessionTokenForVendorArgs = {
  vendorSlug: Scalars['String']['input'];
};


export type QueryCommerceChatSuggestedVendorsArgs = {
  accountUuid: Scalars['String']['input'];
};


export type QueryCommerceCollectionTemplateArgs = {
  id: Scalars['String']['input'];
};


export type QueryCommerceCollectionTemplateGroupArgs = {
  id: Scalars['String']['input'];
};


export type QueryCommerceCollectionTemplateGroupsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
};


export type QueryCommerceCollectionTemplatesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
};


export type QueryCommerceConciergeStoreArgs = {
  accountUuid: Scalars['String']['input'];
};


export type QueryCommerceConciergeStoresArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  cohort?: InputMaybe<CommerceOnboardingCohort>;
  first?: InputMaybe<Scalars['Int']['input']>;
  includedShopStates?: InputMaybe<ReadonlyArray<CommerceConciergeShopState>>;
};


export type QueryCommerceDetectProductPageArgs = {
  input: ProductPageDetectionInput;
};


export type QueryCommerceLinkiqProfileArgs = {
  accountUuid: Scalars['String']['input'];
};


export type QueryCommercePollRewardsNotificationsArgs = {
  accountUuid: Scalars['String']['input'];
  timestamp?: InputMaybe<Scalars['DateTime']['input']>;
};


export type QueryCommerceStoreProductsForAccountArgs = {
  accountUuid: Scalars['String']['input'];
  after?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<StoreProductFilterInput>;
  first?: InputMaybe<Scalars['Int']['input']>;
};


export type QueryCommerceTargetsForProductPageDetectionArgs = {
  input: ProductPageDetectionTargetsInput;
};


export type QueryCommerceUrlOverridesForProfileArgs = {
  accountUuid: Scalars['String']['input'];
};


export type QueryCommerceVendorArgs = {
  vendorSlug: Scalars['String']['input'];
};


export type QueryCommerceVendorAffinitiesArgs = {
  accountUuid: Scalars['String']['input'];
};


export type QueryCommerceVendorSearchArgs = {
  accountUuid: Scalars['String']['input'];
  after?: InputMaybe<Scalars['String']['input']>;
  excludeNonFirstPartyVendors?: InputMaybe<Scalars['Boolean']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  ignoreSearchWeights?: InputMaybe<Scalars['Boolean']['input']>;
  orderBy?: InputMaybe<ReadonlyArray<CommerceVendorOrderByStatement>>;
  scrollToLetter?: InputMaybe<Scalars['String']['input']>;
  searchQuery: Scalars['String']['input'];
};


export type QueryCommerceVendorsArgs = {
  accountUuid: Scalars['String']['input'];
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  excludeNonFirstPartyVendors?: InputMaybe<Scalars['Boolean']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  ignoreSearchWeights?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<ReadonlyArray<CommerceVendorOrderByStatement>>;
  scrollToLetter?: InputMaybe<Scalars['String']['input']>;
};


export type QueryCommerceVendorsRetoolArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<ReadonlyArray<CommerceVendorOrderByStatement>>;
};


export type QueryCommerceVendorsWithMetadataArgs = {
  accountUuid: Scalars['String']['input'];
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  excludeNonFirstPartyVendors?: InputMaybe<Scalars['Boolean']['input']>;
  filterBy?: InputMaybe<ReadonlyArray<CommerceVendorFilterByStatement>>;
  first?: InputMaybe<Scalars['Int']['input']>;
  ignoreSearchWeights?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<ReadonlyArray<CommerceVendorOrderByStatement>>;
  scrollToLetter?: InputMaybe<Scalars['String']['input']>;
  searchBy?: InputMaybe<ReadonlyArray<CommerceVendorSearchByStatement>>;
};


export type QueryDiscoverAccountsFromUsernamesArgs = {
  usernames: ReadonlyArray<Scalars['String']['input']>;
};


export type QueryDiscoverLinksFromIdsArgs = {
  ids: ReadonlyArray<Scalars['Int']['input']>;
};


export type QueryDocumentsArgs = {
  accountUuid?: InputMaybe<Scalars['String']['input']>;
  profile?: InputMaybe<Scalars['String']['input']>;
  sourceType: Scalars['String']['input'];
};


export type QueryFindAccountsForWorkspaceArgs = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  searchTerm: Scalars['String']['input'];
  workspaceId: Scalars['Int']['input'];
};


export type QueryFollowSourcesByAccountArgs = {
  input: FollowSourcesByAccountInput;
};


export type QueryFollowersAreEnabledArgs = {
  account: FollowersAreEnabledInput;
};


export type QueryFollowsByAccountArgs = {
  input: FollowsByAccountInput;
};


export type QueryFollowsByFollowerArgs = {
  input: FollowsByFollowerInput;
};


export type QueryGenerateTitleSuggestionsArgs = {
  accountUuid: Scalars['String']['input'];
  input: LinkTitleSuggestionInput;
};


export type QueryGetAiLinkAppRecommendationsArgs = {
  accountUuid: Scalars['String']['input'];
};


export type QueryGetAccountAnalyticsArgs = {
  account?: InputMaybe<AccountAnalyticsInput>;
  allowMonetizedLinks?: InputMaybe<Scalars['Boolean']['input']>;
  benchmarkType?: InputMaybe<Scalars['String']['input']>;
  contentTypes?: InputMaybe<ReadonlyArray<ContentType>>;
  country?: InputMaybe<Scalars['String']['input']>;
  hasSubscribeFeatureAccess?: InputMaybe<Scalars['Boolean']['input']>;
  hasUniqueFeatureAccess?: InputMaybe<Scalars['Boolean']['input']>;
  includeBreakdown?: InputMaybe<Scalars['Boolean']['input']>;
  includeSocialClicks?: InputMaybe<Scalars['Boolean']['input']>;
  includeStorefront?: InputMaybe<Scalars['Boolean']['input']>;
  includeSubscribersTrend?: InputMaybe<Scalars['Boolean']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  limitCities?: InputMaybe<Scalars['Int']['input']>;
  range?: InputMaybe<Range>;
  referrer?: InputMaybe<Scalars['String']['input']>;
  shouldReturnDailyData?: InputMaybe<Scalars['Boolean']['input']>;
  timezone?: InputMaybe<Scalars['String']['input']>;
};


export type QueryGetAccountEntitlementsArgs = {
  getAccountEntitlementsQueryInput: GetAccountEntitlementsQueryInput;
};


export type QueryGetAccountStatsigArgs = {
  input: GetAccountStatsigQueryInput;
};


export type QueryGetAccountsAnalyticsArgs = {
  accountIds?: InputMaybe<ReadonlyArray<Scalars['Int']['input']>>;
  includeStorefront?: InputMaybe<Scalars['Boolean']['input']>;
  range?: InputMaybe<Range>;
};


export type QueryGetAccountsInvitableToWorkspaceArgs = {
  workspaceId: Scalars['String']['input'];
};


export type QueryGetActiveSponsoredOffersArgs = {
  accountUuid: Scalars['String']['input'];
  includeCurated?: InputMaybe<Scalars['Boolean']['input']>;
};


export type QueryGetActivityByLinkArgs = {
  endDate: Scalars['String']['input'];
  id: Scalars['Int']['input'];
  startDate: Scalars['String']['input'];
};


export type QueryGetAllCommerceStoreProductsForAccountArgs = {
  accountUuid: Scalars['String']['input'];
  filter?: InputMaybe<StoreProductFilterInput>;
  options?: InputMaybe<StoreProductOptionsInput>;
};


export type QueryGetAllSponsoredOffersArgs = {
  active: Scalars['Boolean']['input'];
};


export type QueryGetAudienceManagerSubscriberTableSchemaArgs = {
  input: GetAudienceManagerSubscriberTableSchemaInput;
};


export type QueryGetBaseThemesArgs = {
  input?: InputMaybe<GetBaseThemesQueryInput>;
};


export type QueryGetCanAccessGoogleSheetsArgs = {
  integrationId: Scalars['String']['input'];
};


export type QueryGetCanAccessGoogleYouTubeArgs = {
  integrationId: Scalars['String']['input'];
};


export type QueryGetCanvaAssetUploadJobArgs = {
  input: GetCanvaAssetUploadJobInput;
};


export type QueryGetCanvaDesignExportJobArgs = {
  input: GetCanvaDesignExportJobInput;
};


export type QueryGetClicksTrendByLinkArgs = {
  endDate?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
  startDate?: InputMaybe<Scalars['String']['input']>;
};


export type QueryGetCollectionArgs = {
  collectionId: Scalars['String']['input'];
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['String']['input']>;
  serviceIntegrationId: Scalars['String']['input'];
};


export type QueryGetCollectionAnalyticsArgs = {
  account: AccountAnalyticsInput;
  collectionId: Scalars['UUID']['input'];
  range?: InputMaybe<Range>;
  timezone: Scalars['String']['input'];
};


export type QueryGetCollectionsArgs = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['String']['input']>;
  serviceIntegrationId: Scalars['String']['input'];
  skipProducts?: InputMaybe<Scalars['Boolean']['input']>;
};


export type QueryGetCommerceBannerInfoUserEarningBoostArgs = {
  accountUuid: Scalars['String']['input'];
};


export type QueryGetCommerceBannerUserGroupsArgs = {
  accountUuid: Scalars['String']['input'];
};


export type QueryGetCommerceBatchAnalyticsArgs = {
  input: CommerceBatchAnalyticsInput;
  range?: InputMaybe<Range>;
  timezone: Scalars['String']['input'];
};


export type QueryGetCommerceCatalogLayoutArgs = {
  input: CommerceCatalogLayoutInput;
};


export type QueryGetCommerceCatalogProductsArgs = {
  input: CatalogProductsInput;
};


export type QueryGetCommerceCatalogProductsWithMetadataArgs = {
  accountUuid: Scalars['String']['input'];
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  filterBy?: InputMaybe<ReadonlyArray<CommerceStoreProductFilterByStatement>>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<ReadonlyArray<CommerceStoreProductOrderByStatement>>;
};


export type QueryGetCommerceCollectionArgs = {
  accountUuid: Scalars['String']['input'];
  collectionId: Scalars['String']['input'];
};


export type QueryGetCommerceCollectionsArgs = {
  accountUuid: Scalars['String']['input'];
};


export type QueryGetCommerceCollectionsForProfileArgs = {
  accountUuid: Scalars['String']['input'];
  requestSource?: InputMaybe<RequestSourceInput>;
};


export type QueryGetCommerceCommissionsByAccountUuidArgs = {
  accountUuid: Scalars['String']['input'];
  limit?: InputMaybe<Scalars['Int']['input']>;
  order?: InputMaybe<Order>;
  range?: InputMaybe<CommerceDateRange>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  statuses?: InputMaybe<ReadonlyArray<CommissionRecordStatus>>;
  types?: InputMaybe<ReadonlyArray<Scalars['String']['input']>>;
};


export type QueryGetCommerceLinkFeesArgs = {
  accountId?: InputMaybe<Scalars['Int']['input']>;
  provider: Scalars['String']['input'];
};


export type QueryGetCommerceMonetizationVariationArgs = {
  accountUuid: Scalars['String']['input'];
};


export type QueryGetCommercePreviewForUserArgs = {
  accountUuid: Scalars['String']['input'];
  previewId: Scalars['String']['input'];
};


export type QueryGetCommercePreviewsForUserArgs = {
  accountUuid: Scalars['String']['input'];
};


export type QueryGetCommerceProductRecommendationsArgs = {
  accountUuid: Scalars['String']['input'];
  numberOfRecs: Scalars['Float']['input'];
};


export type QueryGetCommerceProductsForAccountArgs = {
  accountUuid: Scalars['String']['input'];
};


export type QueryGetCommerceStoreArgs = {
  accountUuid: Scalars['String']['input'];
};


export type QueryGetCommerceStoreAccessForCollectionArgs = {
  accountUuid?: InputMaybe<Scalars['String']['input']>;
  collectionId: Scalars['String']['input'];
};


export type QueryGetCommerceStoreAccessForProductArgs = {
  accountUuid?: InputMaybe<Scalars['String']['input']>;
  productId: Scalars['String']['input'];
};


export type QueryGetCommerceStoreForProfileArgs = {
  accountUuid: Scalars['String']['input'];
};


export type QueryGetCommerceStoreItemsForAccountArgs = {
  accountUuid: Scalars['String']['input'];
};


export type QueryGetCommerceStoreItemsForProfileArgs = {
  accountUuid: Scalars['String']['input'];
  requestSource?: InputMaybe<RequestSourceInput>;
};


export type QueryGetCommerceStoreProductArgs = {
  accountUuid: Scalars['String']['input'];
  id: Scalars['String']['input'];
  shouldGenerateAffiliateUrl?: InputMaybe<Scalars['Boolean']['input']>;
};


export type QueryGetCommerceStoreProductAndSimilarProductsDetailsArgs = {
  accountUuid: Scalars['String']['input'];
  url: Scalars['String']['input'];
};


export type QueryGetCommerceStoreProductDetailsArgs = {
  accountUuid?: InputMaybe<Scalars['String']['input']>;
  url: Scalars['String']['input'];
};


export type QueryGetCommerceStoreProductsForAccountArgs = {
  accountUuid: Scalars['String']['input'];
  filter?: InputMaybe<StoreProductFilterInput>;
};


export type QueryGetCommerceStoreProductsForProfileArgs = {
  accountUuid: Scalars['String']['input'];
  requestSource?: InputMaybe<RequestSourceInput>;
};


export type QueryGetCommerceStorefrontPostArgs = {
  accountUuid: Scalars['String']['input'];
  postId: Scalars['String']['input'];
};


export type QueryGetCommerceTrendingProductsArgs = {
  accountUuid: Scalars['String']['input'];
};


export type QueryGetCommerceUserAffinitiesCatalogArgs = {
  accountUuid: Scalars['String']['input'];
};


export type QueryGetCommerceVendorsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<ReadonlyArray<CommerceVendorOrderByStatement>>;
  searchQuery: Scalars['String']['input'];
};


export type QueryGetCommerceVendorsByMarketplaceRetoolArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  marketplace: Scalars['String']['input'];
  orderBy?: InputMaybe<ReadonlyArray<CommerceVendorOrderByStatement>>;
};


export type QueryGetCommerceWalletArgs = {
  accountUuid: Scalars['String']['input'];
  country?: InputMaybe<Scalars['String']['input']>;
};


export type QueryGetCommerceWalletConnectionArgs = {
  accountUuid: Scalars['String']['input'];
  country?: InputMaybe<Scalars['String']['input']>;
  program?: InputMaybe<Scalars['String']['input']>;
};


export type QueryGetCommerceWalletConnectionsArgs = {
  accountUuid: Scalars['String']['input'];
};


export type QueryGetCommerceWalletEnabledArgs = {
  accountUuid: Scalars['String']['input'];
};


export type QueryGetCommerceWalletPayoutHistoryArgs = {
  accountUuid: Scalars['String']['input'];
  country?: InputMaybe<Scalars['String']['input']>;
};


export type QueryGetEarnAnalyticsArgs = {
  account: EarnAnalyticsAccountInput;
  range?: InputMaybe<Range>;
  timezone?: InputMaybe<Scalars['String']['input']>;
};


export type QueryGetFollowArgs = {
  follow: GetFollowInput;
};


export type QueryGetFollowSourceArgs = {
  input: GetFollowSourceInput;
};


export type QueryGetFollowUpQuestionsArgs = {
  accountUuid: Scalars['String']['input'];
  conversationId?: InputMaybe<Scalars['String']['input']>;
  questionId?: InputMaybe<Scalars['String']['input']>;
  useCase: Scalars['String']['input'];
};


export type QueryGetFollowerAssetsArgs = {
  input: GetFollowerAssetsInput;
};


export type QueryGetFollowerByEmailArgs = {
  input: GetFollowerByEmailInput;
};


export type QueryGetFollowerNotificationSettingsArgs = {
  follower?: InputMaybe<GetFollowerNotificationSettingsInput>;
};


export type QueryGetFollowersArgs = {
  account?: InputMaybe<AccountInput>;
};


export type QueryGetFormArgs = {
  input: GetFormInput;
};


export type QueryGetFormsByAccountArgs = {
  input: GetFormsByAccountInput;
};


export type QueryGetGoogleYouTubeChannelArgs = {
  integrationId: Scalars['String']['input'];
};


export type QueryGetGoogleYouTubeMostPopularArgs = {
  integrationId: Scalars['String']['input'];
  limit?: InputMaybe<Scalars['Int']['input']>;
  pageToken?: InputMaybe<Scalars['String']['input']>;
  regionCode?: InputMaybe<Scalars['String']['input']>;
  videoFilter?: InputMaybe<Scalars['String']['input']>;
};


export type QueryGetGoogleYouTubeMyLikedVideosArgs = {
  integrationId: Scalars['String']['input'];
  limit?: InputMaybe<Scalars['Int']['input']>;
  pageToken?: InputMaybe<Scalars['String']['input']>;
  videoFilter?: InputMaybe<Scalars['String']['input']>;
};


export type QueryGetIgdmSendsForPeriodArgs = {
  input: GetIgdmSendsForPeriodInput;
};


export type QueryGetInsightsArgs = {
  accountUuid: Scalars['String']['input'];
  alwaysRegenerate?: InputMaybe<Scalars['Boolean']['input']>;
  languageCode?: InputMaybe<Scalars['String']['input']>;
};


export type QueryGetInstagramBusinessAccountQueryArgs = {
  facebookIntegrationId: Scalars['String']['input'];
  instagramBusinessAccountId: Scalars['String']['input'];
};


export type QueryGetInstagramBusinessSocialAnalyticsArgs = {
  input: InstagramBusinessAnalyticsInput;
};


export type QueryGetIntegrationByIdArgs = {
  id: Scalars['String']['input'];
  refresh?: InputMaybe<Scalars['Boolean']['input']>;
};


export type QueryGetIntegrationsArgs = {
  filter?: InputMaybe<ServiceIntegrationsFilterInput>;
};


export type QueryGetIntegrationsByServiceTypeArgs = {
  service: Scalars['String']['input'];
};


export type QueryGetLinkArgs = {
  id: Scalars['Int']['input'];
};


export type QueryGetLinkAnalyticsArgs = {
  account?: InputMaybe<AccountAnalyticsInput>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  linkId?: InputMaybe<Scalars['Int']['input']>;
  range?: InputMaybe<Range>;
  timezone?: InputMaybe<Scalars['String']['input']>;
};


export type QueryGetLinkBatchAnalyticsArgs = {
  input: LinkBatchAnalyticsInput;
  range?: InputMaybe<Range>;
  timezone: Scalars['String']['input'];
};


export type QueryGetLinkGatedContentArgs = {
  id: Scalars['String']['input'];
};


export type QueryGetLinkTypesArgs = {
  uuid?: InputMaybe<Scalars['String']['input']>;
  vertical?: InputMaybe<Scalars['String']['input']>;
  withRecommended?: InputMaybe<Scalars['Boolean']['input']>;
};


export type QueryGetLinkiqAudienceCategoriesArgs = {
  account?: InputMaybe<AccountAnalyticsInput>;
};


export type QueryGetLinksArgs = {
  accountUuid?: InputMaybe<Scalars['String']['input']>;
  excludeLayoutOptions?: InputMaybe<ReadonlyArray<InputMaybe<VisualLinkPreviewLayoutOption>>>;
  hasAnimation?: InputMaybe<Scalars['Boolean']['input']>;
  isForwardingActive?: InputMaybe<Scalars['Boolean']['input']>;
  isSponsorshipLink?: InputMaybe<Scalars['Boolean']['input']>;
  numberOfLinks?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<LinkStatus>;
  types?: InputMaybe<ReadonlyArray<LinkType>>;
  viewId?: InputMaybe<Scalars['Int']['input']>;
};


export type QueryGetMailChimpListsArgs = {
  id: Scalars['String']['input'];
};


export type QueryGetMailchimpListsByApiKeyArgs = {
  apiKey: Scalars['String']['input'];
};


export type QueryGetMailingListIntegrationsArgs = {
  filter?: InputMaybe<IntegrationsFilterInput>;
};


export type QueryGetMfaAccessUrlQueryArgs = {
  mfaToDelete?: InputMaybe<Scalars['String']['input']>;
};


export type QueryGetMfaEnrolmentUrlQueryArgs = {
  mfaType: Scalars['String']['input'];
};


export type QueryGetMonetizableProfileItemsArgs = {
  numberOfLinks?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<LinkStatus>;
};


export type QueryGetNotificationCountsArgs = {
  accountUuid: Scalars['String']['input'];
};


export type QueryGetNotificationsArgs = {
  accountUuid: Scalars['String']['input'];
  after?: InputMaybe<Scalars['String']['input']>;
  category?: Scalars['String']['input'];
  first?: Scalars['Int']['input'];
  status?: Scalars['String']['input'];
};


export type QueryGetNotificationsForLinksArgs = {
  accountUuid: Scalars['String']['input'];
  links: ReadonlyArray<InputMaybe<LinkInput>>;
};


export type QueryGetNotificationsSettingsArgs = {
  account: GetNotificationSettingsInput;
};


export type QueryGetPaymentsByLinkArgs = {
  endDate?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
  startDate?: InputMaybe<Scalars['String']['input']>;
};


export type QueryGetPaymentsTrendByLinkArgs = {
  endDate?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
  startDate?: InputMaybe<Scalars['String']['input']>;
};


export type QueryGetPlansArgs = {
  countryCode: Scalars['String']['input'];
};


export type QueryGetPlansWithPricesArgs = {
  countryCode: Scalars['String']['input'];
};


export type QueryGetProductAnalyticsArgs = {
  account: AccountAnalyticsInput;
  productId: Scalars['UUID']['input'];
  range?: InputMaybe<Range>;
  timezone: Scalars['String']['input'];
};


export type QueryGetProductCollectionsArgs = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['String']['input']>;
  serviceIntegrationId: Scalars['String']['input'];
  skipProducts?: InputMaybe<Scalars['Boolean']['input']>;
};


export type QueryGetProductImageByListingIdArgs = {
  accountUuid: Scalars['String']['input'];
  linkType: Scalars['String']['input'];
  listingId: Scalars['String']['input'];
};


export type QueryGetProductListingsByAccountArgs = {
  accountUuid: Scalars['String']['input'];
};


export type QueryGetProductsArgs = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['String']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  serviceIntegrationId: Scalars['String']['input'];
};


export type QueryGetShortLinkChannelBreakdownArgs = {
  filters?: InputMaybe<ShortLinkAnalyticsFilters>;
  range: Range;
  sessionToken?: InputMaybe<Scalars['String']['input']>;
  shortLink: ShortLinkAnalyticsInput;
  timezone: Scalars['String']['input'];
};


export type QueryGetShortLinkChannelSummariesArgs = {
  channelUuids: ReadonlyArray<Scalars['String']['input']>;
  sessionToken?: InputMaybe<Scalars['String']['input']>;
  timezone: Scalars['String']['input'];
};


export type QueryGetShortLinkCityBreakdownArgs = {
  filters?: InputMaybe<ShortLinkAnalyticsFilters>;
  range: Range;
  sessionToken?: InputMaybe<Scalars['String']['input']>;
  shortLink: ShortLinkAnalyticsInput;
  timezone: Scalars['String']['input'];
};


export type QueryGetShortLinkCountryBreakdownArgs = {
  filters?: InputMaybe<ShortLinkAnalyticsFilters>;
  range: Range;
  sessionToken?: InputMaybe<Scalars['String']['input']>;
  shortLink: ShortLinkAnalyticsInput;
  timezone: Scalars['String']['input'];
};


export type QueryGetShortLinkDeviceBreakdownArgs = {
  filters?: InputMaybe<ShortLinkAnalyticsFilters>;
  range: Range;
  sessionToken?: InputMaybe<Scalars['String']['input']>;
  shortLink: ShortLinkAnalyticsInput;
  timezone: Scalars['String']['input'];
};


export type QueryGetShortLinkReferrerBreakdownArgs = {
  filters?: InputMaybe<ShortLinkAnalyticsFilters>;
  range: Range;
  sessionToken?: InputMaybe<Scalars['String']['input']>;
  shortLink: ShortLinkAnalyticsInput;
  timezone: Scalars['String']['input'];
};


export type QueryGetShortLinkTrafficDailyArgs = {
  filters?: InputMaybe<ShortLinkAnalyticsFilters>;
  range?: InputMaybe<Range>;
  sessionToken?: InputMaybe<Scalars['String']['input']>;
  shortLink?: InputMaybe<ShortLinkAnalyticsInput>;
  timezone?: InputMaybe<Scalars['String']['input']>;
};


export type QueryGetShortLinkTrafficHourlyArgs = {
  filters?: InputMaybe<ShortLinkAnalyticsFilters>;
  range?: InputMaybe<Range>;
  sessionToken?: InputMaybe<Scalars['String']['input']>;
  shortLink?: InputMaybe<ShortLinkAnalyticsInput>;
  timezone?: InputMaybe<Scalars['String']['input']>;
};


export type QueryGetShortLinkTrafficLifetimeArgs = {
  filters?: InputMaybe<ShortLinkAnalyticsFilters>;
  range?: InputMaybe<Range>;
  sessionToken?: InputMaybe<Scalars['String']['input']>;
  shortLink?: InputMaybe<ShortLinkAnalyticsInput>;
  timezone?: InputMaybe<Scalars['String']['input']>;
};


export type QueryGetSocialContentToLinkAssociationsArgs = {
  associatedMethod?: InputMaybe<Scalars['String']['input']>;
  socialContentId?: InputMaybe<Scalars['String']['input']>;
  socialIntegrationId: Scalars['String']['input'];
};


export type QueryGetSocialFeedPostAnalyticsArgs = {
  input: SocialFeedPostAnalyticsInput;
  range?: InputMaybe<Range>;
  timezone: Scalars['String']['input'];
};


export type QueryGetSocialNotificationAnalyticsArgs = {
  range?: InputMaybe<Range>;
  socialNotification: SocialNotificationAnalyticsInput;
  timezone?: InputMaybe<Scalars['String']['input']>;
};


export type QueryGetSocialNotificationConfigByAccountArgs = {
  input: GetSocialNotificationConfigByAccountInput;
};


export type QueryGetSocialNotificationConfigByIdArgs = {
  input: GetSocialNotificationConfigByIdInput;
};


export type QueryGetSocialNotificationConfigByLinkIdArgs = {
  input: GetSocialNotificationConfigByLinkIdInput;
};


export type QueryGetSponsoredOfferBySponsorshipIdArgs = {
  input: GetSponsoredOfferBySponsorshipIdInput;
};


export type QueryGetSponsoredOffersBySponsorshipIdsArgs = {
  input: GetSponsoredOffersBySponsorshipIdsInput;
};


export type QueryGetSponsoredOffersWithMetadataArgs = {
  accountUuid: Scalars['String']['input'];
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  filterBy?: InputMaybe<ReadonlyArray<CommerceSponsoredOfferFilterByStatement>>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<ReadonlyArray<CommerceSponsoredOfferOrderByStatement>>;
  searchBy?: InputMaybe<ReadonlyArray<CommerceSponsoredOfferSearchByStatement>>;
};


export type QueryGetSquareLocationsArgs = {
  id: Scalars['String']['input'];
};


export type QueryGetStorefrontAnalyticsArgs = {
  account: AccountAnalyticsInput;
  range?: InputMaybe<Range>;
  timezone: Scalars['String']['input'];
};


export type QueryGetStripeBalanceArgs = {
  id: Scalars['String']['input'];
};


export type QueryGetSubscribersByLinkArgs = {
  endDate?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
  startDate?: InputMaybe<Scalars['String']['input']>;
};


export type QueryGetSubscriptionAddOnCheckoutUrlArgs = {
  getSubscriptionAddOnCheckoutURL: GetSubscriptionAddOnCheckoutUrlInput;
};


export type QueryGetTikTokBusinessMetricsQueryArgs = {
  tikTokBusinessIntegrationId: Scalars['String']['input'];
  videoIds?: InputMaybe<ReadonlyArray<Scalars['String']['input']>>;
};


export type QueryGetTikTokBusinessProfileQueryArgs = {
  fields: ReadonlyArray<Scalars['String']['input']>;
  tikTokBusinessIntegrationId: Scalars['String']['input'];
};


export type QueryGetTikTokBusinessSocialAnalyticsArgs = {
  input: TikTokBusinessAnalyticsInput;
};


export type QueryGetTikTokBusinessVideosWithMetricsQueryArgs = {
  tikTokBusinessIntegrationId: Scalars['String']['input'];
  videoIds?: InputMaybe<ReadonlyArray<Scalars['String']['input']>>;
};


export type QueryGetTikTokProfileArgs = {
  linkId: Scalars['String']['input'];
  tiktokIntegrationId: Scalars['String']['input'];
  videoIds?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']['input']>>>;
};


export type QueryGetTikTokProfileLatestArgs = {
  linkId: Scalars['String']['input'];
  tiktokIntegrationId: Scalars['String']['input'];
};


export type QueryGetTikTokVideosAllArgs = {
  cursor?: InputMaybe<Scalars['String']['input']>;
  linkId: Scalars['String']['input'];
  tiktokIntegrationId: Scalars['String']['input'];
};


export type QueryGetTikTokVideosByIdArgs = {
  linkId: Scalars['String']['input'];
  tiktokIntegrationId: Scalars['String']['input'];
  videoIds: ReadonlyArray<Scalars['String']['input']>;
};


export type QueryGetTotalBalanceByCurrencyArgs = {
  accountUuid: Scalars['String']['input'];
};


export type QueryGetUserEntitlementsArgs = {
  getUserEntitlementsQueryInput: GetUserEntitlementsQueryInput;
};


export type QueryGetUserFromCredentialsArgs = {
  credentials: UsernamePasswordInput;
};


export type QueryGetUserStatusByUsernameArgs = {
  username: Scalars['String']['input'];
};


export type QueryGetWalletStateV3Args = {
  accountUuid: Scalars['String']['input'];
};


export type QueryGetWorkspaceArgs = {
  workspaceId?: InputMaybe<Scalars['String']['input']>;
};


export type QueryGetWorkspaceOverviewAnalyticsArgs = {
  endDate: Scalars['String']['input'];
  startDate: Scalars['String']['input'];
  workspaceId: Scalars['Int']['input'];
};


export type QueryGetYoutubeSocialAnalyticsArgs = {
  input: YouTubeBusinessAnalyticsInput;
};


export type QueryIndexingReportArgs = {
  accountUuid?: InputMaybe<Scalars['String']['input']>;
};


export type QueryIndexingStatusArgs = {
  accountUuid?: InputMaybe<Scalars['String']['input']>;
};


export type QueryIsEligibleForAffiliateMonetizationFeaturesArgs = {
  accountUuid: Scalars['String']['input'];
  country?: InputMaybe<Scalars['String']['input']>;
};


export type QueryIsFollowingAccountArgs = {
  input: IsFollowingAccountInput;
};


export type QueryIsWalletViewableArgs = {
  accountUuid: Scalars['String']['input'];
  country?: InputMaybe<Scalars['String']['input']>;
};


export type QueryIsWalletViewableV3Args = {
  accountUuid: Scalars['String']['input'];
  country?: InputMaybe<Scalars['String']['input']>;
};


export type QueryListAccountsArgs = {
  filters?: InputMaybe<AccountListFilterInput>;
};


export type QueryListLinksArgs = {
  filters?: InputMaybe<LinkListFilterInput>;
};


export type QueryMessagingFaqsArgs = {
  accountId: Scalars['Int']['input'];
};


export type QueryQueryFormFieldsArgs = {
  input: QueryFormFieldsInput;
};


export type QueryQuestionArgs = {
  accountUuid?: InputMaybe<Scalars['String']['input']>;
  questionId?: InputMaybe<Scalars['String']['input']>;
  useCase?: InputMaybe<Scalars['String']['input']>;
};


export type QueryQuestionsArgs = {
  accountUuid?: InputMaybe<Scalars['String']['input']>;
  profile?: InputMaybe<Scalars['String']['input']>;
};


export type QueryRelevantChunksArgs = {
  accountUuid?: InputMaybe<Scalars['String']['input']>;
  numMatches: Scalars['Float']['input'];
  profile?: InputMaybe<Scalars['String']['input']>;
  query: Scalars['String']['input'];
  useCase?: InputMaybe<Scalars['String']['input']>;
};


export type QuerySearchCommerceVendorsRetoolArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<ReadonlyArray<CommerceVendorOrderByStatement>>;
  searchQuery: Scalars['String']['input'];
};


export type QuerySearchSocialContentIndustriesArgs = {
  input: SocialContentIndustryInput;
};


export type QuerySearchSponsoredOffersArgs = {
  active?: InputMaybe<Scalars['Boolean']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  marketplace?: InputMaybe<Scalars['String']['input']>;
  searchQuery?: InputMaybe<Scalars['String']['input']>;
  vendor?: InputMaybe<Scalars['String']['input']>;
};


export type QuerySubscriptionEstimateArgs = {
  accountIds?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']['input']>>>;
  addressCity?: InputMaybe<Scalars['String']['input']>;
  addressLine1?: InputMaybe<Scalars['String']['input']>;
  addressLine2?: InputMaybe<Scalars['String']['input']>;
  addressState?: InputMaybe<Scalars['String']['input']>;
  country?: InputMaybe<Scalars['String']['input']>;
  couponId?: InputMaybe<Scalars['String']['input']>;
  currency: Scalars['String']['input'];
  frequency: Scalars['String']['input'];
  postcode?: InputMaybe<Scalars['String']['input']>;
  price?: InputMaybe<Scalars['Int']['input']>;
  profileQuantity?: InputMaybe<Scalars['Int']['input']>;
  tier: Scalars['String']['input'];
  unitPrice?: InputMaybe<Scalars['Int']['input']>;
};


export type QueryUserArgs = {
  id: Scalars['ID']['input'];
};


export type QueryUserDetailsForChargehoundArgs = {
  customerEmail?: InputMaybe<Scalars['String']['input']>;
  dateRange?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']['input']>>>;
  id_at_gateway?: InputMaybe<Scalars['String']['input']>;
  isStripe?: InputMaybe<Scalars['Boolean']['input']>;
  referenceId?: InputMaybe<Scalars['String']['input']>;
};


export type QueryUserFromEmailArgs = {
  email: Scalars['String']['input'];
};


export type QueryUserFromUsernameArgs = {
  username: Scalars['String']['input'];
};


export type QueryUserFromUuidArgs = {
  uuid: Scalars['String']['input'];
};


export type QueryUsersArgs = {
  usernames?: InputMaybe<ReadonlyArray<UsernameInput>>;
};


export type QueryUsersFromUuidsArgs = {
  uuids: ReadonlyArray<Scalars['String']['input']>;
};


export type QueryValidateGoogleSheetsIdArgs = {
  integrationId: Scalars['String']['input'];
  sheetId: Scalars['String']['input'];
};


export type QueryValidateGoogleYouTubeArgs = {
  integrationId: Scalars['String']['input'];
};


export type QueryValidateLinksGateArgs = {
  accountId?: InputMaybe<Scalars['Int']['input']>;
  filter?: InputMaybe<LinksFilterInput>;
  requestSource?: InputMaybe<RequestSourceInput>;
  validationInput?: InputMaybe<ValidationInput>;
};


export type QueryValidatePaymentAmountArgs = {
  amount: Scalars['Int']['input'];
  linkId: Scalars['Int']['input'];
};


export type QueryWalletExperienceArgs = {
  accountUuid: Scalars['String']['input'];
};

export type QueryFormFieldsInput = {
  readonly accountUuid: Scalars['String']['input'];
  readonly labelPrefix?: InputMaybe<Scalars['String']['input']>;
  readonly limit?: InputMaybe<Scalars['Int']['input']>;
};

export type QueryFormFieldsOutput = {
  readonly __typename: 'QueryFormFieldsOutput';
  readonly formFields?: Maybe<ReadonlyArray<FormFieldModel>>;
};

export type Question = {
  readonly __typename: 'Question';
  readonly accountUuid?: Maybe<Scalars['String']['output']>;
  readonly answer?: Maybe<Scalars['String']['output']>;
  readonly chunk_urls?: Maybe<ReadonlyArray<Maybe<Scalars['String']['output']>>>;
  readonly chunks: ReadonlyArray<Scalars['String']['output']>;
  readonly commandType?: Maybe<Scalars['String']['output']>;
  readonly conversationId?: Maybe<Scalars['String']['output']>;
  readonly created?: Maybe<Scalars['DateTime']['output']>;
  readonly feedbackContent?: Maybe<Scalars['String']['output']>;
  readonly feedbackRating?: Maybe<Scalars['Float']['output']>;
  readonly id: Scalars['String']['output'];
  readonly model?: Maybe<Scalars['String']['output']>;
  readonly question: Scalars['String']['output'];
};

export type Range = {
  readonly end?: InputMaybe<Scalars['String']['input']>;
  readonly start?: InputMaybe<Scalars['String']['input']>;
};

export type ReauthorizePaypalIntegrationInput = {
  readonly accountStatus: Scalars['String']['input'];
  readonly id: Scalars['String']['input'];
  readonly merchantId: Scalars['String']['input'];
};

export type ReauthorizeShopifyIntegrationInput = {
  readonly authorizationCode: Scalars['String']['input'];
  readonly id: Scalars['String']['input'];
  readonly shop: Scalars['String']['input'];
};

export type ReauthorizeSquareIntegrationInput = {
  readonly authorizationCode: Scalars['String']['input'];
  readonly id: Scalars['String']['input'];
};

export type ReauthorizeStripeIntegrationInput = {
  readonly authorizationCode: Scalars['String']['input'];
  readonly id: Scalars['String']['input'];
};

export type ReferrerBreakdown = {
  readonly __typename: 'ReferrerBreakdown';
  readonly clickThroughRate?: Maybe<Scalars['Float']['output']>;
  readonly clicks?: Maybe<Scalars['Int']['output']>;
  readonly date: Scalars['String']['output'];
  readonly referrer?: Maybe<Scalars['String']['output']>;
  readonly views?: Maybe<Scalars['Int']['output']>;
};

export type RefollowInput = {
  readonly token: Scalars['String']['input'];
};

export type RemoveAccountFromWorkspaceResult = {
  readonly __typename: 'RemoveAccountFromWorkspaceResult';
  readonly message?: Maybe<Scalars['String']['output']>;
  readonly result?: Maybe<Scalars['String']['output']>;
};

export type RemoveAdminResult = {
  readonly __typename: 'RemoveAdminResult';
  readonly message?: Maybe<Scalars['String']['output']>;
  readonly result?: Maybe<Scalars['String']['output']>;
};

export type RemoveChildLinkInput = {
  readonly childId: Scalars['Int']['input'];
  readonly position: Scalars['Int']['input'];
};

export type RemoveFieldsFromFormInput = {
  readonly accountUuid: Scalars['String']['input'];
  readonly fieldIds?: InputMaybe<ReadonlyArray<Scalars['String']['input']>>;
  readonly formId: Scalars['String']['input'];
};

export type RemoveFieldsFromFormOutput = {
  readonly __typename: 'RemoveFieldsFromFormOutput';
  readonly form?: Maybe<FormModel>;
};

export type RemoveIntegrationInput = {
  readonly id: Scalars['String']['input'];
};

export type RemoveSocialContentToLinkAssociationsInput = {
  readonly associatedMethod: Scalars['String']['input'];
  readonly id: Scalars['String']['input'];
};

export type RemoveSquareIntegrationInput = {
  readonly id: Scalars['String']['input'];
};

export type RemoveUserFromWorkspaceResult = {
  readonly __typename: 'RemoveUserFromWorkspaceResult';
  readonly message?: Maybe<Scalars['String']['output']>;
  readonly result?: Maybe<Scalars['String']['output']>;
};

export type ReorderAudienceManagerSubscriberTableSchemaInput = {
  readonly accountUuid: Scalars['String']['input'];
  /** The expected ordered IDs of the columns. */
  readonly columnIds: ReadonlyArray<Scalars['String']['input']>;
};

export type ReorderAudienceManagerSubscriberTableSchemaOutput = {
  readonly __typename: 'ReorderAudienceManagerSubscriberTableSchemaOutput';
  readonly columnsPage?: Maybe<AudienceManagerSubscriberTableColumnModelPage>;
};

export type ReorderChildLinkInput = {
  readonly childId: Scalars['Int']['input'];
  readonly position: Scalars['Int']['input'];
};

export type ReorderCommerceStoreProductAccountProductIdAndIndexInput = {
  readonly accountProductId: Scalars['String']['input'];
  readonly index: Scalars['Float']['input'];
};

export type ReorderCommerceStoreProductInCollectionInput = {
  readonly accountUuid: Scalars['String']['input'];
  readonly collectionId: Scalars['String']['input'];
  readonly fromIndex: Scalars['Float']['input'];
  readonly toIndex: Scalars['Float']['input'];
};

export type ReorderCommerceStoreProductsInCollectionInput = {
  /** The accountProductIds and their target indexes in the collection. All the accountProductIds must be in the collection. The target indexes must be unique and within the collection's range. The indexes are 0-based. The system will honor the input indexes, and the order of the rest items in the collection will still be preserved. E.g. the collection contains accountProducts [A, B, C, D]. Then input is [{C, 0}, [D, 2]]. The the reordered collection would look like [C, A, D, B] (order of A and B is preserved). */
  readonly accountProductIdAndTargetIndexInputs: ReadonlyArray<ReorderCommerceStoreProductAccountProductIdAndIndexInput>;
  readonly accountUuid: Scalars['String']['input'];
  readonly collectionId: Scalars['String']['input'];
};

export type ReorderCommerceStoreProductsInStorefrontPostInput = {
  /** The accountProductIds and their target indexes in the collection. All the accountProductIds must be in the collection. The target indexes must be unique and within the collection's range. The indexes are 0-based. The system will honor the input indexes, and the order of the rest items in the collection will still be preserved. E.g. the collection contains accountProducts [A, B, C, D]. Then input is [{C, 0}, [D, 2]]. The the reordered collection would look like [C, A, D, B] (order of A and B is preserved). */
  readonly accountProductIdAndTargetIndexInputs: ReadonlyArray<ReorderCommerceStoreProductAccountProductIdAndIndexInput>;
  readonly accountUuid: Scalars['String']['input'];
  readonly postId: Scalars['String']['input'];
};

export type ReorderCommerceUgcContentInStorefrontPostInput = {
  readonly accountUuid: Scalars['String']['input'];
  readonly fromIndex: Scalars['Float']['input'];
  readonly postId: Scalars['String']['input'];
  readonly toIndex: Scalars['Float']['input'];
};

export type ReorderFormFieldsInput = {
  readonly accountUuid: Scalars['String']['input'];
  /** The field IDs in the order they should be displayed in the form */
  readonly fieldIds: ReadonlyArray<Scalars['String']['input']>;
  readonly formId: Scalars['String']['input'];
};

export type ReorderFormFieldsOutput = {
  readonly __typename: 'ReorderFormFieldsOutput';
  readonly form?: Maybe<FormModel>;
};

export type ReorderSocialLinksResult = {
  readonly __typename: 'ReorderSocialLinksResult';
  readonly user?: Maybe<User>;
};

export type ReorderSocialNotificationConfigInput = {
  readonly accountUuid: Scalars['String']['input'];
  /** Move the target config after the config with this ID. */
  readonly afterId?: InputMaybe<Scalars['String']['input']>;
  /** The target config ID to reorder */
  readonly id: Scalars['String']['input'];
  /** Additional parameters for system to return configs after reordering */
  readonly returnListParams?: InputMaybe<ReorderSocialNotificationConfigReturnListParams>;
  /** Move the target config to the top. */
  readonly top?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ReorderSocialNotificationConfigOutput = {
  readonly __typename: 'ReorderSocialNotificationConfigOutput';
  readonly returnList?: Maybe<ReadonlyArray<GetSocialNotificationConfigOutput>>;
  readonly success: Scalars['Boolean']['output'];
};

export type ReorderSocialNotificationConfigReturnListParams = {
  /** The after-cursor to continue from. */
  readonly after?: InputMaybe<Scalars['String']['input']>;
  /** The before-cursor to continue from. */
  readonly before?: InputMaybe<Scalars['String']['input']>;
  /** If set, include co-trigger information in the result */
  readonly includeCoTrigger?: InputMaybe<Scalars['Boolean']['input']>;
  /** If set, only return the configs that has "postNextAliveTimestampAfter" in the trigger, and haven't been resolved yet. */
  readonly includeOnlyPostNextAliveTimestampAfter?: InputMaybe<Scalars['Boolean']['input']>;
  /** If set, include the total count of configs meeting the query criteria in the database. */
  readonly includeTotalCount?: InputMaybe<Scalars['Boolean']['input']>;
  /** Limit the number of configs returned */
  readonly limit?: InputMaybe<Scalars['Int']['input']>;
  /** The fields to order by. */
  readonly orderBys?: InputMaybe<ReadonlyArray<SocialNotificationConfigSortBy>>;
  /** If set, return the list of configs after reordering */
  readonly returnList?: InputMaybe<Scalars['Boolean']['input']>;
  /** Result filter by status(es). If not set or empty, no filter will be applied. */
  readonly status?: InputMaybe<ReadonlyArray<Scalars['String']['input']>>;
};

export type RepositionLinkAction = {
  readonly __typename: 'RepositionLinkAction';
  readonly linkId: Scalars['String']['output'];
  readonly position: Scalars['Int']['output'];
  readonly source: Scalars['Int']['output'];
};

export type RequestAudienceSupportEmailVerificationCodeResult = {
  readonly __typename: 'RequestAudienceSupportEmailVerificationCodeResult';
  readonly success: Scalars['Boolean']['output'];
};

export type RequestEmailChangeOtpInput = {
  readonly newEmail: Scalars['String']['input'];
};

export type RequestEmailChangeOtpResult = {
  readonly __typename: 'RequestEmailChangeOtpResult';
  readonly error?: Maybe<Scalars['String']['output']>;
  readonly success: Scalars['Boolean']['output'];
};

export type RequestEmailVerificationResult = {
  readonly __typename: 'RequestEmailVerificationResult';
  readonly result?: Maybe<Scalars['String']['output']>;
};

export type RequestFollowerListInput = {
  readonly accountUuid: Scalars['String']['input'];
  readonly email: Scalars['String']['input'];
  readonly password: Scalars['String']['input'];
};

export type RequestFormSubmissionListInput = {
  readonly accountUuid: Scalars['String']['input'];
  readonly email: Scalars['String']['input'];
  readonly formId: Scalars['String']['input'];
  readonly password: Scalars['String']['input'];
};

export type RequestFormSubmissionListOutput = {
  readonly __typename: 'RequestFormSubmissionListOutput';
  readonly success: Scalars['Boolean']['output'];
};

export type RequestLinkContext = {
  readonly __typename: 'RequestLinkContext';
  readonly descriptionMessage?: Maybe<Scalars['String']['output']>;
  readonly helpCoverFees?: Maybe<Scalars['Boolean']['output']>;
  readonly options: ReadonlyArray<RequestLinkOption>;
  readonly requireDetails: Scalars['Boolean']['output'];
  readonly requireTax: Scalars['Boolean']['output'];
  readonly serviceIntegration?: Maybe<ServiceIntegration>;
  readonly successMessage?: Maybe<Scalars['String']['output']>;
  readonly taxRate?: Maybe<Scalars['Float']['output']>;
};

export type RequestLinkContextInput = {
  readonly descriptionMessage?: InputMaybe<Scalars['String']['input']>;
  readonly helpCoverFees?: InputMaybe<Scalars['Boolean']['input']>;
  readonly options?: InputMaybe<ReadonlyArray<RequestLinkOptionInput>>;
  readonly requireDetails?: InputMaybe<Scalars['Boolean']['input']>;
  readonly requireTax: Scalars['Boolean']['input'];
  readonly serviceIntegrationId?: InputMaybe<Scalars['String']['input']>;
  readonly successMessage?: InputMaybe<Scalars['String']['input']>;
  readonly taxRate?: InputMaybe<Scalars['Float']['input']>;
};

export type RequestLinkOption = {
  readonly __typename: 'RequestLinkOption';
  readonly amount: Scalars['Int']['output'];
  readonly title: Scalars['String']['output'];
};

export type RequestLinkOptionInput = {
  readonly amount: Scalars['Int']['input'];
  readonly title: Scalars['String']['input'];
};

export type RequestLtFollowersAccountSyncInput = {
  readonly accountUuid: Scalars['String']['input'];
};

export type RequestLtFollowersAccountSyncOutput = {
  readonly __typename: 'RequestLtFollowersAccountSyncOutput';
  readonly success: Scalars['Boolean']['output'];
};

export type RequestPasswordResetInput = {
  readonly username: Scalars['String']['input'];
};

export type RequestPasswordResetResult = {
  readonly __typename: 'RequestPasswordResetResult';
  readonly result?: Maybe<Scalars['String']['output']>;
};

export type RequestSourceInput = {
  readonly referrer?: InputMaybe<Scalars['String']['input']>;
};

export type RequestUsernameInput = {
  readonly captchaToken: Scalars['String']['input'];
  readonly email: Scalars['String']['input'];
};

export type RequestUsernameResult = {
  readonly __typename: 'RequestUsernameResult';
  readonly result?: Maybe<Scalars['String']['output']>;
};

export type ResetUserMfaResult = {
  readonly __typename: 'ResetUserMFAResult';
  readonly success: Scalars['Boolean']['output'];
};

export type RestrictedWalletConnection = BaseWalletConnection & {
  readonly __typename: 'RestrictedWalletConnection';
  readonly accountId: Scalars['String']['output'];
  readonly countryCode?: Maybe<Scalars['String']['output']>;
  readonly currency: Scalars['String']['output'];
  readonly dashboardUrl?: Maybe<Scalars['String']['output']>;
  readonly program: Scalars['String']['output'];
  readonly provider: Scalars['String']['output'];
  readonly reason: Scalars['String']['output'];
  readonly status: Scalars['String']['output'];
  readonly updatedAt: Scalars['Float']['output'];
};

export enum Result {
  Error = 'ERROR',
  Success = 'SUCCESS',
  Warning = 'WARNING'
}

/** A notification for rewards, Deprecated, please use RewardsNotificationV2 instead */
export type RewardsNotification = {
  readonly __typename: 'RewardsNotification';
  readonly points: Scalars['Int']['output'];
  readonly text: Scalars['String']['output'];
};

export type RewardsNotificationPollResult = {
  readonly __typename: 'RewardsNotificationPollResult';
  /** @deprecated Use notificationsV2 instead, this is specific to achievements, v2 is more generic */
  readonly notifications: ReadonlyArray<RewardsNotification>;
  readonly notificationsV2: ReadonlyArray<RewardsNotificationV2>;
  readonly timestamp: Scalars['DateTime']['output'];
};

export type RewardsNotificationV2 = {
  readonly __typename: 'RewardsNotificationV2';
  readonly description: Scalars['String']['output'];
  readonly progressBar: CommerceRewardsProgramProgressBar;
  readonly title: Scalars['String']['output'];
};

export type RewardsProgramDisplaySegmentItem = CommerceRewardsProgramAchievement | CommerceRewardsProgramCashBonusSegment | CommerceRewardsProgramChallenge;

export type RewritePromptInput = {
  readonly prompt: Scalars['String']['input'];
};

export type RichMediaSpotifyPreviousStateLink = {
  readonly __typename: 'RichMediaSpotifyPreviousStateLink';
  readonly embedOption?: Maybe<LinkEmbedOptions>;
  readonly linkId: Scalars['Int']['output'];
  readonly linkType?: Maybe<Scalars['String']['output']>;
  readonly options?: Maybe<ReadonlyArray<Maybe<SpotifyLinkOption>>>;
  readonly useLatestEpisode?: Maybe<Scalars['Boolean']['output']>;
};

export type RichMediaYoutubePreviousStateLink = {
  readonly __typename: 'RichMediaYoutubePreviousStateLink';
  readonly autoplay?: Maybe<Scalars['Boolean']['output']>;
  readonly channelId?: Maybe<Scalars['String']['output']>;
  readonly embedOption?: Maybe<LinkEmbedOptions>;
  readonly linkId: Scalars['Int']['output'];
  readonly linkType?: Maybe<Scalars['String']['output']>;
  readonly mute?: Maybe<Scalars['Boolean']['output']>;
  readonly playlistId?: Maybe<Scalars['String']['output']>;
  readonly videoId?: Maybe<Scalars['String']['output']>;
};

export enum Role {
  Assistant = 'assistant',
  User = 'user'
}

export type RssFeedLinkContext = {
  readonly __typename: 'RssFeedLinkContext';
  readonly embedOption?: Maybe<LinkEmbedOptions>;
  readonly includeThumbnails?: Maybe<Scalars['Boolean']['output']>;
  readonly itemCount?: Maybe<Scalars['Int']['output']>;
};

export type RssFeedLinkContextInput = {
  readonly embedOption?: InputMaybe<LinkEmbedOptions>;
  readonly includeThumbnails?: InputMaybe<Scalars['Boolean']['input']>;
  readonly itemCount?: InputMaybe<Scalars['Int']['input']>;
};

export type S3BucketInformation = {
  readonly __typename: 'S3BucketInformation';
  readonly bucketName: Scalars['String']['output'];
  readonly objectKey: Scalars['String']['output'];
};

export type ScheduleLeapLinkOffInput = {
  readonly linkId: Scalars['Int']['input'];
};

export type ScheduleLinkOffInput = {
  readonly linkId: Scalars['Int']['input'];
};

export type ScheduleLinkOffResult = {
  readonly __typename: 'ScheduleLinkOffResult';
  readonly link?: Maybe<Link>;
};

export type ScheduleLinkOnInput = {
  readonly linkId: Scalars['Int']['input'];
};

export type ScheduleLinkOnResult = {
  readonly __typename: 'ScheduleLinkOnResult';
  readonly link?: Maybe<Link>;
};

export type ScheduledNotificationDeletionResultModel = {
  readonly __typename: 'ScheduledNotificationDeletionResultModel';
  readonly success: Scalars['Boolean']['output'];
};

export type ScheduledNotificationErrorModel = {
  readonly __typename: 'ScheduledNotificationErrorModel';
  readonly type: NotificationError;
};

export type ScheduledNotificationResultModel = {
  readonly __typename: 'ScheduledNotificationResultModel';
  readonly data?: Maybe<NotificationModel>;
  readonly error?: Maybe<ScheduledNotificationErrorModel>;
};

export type ScheduledStatus = {
  readonly __typename: 'ScheduledStatus';
  readonly ended?: Maybe<Scalars['Boolean']['output']>;
  readonly on?: Maybe<Scalars['Boolean']['output']>;
  readonly started?: Maybe<Scalars['Boolean']['output']>;
};

export type SelectPlanResult = {
  readonly __typename: 'SelectPlanResult';
  readonly user?: Maybe<User>;
};

export type SelectedAccountOwnerResult = {
  readonly __typename: 'SelectedAccountOwnerResult';
  readonly id: Scalars['Int']['output'];
};

export type SendInstagramDirectMessageInput = {
  readonly accountUuid: Scalars['String']['input'];
  readonly instagramBusinessAccountId: Scalars['String']['input'];
  readonly integrationId?: InputMaybe<Scalars['String']['input']>;
  readonly message: InstagramDirectMessageInput;
  readonly recipient: InstagramDirectMessageRecipientInput;
  readonly shouldUseInstagramBusiness?: InputMaybe<Scalars['Boolean']['input']>;
};

export type SendInstagramDirectMessageResult = {
  readonly __typename: 'SendInstagramDirectMessageResult';
  readonly errorRetryable?: Maybe<Scalars['Boolean']['output']>;
  readonly facebookError?: Maybe<Scalars['String']['output']>;
  readonly instagramMessageId?: Maybe<Scalars['String']['output']>;
  readonly success: Scalars['Boolean']['output'];
};

export type SendInstagramMessagePublicReplyInput = {
  readonly accountUuid: Scalars['String']['input'];
  readonly instagramBusinessAccountId: Scalars['String']['input'];
  readonly integrationId?: InputMaybe<Scalars['String']['input']>;
  readonly message: InstagramMessagePublicReplyMessageInput;
  readonly recipient: InstagramMessagePublicReplyRecipientInput;
};

export type SendInstagramMessagePublicReplyResult = {
  readonly __typename: 'SendInstagramMessagePublicReplyResult';
  readonly errorMessage?: Maybe<Scalars['String']['output']>;
  readonly errorRetryable?: Maybe<Scalars['Boolean']['output']>;
  readonly instagramMessageId?: Maybe<Scalars['String']['output']>;
  readonly success: Scalars['Boolean']['output'];
};

export type SendNotificationErrorModel = {
  readonly __typename: 'SendNotificationErrorModel';
  readonly type: NotificationError;
};

export type SendNotificationInput = {
  readonly accountUuid: Scalars['String']['input'];
  readonly linkId: Scalars['Int']['input'];
};

export type SendNotificationResultModel = {
  readonly __typename: 'SendNotificationResultModel';
  readonly data?: Maybe<NotificationModel>;
  readonly error?: Maybe<SendNotificationErrorModel>;
  readonly success: Scalars['Boolean']['output'];
};

export type SensitiveContentGateRule = {
  readonly __typename: 'SensitiveContentGateRule';
  readonly domain?: Maybe<Scalars['String']['output']>;
  readonly enforced?: Maybe<Scalars['Boolean']['output']>;
  readonly optedOut?: Maybe<Scalars['Boolean']['output']>;
  readonly suggested?: Maybe<Scalars['Boolean']['output']>;
};

export type SensitiveContentGateRuleInput = {
  readonly enforced?: InputMaybe<Scalars['Boolean']['input']>;
  readonly optedOut?: InputMaybe<Scalars['Boolean']['input']>;
  readonly suggested?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ServiceIntegration = {
  readonly id: Scalars['String']['output'];
  readonly messages: ReadonlyArray<Maybe<Message>>;
  readonly status: ServiceIntegrationStatus;
  readonly title?: Maybe<Scalars['String']['output']>;
  readonly type: ServiceIntegrationType;
};

export enum ServiceIntegrationStatus {
  ActionRequired = 'action_required',
  Healthy = 'healthy',
  Unhealthy = 'unhealthy'
}

export enum ServiceIntegrationType {
  Google = 'google',
  Mailchimp = 'mailchimp',
  Partner = 'partner',
  Paypal = 'paypal',
  Shopify = 'shopify',
  Spring = 'spring',
  Square = 'square',
  Stripe = 'stripe'
}

export type ServiceIntegrationsFilterInput = {
  /** Only return Service Integrations that match this type */
  readonly types?: InputMaybe<ReadonlyArray<ServiceIntegrationType>>;
};

export type SetAccountVerticalsInput = {
  readonly verticals?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']['input']>>>;
};

export type SetAgreeToShareInput = {
  readonly accountUuid: Scalars['String']['input'];
  readonly agreeToShare: Scalars['Boolean']['input'];
  readonly followerId: Scalars['String']['input'];
};

export type SetChildLinkInput = {
  readonly childId: Scalars['Int']['input'];
  readonly parentId: Scalars['Int']['input'];
  readonly position: Scalars['Int']['input'];
};

export type SetDefaultNotificationMethodInput = {
  readonly method: NotificationMethod;
};

export type SetDefaultNotificationMethodModel = {
  readonly __typename: 'SetDefaultNotificationMethodModel';
  readonly success: Scalars['Boolean']['output'];
};

export type SetFollowNotificationSettingsInput = {
  readonly agreeToShare?: InputMaybe<Scalars['Boolean']['input']>;
  readonly email: Scalars['String']['input'];
  readonly frequency?: InputMaybe<Frequency>;
  readonly uuid: Scalars['String']['input'];
};

export type SetGoogleAuthTokenResult = {
  readonly __typename: 'SetGoogleAuthTokenResult';
  readonly hasSetToken: Scalars['Boolean']['output'];
};

export type SetHasGeotargetingViewsInput = {
  readonly hasGeotargetingViews?: InputMaybe<Scalars['Boolean']['input']>;
};

export type SetInstagramWebhookResult = {
  readonly __typename: 'SetInstagramWebhookResult';
  readonly success: Scalars['Boolean']['output'];
};

export type SetMonetizationIntentsInput = {
  readonly monetizationIntents?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']['input']>>>;
};

export type SetNotificationMethodModel = {
  readonly __typename: 'SetNotificationMethodModel';
  readonly success: Scalars['Boolean']['output'];
};

export type SetNotificationSettingsInput = {
  readonly enabled?: InputMaybe<Scalars['Boolean']['input']>;
  readonly uuid: Scalars['String']['input'];
};

export type SetThumbnailPreviousStateLink = {
  readonly __typename: 'SetThumbnailPreviousStateLink';
  readonly linkId: Scalars['Int']['output'];
  readonly thumbnailUrl?: Maybe<Scalars['String']['output']>;
};

export type ShopifyIntegration = ServiceIntegration & {
  readonly __typename: 'ShopifyIntegration';
  readonly externalIntegrationId?: Maybe<Scalars['String']['output']>;
  readonly id: Scalars['String']['output'];
  readonly messages: ReadonlyArray<Maybe<Message>>;
  readonly shop?: Maybe<Scalars['String']['output']>;
  readonly status: ServiceIntegrationStatus;
  readonly title?: Maybe<Scalars['String']['output']>;
  readonly type: ServiceIntegrationType;
};

export enum ShortLinkAnalyticsFilterOperatorEnum {
  In = 'IN',
  Notin = 'NOTIN'
}

export type ShortLinkAnalyticsFilters = {
  readonly channelUuids?: InputMaybe<ShortLinkAnalyticsStringFilter>;
  readonly cities?: InputMaybe<ShortLinkAnalyticsStringFilter>;
  readonly countryCodes?: InputMaybe<ShortLinkAnalyticsStringFilter>;
  readonly devices?: InputMaybe<ShortLinkAnalyticsStringFilter>;
  readonly referrers?: InputMaybe<ShortLinkAnalyticsStringFilter>;
  readonly regions?: InputMaybe<ShortLinkAnalyticsStringFilter>;
};

export type ShortLinkAnalyticsInput = {
  readonly linkUuid: Scalars['String']['input'];
};

export type ShortLinkAnalyticsStringFilter = {
  readonly operator: ShortLinkAnalyticsFilterOperatorEnum;
  readonly values: ReadonlyArray<Scalars['String']['input']>;
};

export type ShortLinkChannelBreakdownRecord = {
  readonly __typename: 'ShortLinkChannelBreakdownRecord';
  readonly channelUuid: Scalars['String']['output'];
  readonly count: Scalars['Int']['output'];
};

export type ShortLinkChannelPeriodSummary = {
  readonly __typename: 'ShortLinkChannelPeriodSummary';
  readonly count: Scalars['Int']['output'];
  readonly trend: ShortLinkChannelPeriodTrend;
};

export type ShortLinkChannelPeriodTrend = {
  readonly __typename: 'ShortLinkChannelPeriodTrend';
  readonly direction: ShortLinkChannelPeriodTrendDirectionEnum;
  readonly percentage: Scalars['Int']['output'];
};

export enum ShortLinkChannelPeriodTrendDirectionEnum {
  Down = 'DOWN',
  Flat = 'FLAT',
  Up = 'UP'
}

export type ShortLinkChannelSummaries = {
  readonly __typename: 'ShortLinkChannelSummaries';
  readonly summaries: ReadonlyArray<ShortLinkChannelSummary>;
};

export type ShortLinkChannelSummary = {
  readonly __typename: 'ShortLinkChannelSummary';
  readonly channelUuid: Scalars['String']['output'];
  readonly clicks7d: ShortLinkChannelPeriodSummary;
  readonly clicks24h: ShortLinkChannelPeriodSummary;
  readonly clicks30d: ShortLinkChannelPeriodSummary;
  readonly clicksLifetime: Scalars['Int']['output'];
  readonly sparkline: ReadonlyArray<ShortLinkSparklineTick>;
};

export type ShortLinkCityBreakdownRecord = {
  readonly __typename: 'ShortLinkCityBreakdownRecord';
  readonly city: Scalars['String']['output'];
  readonly count: Scalars['Int']['output'];
};

export type ShortLinkCountryBreakdownRecord = {
  readonly __typename: 'ShortLinkCountryBreakdownRecord';
  readonly count: Scalars['Int']['output'];
  readonly countryCode: Scalars['String']['output'];
};

export type ShortLinkDeviceBreakdownRecord = {
  readonly __typename: 'ShortLinkDeviceBreakdownRecord';
  readonly count: Scalars['Int']['output'];
  readonly device: Scalars['String']['output'];
};

export type ShortLinkReferrerBreakdownRecord = {
  readonly __typename: 'ShortLinkReferrerBreakdownRecord';
  readonly count: Scalars['Int']['output'];
  readonly referrer: Scalars['String']['output'];
};

export type ShortLinkSparklineTick = {
  readonly __typename: 'ShortLinkSparklineTick';
  readonly count: Scalars['Int']['output'];
  readonly date: Scalars['String']['output'];
};

export type ShortLinkTrafficDailyTick = {
  readonly __typename: 'ShortLinkTrafficDailyTick';
  readonly clickThroughRate: Scalars['Float']['output'];
  readonly date: Scalars['String']['output'];
  readonly totalClicks: Scalars['Int']['output'];
  readonly uniqueClicks?: Maybe<Scalars['Int']['output']>;
};

export type ShortLinkTrafficLifetimeTick = {
  readonly __typename: 'ShortLinkTrafficLifetimeTick';
  readonly totalClicks: Scalars['Int']['output'];
};

export type ShortLinkTrafficTick = {
  readonly __typename: 'ShortLinkTrafficTick';
  readonly clickThroughRate: Scalars['Float']['output'];
  readonly date: Scalars['String']['output'];
  readonly totalClicks: Scalars['Int']['output'];
  readonly uniqueClicks?: Maybe<Scalars['Int']['output']>;
};

export type ShortLinkTrafficTrend = {
  readonly __typename: 'ShortLinkTrafficTrend';
  readonly trend: Scalars['Int']['output'];
};

export type SignupIntegrationResult = {
  readonly __typename: 'SignupIntegrationResult';
  readonly integration?: Maybe<Integration>;
};

export type SocialContentDefinitionInput = {
  readonly idea: Scalars['String']['input'];
  readonly industry: Scalars['String']['input'];
};

export type SocialContentDefinitionType = {
  readonly __typename: 'SocialContentDefinitionType';
  readonly idea: Scalars['String']['output'];
  readonly industry: Scalars['String']['output'];
  readonly socialContentDefinition: Scalars['String']['output'];
};

export type SocialContentIndustry = {
  readonly __typename: 'SocialContentIndustry';
  readonly show: Scalars['String']['output'];
  readonly value: Scalars['String']['output'];
};

export type SocialContentIndustryInput = {
  readonly limit?: InputMaybe<Scalars['Int']['input']>;
  readonly offset?: InputMaybe<Scalars['Int']['input']>;
  readonly show: Scalars['String']['input'];
};

export type SocialContentIndustryType = {
  readonly __typename: 'SocialContentIndustryType';
  readonly hasMore?: Maybe<Scalars['Boolean']['output']>;
  readonly industries: ReadonlyArray<SocialContentIndustry>;
  readonly limit?: Maybe<Scalars['Int']['output']>;
  readonly offset?: Maybe<Scalars['Int']['output']>;
  readonly total?: Maybe<Scalars['Int']['output']>;
};

export type SocialContentPostCaptionInput = {
  readonly count?: InputMaybe<Scalars['Float']['input']>;
  readonly idea?: InputMaybe<Scalars['String']['input']>;
  readonly industry: Scalars['String']['input'];
  readonly postIdeaId?: InputMaybe<Scalars['Float']['input']>;
  readonly prompt: Scalars['String']['input'];
};

export type SocialContentPostCaptionRateInput = {
  readonly disliked?: InputMaybe<Scalars['Boolean']['input']>;
  readonly liked?: InputMaybe<Scalars['Boolean']['input']>;
  readonly postCaptionId: Scalars['Float']['input'];
};

export type SocialContentPostCaptionType = {
  readonly __typename: 'SocialContentPostCaptionType';
  readonly callToAction?: Maybe<Scalars['String']['output']>;
  readonly disliked?: Maybe<Scalars['Boolean']['output']>;
  readonly hashtags?: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  readonly industry: Scalars['String']['output'];
  readonly liked?: Maybe<Scalars['Boolean']['output']>;
  readonly mainText: Scalars['String']['output'];
  readonly postCaptionId: Scalars['Float']['output'];
  readonly tone: Scalars['String']['output'];
};

export type SocialContentPostIdeaInput = {
  readonly count?: InputMaybe<Scalars['Float']['input']>;
  readonly customPrompt?: InputMaybe<Scalars['String']['input']>;
  readonly idea?: InputMaybe<Scalars['String']['input']>;
  readonly industry: Scalars['String']['input'];
};

export type SocialContentPostIdeaRateInput = {
  readonly disliked?: InputMaybe<Scalars['Boolean']['input']>;
  readonly liked?: InputMaybe<Scalars['Boolean']['input']>;
  readonly postIdeaId: Scalars['Float']['input'];
};

export type SocialContentPostIdeaType = {
  readonly __typename: 'SocialContentPostIdeaType';
  readonly captionPrompt?: Maybe<Scalars['String']['output']>;
  readonly description?: Maybe<Scalars['String']['output']>;
  readonly disliked?: Maybe<Scalars['Boolean']['output']>;
  readonly industry: Scalars['String']['output'];
  readonly liked?: Maybe<Scalars['Boolean']['output']>;
  readonly postIdeaId: Scalars['Float']['output'];
  readonly tags?: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  readonly topic?: Maybe<Scalars['String']['output']>;
};

export type SocialContentToLinkAssociations = {
  readonly __typename: 'SocialContentToLinkAssociations';
  readonly account?: Maybe<Account>;
  readonly associatedMethod?: Maybe<Scalars['String']['output']>;
  readonly associationMethods?: Maybe<AssociationMethods>;
  readonly createdAt?: Maybe<Scalars['String']['output']>;
  readonly id: Scalars['String']['output'];
  readonly link?: Maybe<Link>;
  readonly socialContentId: Scalars['String']['output'];
  readonly socialIntegration?: Maybe<SocialIntegration>;
  readonly socialPlatform: Scalars['String']['output'];
  readonly source: Scalars['String']['output'];
  readonly sourceId: Scalars['String']['output'];
  readonly updatedAt?: Maybe<Scalars['String']['output']>;
};

export type SocialContentToneType = {
  readonly __typename: 'SocialContentToneType';
  readonly show: Scalars['String']['output'];
  readonly value: Scalars['String']['output'];
};

export type SocialFeed = {
  readonly __typename: 'SocialFeed';
  readonly active: Scalars['Boolean']['output'];
  readonly id: Scalars['String']['output'];
  readonly isIncomplete: Scalars['Boolean']['output'];
  readonly layout: SocialFeedLayoutType;
  readonly posts: ReadonlyArray<SocialFeedPost>;
  readonly postsPage: SocialFeedPostsPage;
  readonly socialIntegration?: Maybe<SocialIntegration>;
  readonly source: SocialFeedSource;
  readonly title?: Maybe<Scalars['String']['output']>;
  readonly type: SocialFeedType;
};


export type SocialFeedPostsArgs = {
  filter?: InputMaybe<SocialFeedPostFilterInput>;
};


export type SocialFeedPostsPageArgs = {
  filter?: InputMaybe<SocialFeedPostFilterInput>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
};

export type SocialFeedFilterInput = {
  readonly includeDisabled?: InputMaybe<Scalars['Boolean']['input']>;
  /** Whether to include incomplete or disabled feeds */
  readonly includeIncomplete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Whether to include feeds with unsafe or banned links */
  readonly includeUnsafe?: InputMaybe<Scalars['Boolean']['input']>;
};

export enum SocialFeedLayoutType {
  Portrait = 'PORTRAIT',
  Square = 'SQUARE'
}

export type SocialFeedPost = {
  readonly __typename: 'SocialFeedPost';
  readonly analytics?: Maybe<SocialFeedPostAnalyticsMonolith>;
  readonly caption?: Maybe<Scalars['String']['output']>;
  readonly externalId: Scalars['String']['output'];
  readonly id: Scalars['String']['output'];
  readonly media: ReadonlyArray<SocialFeedPostMedia>;
  readonly mediaUrl: Scalars['String']['output'];
  readonly pinned: Scalars['Boolean']['output'];
  readonly postType: SocialFeedPostType;
  readonly thumbnailUrl?: Maybe<Scalars['String']['output']>;
  readonly timestamp: Scalars['String']['output'];
  readonly url: Scalars['String']['output'];
  readonly visible: Scalars['Boolean']['output'];
};

export type SocialFeedPostAnalytics = {
  readonly __typename: 'SocialFeedPostAnalytics';
  readonly lifetime?: Maybe<SocialFeedPostLifetime>;
  readonly postId: Scalars['String']['output'];
};

export type SocialFeedPostAnalyticsInput = {
  readonly account: AccountAnalyticsInput;
  readonly postIds: ReadonlyArray<Scalars['String']['input']>;
};

export type SocialFeedPostAnalyticsMonolith = {
  readonly __typename: 'SocialFeedPostAnalyticsMonolith';
  readonly totalLinkClicks: Scalars['Int']['output'];
};

export type SocialFeedPostFilterInput = {
  readonly includeHidden?: InputMaybe<Scalars['Boolean']['input']>;
};

export type SocialFeedPostLifetime = {
  readonly __typename: 'SocialFeedPostLifetime';
  /** Accumulative link clicks for the post */
  readonly clicks: AccountClicks;
};

export type SocialFeedPostMedia = {
  readonly __typename: 'SocialFeedPostMedia';
  readonly externalId: Scalars['String']['output'];
  readonly id: Scalars['String']['output'];
  readonly links: ReadonlyArray<Maybe<Link>>;
  readonly mediaType: SocialFeedPostMediaType;
  readonly mediaUrl: Scalars['String']['output'];
  readonly thumbnailUrl: Scalars['String']['output'];
};

export type SocialFeedPostMediaInput = {
  readonly externalId: Scalars['String']['input'];
  readonly links?: InputMaybe<ReadonlyArray<InputMaybe<SocialFeedPostMediaLinkInput>>>;
  readonly mediaType: SocialFeedPostMediaType;
  readonly mediaUrl: Scalars['String']['input'];
  readonly thumbnailUrl: Scalars['String']['input'];
};

export type SocialFeedPostMediaLinkCoordinates = {
  readonly __typename: 'SocialFeedPostMediaLinkCoordinates';
  readonly left: Scalars['Float']['output'];
  readonly top: Scalars['Float']['output'];
  readonly x: Scalars['Float']['output'];
  readonly y: Scalars['Float']['output'];
};

export type SocialFeedPostMediaLinkCoordinatesInput = {
  readonly left: Scalars['Float']['input'];
  readonly top: Scalars['Float']['input'];
  readonly x: Scalars['Float']['input'];
  readonly y: Scalars['Float']['input'];
};

export type SocialFeedPostMediaLinkInput = {
  readonly coordinates: SocialFeedPostMediaLinkCoordinatesInput;
  readonly title: Scalars['String']['input'];
  readonly url: Scalars['String']['input'];
};

export enum SocialFeedPostMediaType {
  Image = 'IMAGE',
  Video = 'VIDEO'
}

export enum SocialFeedPostType {
  Carousel = 'CAROUSEL',
  Image = 'IMAGE',
  Video = 'VIDEO'
}

export type SocialFeedPostsPage = {
  readonly __typename: 'SocialFeedPostsPage';
  readonly hasNextPage: Scalars['Boolean']['output'];
  readonly items: ReadonlyArray<SocialFeedPost>;
  readonly totalCount: Scalars['Int']['output'];
};

export enum SocialFeedSource {
  Linktree = 'LINKTREE',
  Plann = 'PLANN'
}

export enum SocialFeedType {
  Instagram = 'INSTAGRAM',
  Tiktok = 'TIKTOK'
}

export type SocialIntegration = {
  readonly __typename: 'SocialIntegration';
  readonly context?: Maybe<SocialIntegrationContext>;
  readonly displayName: Scalars['String']['output'];
  readonly expiresIn?: Maybe<Scalars['Int']['output']>;
  readonly id: Scalars['String']['output'];
  readonly linkedUsernames: ReadonlyArray<Scalars['String']['output']>;
  readonly status: SocialIntegrationStatus;
  readonly type: SocialIntegrationType;
};

export type SocialIntegrationContext = FacebookSocialIntegrationContext | InstagramBusinessSocialIntegrationContext | InstagramSocialIntegrationContext | TikTokSocialBusinessIntegrationContext | TikTokSocialIntegrationContext;

export enum SocialIntegrationStatus {
  Expired = 'EXPIRED',
  Expiring = 'EXPIRING',
  Healthy = 'HEALTHY',
  InsufficientPermissions = 'INSUFFICIENT_PERMISSIONS',
  Unknown = 'UNKNOWN'
}

export enum SocialIntegrationType {
  Facebook = 'FACEBOOK',
  GoogleYoutube = 'GOOGLE_YOUTUBE',
  Instagram = 'INSTAGRAM',
  InstagramBusiness = 'INSTAGRAM_BUSINESS',
  Tiktok = 'TIKTOK',
  TiktokBusiness = 'TIKTOK_BUSINESS'
}

export type SocialIntegrationsFilterInput = {
  /** Only return Social Integrations that match this social-integration-id */
  readonly id?: InputMaybe<Scalars['String']['input']>;
  /** Only return Social Integrations that match this type */
  readonly type?: InputMaybe<SocialIntegrationType>;
  /** Only return Social Integrations that match these types */
  readonly types?: InputMaybe<ReadonlyArray<InputMaybe<SocialIntegrationType>>>;
};

export type SocialLink = {
  readonly __typename: 'SocialLink';
  readonly active?: Maybe<Scalars['Boolean']['output']>;
  readonly id?: Maybe<Scalars['String']['output']>;
  /** The most severe moderation action for this social-link */
  readonly moderationAction?: Maybe<Scalars['String']['output']>;
  readonly position?: Maybe<Scalars['Int']['output']>;
  readonly type: SocialLinkType;
  readonly url: Scalars['String']['output'];
};

export type SocialLinkInput = {
  readonly active?: InputMaybe<Scalars['Boolean']['input']>;
  readonly type: SocialLinkType;
  readonly url: Scalars['String']['input'];
};

export type SocialLinkReorderInput = {
  readonly socialLinks?: InputMaybe<ReadonlyArray<InputMaybe<SocialLinksReorder>>>;
};

export enum SocialLinkType {
  Airchat = 'AIRCHAT',
  Amazon = 'AMAZON',
  AndroidPlayStore = 'ANDROID_PLAY_STORE',
  AppleAppStore = 'APPLE_APP_STORE',
  AppleMusic = 'APPLE_MUSIC',
  ApplePodcast = 'APPLE_PODCAST',
  Bandcamp = 'BANDCAMP',
  Bandsintown = 'BANDSINTOWN',
  Bereal = 'BEREAL',
  Bluesky = 'BLUESKY',
  Cameo = 'CAMEO',
  Clubhouse = 'CLUBHOUSE',
  Depop = 'DEPOP',
  Discord = 'DISCORD',
  EmailAddress = 'EMAIL_ADDRESS',
  Etsy = 'ETSY',
  Facebook = 'FACEBOOK',
  Github = 'GITHUB',
  Instagram = 'INSTAGRAM',
  Kick = 'KICK',
  Lemon8 = 'LEMON8',
  Linkedin = 'LINKEDIN',
  Mastodon = 'MASTODON',
  Patreon = 'PATREON',
  Payment = 'PAYMENT',
  Phone = 'PHONE',
  Pinterest = 'PINTEREST',
  Poshmark = 'POSHMARK',
  Rednote = 'REDNOTE',
  Signal = 'SIGNAL',
  Snapchat = 'SNAPCHAT',
  Soundcloud = 'SOUNDCLOUD',
  Spotify = 'SPOTIFY',
  Substack = 'SUBSTACK',
  Telegram = 'TELEGRAM',
  Threads = 'THREADS',
  Tiktok = 'TIKTOK',
  Twitch = 'TWITCH',
  Twitter = 'TWITTER',
  Website = 'WEBSITE',
  Whatsapp = 'WHATSAPP',
  WhatsappChannel = 'WHATSAPP_CHANNEL',
  X = 'X',
  Youtube = 'YOUTUBE'
}

export type SocialLinksFilterInput = {
  readonly active?: InputMaybe<Scalars['Boolean']['input']>;
  /** Whether to exclude unsafe(BANNED) social links */
  readonly excludeUnsafe?: InputMaybe<Scalars['Boolean']['input']>;
};

export enum SocialLinksPosition {
  Bottom = 'BOTTOM',
  Top = 'TOP'
}

export type SocialLinksReorder = {
  readonly position: Scalars['Int']['input'];
  readonly type: SocialLinkType;
};

export type SocialNotificationAnalytics = {
  readonly __typename: 'SocialNotificationAnalytics';
  readonly lifetime?: Maybe<SocialNotificationLifetime>;
};

export type SocialNotificationAnalyticsInput = {
  readonly accountUuid?: InputMaybe<Scalars['String']['input']>;
  readonly socialNotificationConfigUuid?: InputMaybe<Scalars['String']['input']>;
};

export type SocialNotificationAnalyticsTrend = {
  readonly __typename: 'SocialNotificationAnalyticsTrend';
  readonly currentWeekCount: Scalars['Int']['output'];
  readonly trend: Scalars['Int']['output'];
};

export type SocialNotificationConfigActionInput = {
  readonly sendInstagramPrivateReply?: InputMaybe<SocialNotificationConfigActionSendInstagramPrivateReplyInput>;
  readonly sendInstagramPublicReply?: InputMaybe<SocialNotificationConfigActionSendInstagramPublicReplyInput>;
};

export type SocialNotificationConfigActionModel = {
  readonly __typename: 'SocialNotificationConfigActionModel';
  readonly sendInstagramPrivateReply?: Maybe<SocialNotificationConfigActionSendInstagramPrivateReplyModel>;
  readonly sendInstagramPublicReply?: Maybe<SocialNotificationConfigActionSendInstagramPublicReplyModel>;
};

export type SocialNotificationConfigActionSendInstagramPrivateReplyInput = {
  readonly linkBehavior?: InputMaybe<Scalars['String']['input']>;
  readonly linkButtonLabelText?: InputMaybe<Scalars['String']['input']>;
  readonly textMessage?: InputMaybe<Scalars['String']['input']>;
};

export type SocialNotificationConfigActionSendInstagramPrivateReplyModel = {
  readonly __typename: 'SocialNotificationConfigActionSendInstagramPrivateReplyModel';
  /** The behavior of the link in the DM message. LINKTREE_HIGHLIGHTED: Link to linktree profile, with associated link ID highlighted LINK_OFF: Link to the URL directly */
  readonly linkBehavior?: Maybe<Scalars['String']['output']>;
  /** The text on the DM message link button */
  readonly linkButtonLabelText?: Maybe<Scalars['String']['output']>;
  /** The text message */
  readonly textMessage?: Maybe<Scalars['String']['output']>;
};

export type SocialNotificationConfigActionSendInstagramPublicReplyInput = {
  readonly publicReplyEnabled?: InputMaybe<Scalars['Boolean']['input']>;
  readonly textMessages?: InputMaybe<ReadonlyArray<Scalars['String']['input']>>;
};

export type SocialNotificationConfigActionSendInstagramPublicReplyModel = {
  readonly __typename: 'SocialNotificationConfigActionSendInstagramPublicReplyModel';
  /** If set, we will reply to public comments. */
  readonly publicReplyEnabled?: Maybe<Scalars['Boolean']['output']>;
  /** List of possible text messages to choose from */
  readonly textMessages?: Maybe<ReadonlyArray<Scalars['String']['output']>>;
};

export type SocialNotificationConfigAssociatedCommerceAccountProductModel = {
  readonly __typename: 'SocialNotificationConfigAssociatedCommerceAccountProductModel';
  /** The ID of associated SoCo account product */
  readonly accountProductId?: Maybe<Scalars['String']['output']>;
  /** The title of the associated account product */
  readonly title?: Maybe<Scalars['String']['output']>;
};

export type SocialNotificationConfigAssociatedCommerceCollectionModel = {
  readonly __typename: 'SocialNotificationConfigAssociatedCommerceCollectionModel';
  /** The ID of associated SoCo collection */
  readonly collectionId?: Maybe<Scalars['String']['output']>;
  /** The title of the associated collection */
  readonly title?: Maybe<Scalars['String']['output']>;
};

export type SocialNotificationConfigAssociatedCommercePostModel = {
  readonly __typename: 'SocialNotificationConfigAssociatedCommercePostModel';
  /** The ID of associated SoCo post */
  readonly postId?: Maybe<Scalars['String']['output']>;
  /** The title of the associated post */
  readonly title?: Maybe<Scalars['String']['output']>;
};

export type SocialNotificationConfigAssociatedLinkModel = {
  readonly __typename: 'SocialNotificationConfigAssociatedLinkModel';
  /** The Monolith Link ID of the associated link */
  readonly linkId?: Maybe<Scalars['Int']['output']>;
  /** The title of the associated link */
  readonly title?: Maybe<Scalars['String']['output']>;
  /** The URL of the associated link */
  readonly url?: Maybe<Scalars['String']['output']>;
};

export type SocialNotificationConfigCoTriggerModel = {
  readonly __typename: 'SocialNotificationConfigCoTriggerModel';
  /** If this config is possible to be triggered at the same time with any other trigger */
  readonly isPossible: Scalars['Boolean']['output'];
  /** The IDs of possible triggered configs */
  readonly possibleTriggeredConfigIds?: Maybe<ReadonlyArray<Scalars['String']['output']>>;
};

export type SocialNotificationConfigModel = {
  readonly __typename: 'SocialNotificationConfigModel';
  /** Account UUID of the configuration owner */
  readonly accountUuid: Scalars['String']['output'];
  readonly action?: Maybe<SocialNotificationConfigActionModel>;
  readonly associatedCommerceAccountProduct?: Maybe<SocialNotificationConfigAssociatedCommerceAccountProductModel>;
  /**
   * The ID of associated SoCo account product
   * @deprecated Use associatedCommerceAccountProduct instead
   */
  readonly associatedCommerceAccountProductId?: Maybe<Scalars['String']['output']>;
  readonly associatedCommerceCollection?: Maybe<SocialNotificationConfigAssociatedCommerceCollectionModel>;
  /**
   * The ID of associated SoCo collection
   * @deprecated Use associatedCommerceCollection instead
   */
  readonly associatedCommerceCollectionId?: Maybe<Scalars['String']['output']>;
  readonly associatedCommercePost?: Maybe<SocialNotificationConfigAssociatedCommercePostModel>;
  /**
   * The ID of associated SoCo post
   * @deprecated Use associatedCommercePost instead
   */
  readonly associatedCommercePostId?: Maybe<Scalars['String']['output']>;
  readonly associatedLink?: Maybe<SocialNotificationConfigAssociatedLinkModel>;
  /**
   * The Monolith Link ID of the associated link
   * @deprecated Use associatedLink instead
   */
  readonly associatedLinkId?: Maybe<Scalars['Int']['output']>;
  /** The tr.ee short-link URL of the associated object */
  readonly associatedLinkShortLinkUrl?: Maybe<Scalars['String']['output']>;
  /** The tr.ee short-link UUID of the associated object */
  readonly associatedLinkShortLinkUuid?: Maybe<Scalars['String']['output']>;
  readonly coTrigger?: Maybe<SocialNotificationConfigCoTriggerModel>;
  /** Date when the configuration was created */
  readonly createdAt?: Maybe<Scalars['DateTime']['output']>;
  /** Cursor of the configuration */
  readonly cursor?: Maybe<Scalars['String']['output']>;
  /** ID (UUID) of the social-notification configuration */
  readonly id: Scalars['String']['output'];
  /** Instagram business account ID. Must be set if socialIntegrationType is FACEBOOK */
  readonly instagramBusinessAccountId?: Maybe<Scalars['String']['output']>;
  /** Detailed reason if status is INVALID */
  readonly invalidReasons?: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  /** Priority of the configuration. Higher priority meaning higher rank. */
  readonly priority?: Maybe<Scalars['Int']['output']>;
  /** Linktree social integration ID (UUID). */
  readonly socialIntegrationId?: Maybe<Scalars['String']['output']>;
  /** Linktree social integration type, such as FACEBOOK, TIKTOK. */
  readonly socialIntegrationType?: Maybe<Scalars['String']['output']>;
  /** The owner identifier in the external social platform. For example of Instagram, it is the IGSID (https://developers.facebook.com/docs/messenger-platform/instagram/features/user-profile/), such as "IGSID:17841405309211844" */
  readonly socialPlatformExternalOwnerId?: Maybe<Scalars['String']['output']>;
  /** Status of the configuration, such as ACTIVE, INACTIVE, INAVLID, etc */
  readonly status?: Maybe<Scalars['String']['output']>;
  readonly trigger?: Maybe<SocialNotificationConfigTriggerModel>;
  /** Trigger type, such as "instagram_comments", "instagram_mentions", etc. Different social platform can have its own trigger type. */
  readonly triggerType?: Maybe<Scalars['String']['output']>;
  /** Date when the configuration was last updated */
  readonly updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type SocialNotificationConfigSortBy = {
  readonly direction: LtFollowersApiOrderByDirection;
  readonly key: SocialNotificationConfigSortByKey;
};

/** The key to sort the social notification configs. */
export enum SocialNotificationConfigSortByKey {
  DeactivatedAt = 'DEACTIVATED_AT',
  Priority = 'PRIORITY'
}

export type SocialNotificationConfigTriggerInput = {
  readonly commentEvalPrompt?: InputMaybe<Scalars['String']['input']>;
  readonly commentKeywordsExclude?: InputMaybe<ReadonlyArray<Scalars['String']['input']>>;
  readonly commentKeywordsInclude?: InputMaybe<ReadonlyArray<Scalars['String']['input']>>;
  readonly matchedMediaThumbnailUrl?: InputMaybe<Scalars['String']['input']>;
  readonly postAll?: InputMaybe<Scalars['Boolean']['input']>;
  readonly postMediaIdMatch?: InputMaybe<Scalars['String']['input']>;
  readonly postNextAliveTimestampAfter?: InputMaybe<Scalars['DateTime']['input']>;
  readonly smartKeywordMatch?: InputMaybe<Scalars['Boolean']['input']>;
  readonly type: Scalars['String']['input'];
};

export type SocialNotificationConfigTriggerModel = {
  readonly __typename: 'SocialNotificationConfigTriggerModel';
  /** If set, we will use AI to determine by using the given prompt. */
  readonly commentEvalPrompt?: Maybe<Scalars['String']['output']>;
  /** If set, all comments having (any) given keywords are NOT qualified. If both commentKeywordsInclude and commentKeywordsExclude are set for the same keyword, the comments are NOT qualified. */
  readonly commentKeywordsExclude?: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  /** If set, only comments having (any) given keywords are qualified. */
  readonly commentKeywordsInclude?: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  /** If 'postMediaIdMatch' is set, this is the thumbnail URL for the selected media. */
  readonly matchedMediaThumbnailUrl?: Maybe<Scalars['String']['output']>;
  /** If set, will match all posts. */
  readonly postAll?: Maybe<Scalars['Boolean']['output']>;
  /** If set, only posts with media ID match are qualified. */
  readonly postMediaIdMatch?: Maybe<Scalars['String']['output']>;
  /** If set, the next (one) alive post created after this timestamp are qualified. */
  readonly postNextAliveTimestampAfter?: Maybe<Scalars['DateTime']['output']>;
  /** If set, we will use fuzzy match to determine if the comment matches the given keywords. */
  readonly smartKeywordMatch?: Maybe<Scalars['Boolean']['output']>;
  readonly type: Scalars['String']['output'];
};

export type SocialNotificationLifetime = {
  readonly __typename: 'SocialNotificationLifetime';
  readonly repliesSent?: Maybe<SocialNotificationLifetimeRepliesSent>;
  readonly repliesViewed?: Maybe<SocialNotificationLifetimeRepliesViewed>;
};

/** Lifetime analytics for social-notification replies been sent */
export type SocialNotificationLifetimeRepliesSent = {
  readonly __typename: 'SocialNotificationLifetimeRepliesSent';
  readonly total: Scalars['Int']['output'];
  readonly trend?: Maybe<SocialNotificationAnalyticsTrend>;
};

/** Lifetime analytics for sent social-notification replies been viewed */
export type SocialNotificationLifetimeRepliesViewed = {
  readonly __typename: 'SocialNotificationLifetimeRepliesViewed';
  readonly total: Scalars['Int']['output'];
  readonly trend?: Maybe<SocialNotificationAnalyticsTrend>;
};

export type SocialStyle = {
  readonly __typename: 'SocialStyle';
  readonly color?: Maybe<Scalars['String']['output']>;
};

export type SponsoredOffer = {
  readonly __typename: 'SponsoredOffer';
  readonly active: Scalars['Boolean']['output'];
  readonly category: ReadonlyArray<Scalars['String']['output']>;
  readonly commissionAmount?: Maybe<Scalars['Float']['output']>;
  readonly commissionCurrency?: Maybe<Scalars['String']['output']>;
  readonly commissionType?: Maybe<Scalars['String']['output']>;
  readonly createdAt: Scalars['DateTime']['output'];
  readonly eligibilityType?: Maybe<Scalars['String']['output']>;
  readonly eligibilityValue?: Maybe<Scalars['String']['output']>;
  readonly expiresAt?: Maybe<Scalars['DateTime']['output']>;
  readonly id: Scalars['String']['output'];
  readonly image?: Maybe<Scalars['String']['output']>;
  readonly isCurated?: Maybe<Scalars['Boolean']['output']>;
  readonly isNew?: Maybe<Scalars['Boolean']['output']>;
  readonly marketplace: Scalars['String']['output'];
  readonly metadata: SponsoredOfferMetadata;
  readonly offerId?: Maybe<Scalars['String']['output']>;
  readonly offerType: Scalars['String']['output'];
  readonly reviewStatus: SponsoredOfferReviewStatus;
  readonly scheduledAt?: Maybe<Scalars['DateTime']['output']>;
  readonly themeColor?: Maybe<Scalars['String']['output']>;
  readonly title: Scalars['String']['output'];
  readonly updatedAt: Scalars['DateTime']['output'];
  readonly url: Scalars['String']['output'];
  readonly vendor: Scalars['String']['output'];
};

export type SponsoredOfferArchive = {
  readonly __typename: 'SponsoredOfferArchive';
  readonly archivedCount?: Maybe<Scalars['Float']['output']>;
  readonly success?: Maybe<Scalars['String']['output']>;
};

export type SponsoredOfferInput = {
  readonly active?: InputMaybe<Scalars['Boolean']['input']>;
  readonly category: ReadonlyArray<Scalars['String']['input']>;
  readonly commissionAmount?: InputMaybe<Scalars['Int']['input']>;
  readonly commissionCurrency?: InputMaybe<Scalars['String']['input']>;
  readonly commissionType?: InputMaybe<Scalars['String']['input']>;
  readonly creatorFacingTermsAndConditions?: InputMaybe<Scalars['String']['input']>;
  readonly description: Scalars['String']['input'];
  readonly eligibilityType?: InputMaybe<Scalars['String']['input']>;
  readonly eligibilityValue?: InputMaybe<Scalars['String']['input']>;
  readonly expiresAt?: InputMaybe<Scalars['DateTime']['input']>;
  readonly id?: InputMaybe<Scalars['String']['input']>;
  readonly image?: InputMaybe<Scalars['String']['input']>;
  readonly marketplace: Scalars['String']['input'];
  readonly offerId?: InputMaybe<Scalars['String']['input']>;
  readonly offerType: Scalars['String']['input'];
  readonly reviewStatus?: InputMaybe<SponsoredOfferReviewStatus>;
  readonly scheduledAt?: InputMaybe<Scalars['DateTime']['input']>;
  readonly subtitle?: InputMaybe<Scalars['String']['input']>;
  readonly termsAndConditions?: InputMaybe<Scalars['String']['input']>;
  readonly themeColor?: InputMaybe<Scalars['String']['input']>;
  readonly title: Scalars['String']['input'];
  readonly url: Scalars['String']['input'];
  readonly vendor: Scalars['String']['input'];
};

export type SponsoredOfferMetadata = {
  readonly __typename: 'SponsoredOfferMetadata';
  readonly creatorFacingTermsAndConditions?: Maybe<Scalars['String']['output']>;
  readonly description: Scalars['String']['output'];
  readonly previewSubtitle?: Maybe<Scalars['String']['output']>;
  readonly previewTitle: Scalars['String']['output'];
  readonly termsAndConditions?: Maybe<Scalars['String']['output']>;
  readonly vendorIcon?: Maybe<Scalars['String']['output']>;
  readonly vendorThemeColor?: Maybe<Scalars['String']['output']>;
  readonly vendorTitle?: Maybe<Scalars['String']['output']>;
};

/** The review status of a sponsored offer */
export enum SponsoredOfferReviewStatus {
  Approved = 'APPROVED',
  Denied = 'DENIED',
  UnderReview = 'UNDER_REVIEW'
}

export type SponsoredOfferSubmissionInput = {
  readonly category?: ReadonlyArray<Scalars['String']['input']>;
  readonly commissionAmount?: InputMaybe<Scalars['Int']['input']>;
  readonly commissionCurrency?: InputMaybe<Scalars['String']['input']>;
  readonly commissionType?: InputMaybe<Scalars['String']['input']>;
  readonly creatorFacingTermsAndConditions?: InputMaybe<Scalars['String']['input']>;
  readonly description: Scalars['String']['input'];
  readonly eligibilityType?: InputMaybe<Scalars['String']['input']>;
  readonly eligibilityValue?: InputMaybe<Scalars['String']['input']>;
  readonly expiresAt?: InputMaybe<Scalars['DateTime']['input']>;
  readonly image?: InputMaybe<Scalars['String']['input']>;
  readonly marketplace: Scalars['String']['input'];
  readonly offerId?: InputMaybe<Scalars['String']['input']>;
  readonly offerType: Scalars['String']['input'];
  readonly scheduledAt?: InputMaybe<Scalars['DateTime']['input']>;
  readonly subtitle?: InputMaybe<Scalars['String']['input']>;
  readonly termsAndConditions?: InputMaybe<Scalars['String']['input']>;
  readonly themeColor?: InputMaybe<Scalars['String']['input']>;
  readonly title: Scalars['String']['input'];
  readonly url: Scalars['String']['input'];
  readonly vendor: Scalars['String']['input'];
};

export type SpotifyLinkContext = {
  readonly __typename: 'SpotifyLinkContext';
  readonly embedOption?: Maybe<LinkEmbedOptions>;
  readonly options: ReadonlyArray<SpotifyLinkOption>;
  readonly useLatestEpisode: Scalars['Boolean']['output'];
};


export type SpotifyLinkContextOptionsArgs = {
  evaluateGate?: InputMaybe<Scalars['Boolean']['input']>;
  includeHidden?: InputMaybe<Scalars['Boolean']['input']>;
};

export type SpotifyLinkContextInput = {
  readonly embedOption?: InputMaybe<LinkEmbedOptions>;
  readonly options?: InputMaybe<ReadonlyArray<SpotifyLinkOptionInput>>;
  readonly useLatestEpisode?: InputMaybe<Scalars['Boolean']['input']>;
};

export type SpotifyLinkOption = {
  readonly __typename: 'SpotifyLinkOption';
  readonly type: Scalars['String']['output'];
  readonly url?: Maybe<Scalars['String']['output']>;
  readonly visible: Scalars['Boolean']['output'];
};

export type SpotifyLinkOptionInput = {
  readonly type: Scalars['String']['input'];
  readonly url?: InputMaybe<Scalars['String']['input']>;
  readonly visible: Scalars['Boolean']['input'];
};

export type SpringIntegration = ServiceIntegration & {
  readonly __typename: 'SpringIntegration';
  readonly externalIntegrationId?: Maybe<Scalars['String']['output']>;
  readonly id: Scalars['String']['output'];
  readonly messages: ReadonlyArray<Maybe<Message>>;
  readonly status: ServiceIntegrationStatus;
  readonly title?: Maybe<Scalars['String']['output']>;
  readonly type: ServiceIntegrationType;
};

export type SpringLinkContext = {
  readonly __typename: 'SpringLinkContext';
  readonly embedOption?: Maybe<LinkEmbedOptions>;
  readonly message?: Maybe<Scalars['String']['output']>;
};

export type SpringLinkContextInput = {
  readonly embedOption?: InputMaybe<LinkEmbedOptions>;
  readonly message?: InputMaybe<Scalars['String']['input']>;
};

export type SquareApplication = {
  readonly __typename: 'SquareApplication';
  readonly applicationId: Scalars['String']['output'];
  readonly currencyCode: Scalars['String']['output'];
};

export type SquareIntegration = ServiceIntegration & {
  readonly __typename: 'SquareIntegration';
  readonly currencyCode?: Maybe<CurrencyCode>;
  readonly id: Scalars['String']['output'];
  readonly locationId?: Maybe<Scalars['String']['output']>;
  readonly messages: ReadonlyArray<Maybe<Message>>;
  readonly squareApplicationId?: Maybe<Scalars['String']['output']>;
  readonly squareIntegrationId?: Maybe<Scalars['String']['output']>;
  readonly status: ServiceIntegrationStatus;
  readonly title?: Maybe<Scalars['String']['output']>;
  readonly type: ServiceIntegrationType;
};

export type SquareLocation = {
  readonly __typename: 'SquareLocation';
  readonly id: Scalars['String']['output'];
  readonly title: Scalars['String']['output'];
};

export type StartChatkitRequest = {
  readonly useCase?: InputMaybe<Scalars['String']['input']>;
  readonly workflowId?: InputMaybe<Scalars['String']['input']>;
};

export type StartChatkitResponse = {
  readonly __typename: 'StartChatkitResponse';
  readonly clientSecret: Scalars['String']['output'];
  readonly expiresAt?: Maybe<Scalars['String']['output']>;
};

export type StoreProductFilterInput = {
  readonly accountProductIds?: InputMaybe<ReadonlyArray<Scalars['String']['input']>>;
};

export type StoreProductOptionsInput = {
  readonly shouldGenerateAffiliateUrl?: InputMaybe<Scalars['Boolean']['input']>;
};

export type StorefrontAnalytics = {
  readonly __typename: 'StorefrontAnalytics';
  readonly lifetime?: Maybe<StorefrontLifetime>;
};

export type StorefrontItemUnion = CommerceCollection | CommerceStoreProduct | CommerceStorefrontPost;

export type StorefrontLifetime = {
  readonly __typename: 'StorefrontLifetime';
  readonly clicks: StorefrontLifetimeClicks;
  readonly views: StorefrontLifetimeViews;
};

export type StorefrontLifetimeClicks = {
  readonly __typename: 'StorefrontLifetimeClicks';
  readonly total: Scalars['Int']['output'];
};

export type StorefrontLifetimeViews = {
  readonly __typename: 'StorefrontLifetimeViews';
  readonly total: Scalars['Int']['output'];
};

export type StripeBalance = {
  readonly __typename: 'StripeBalance';
  readonly available: Scalars['Int']['output'];
  readonly pending: Scalars['Int']['output'];
};

export type StripeIntegration = ServiceIntegration & {
  readonly __typename: 'StripeIntegration';
  readonly currencyCode?: Maybe<CurrencyCode>;
  readonly id: Scalars['String']['output'];
  readonly messages: ReadonlyArray<Maybe<Message>>;
  readonly status: ServiceIntegrationStatus;
  readonly stripeAccountId?: Maybe<Scalars['String']['output']>;
  readonly stripeIntegrationId?: Maybe<Scalars['String']['output']>;
  readonly title?: Maybe<Scalars['String']['output']>;
  readonly type: ServiceIntegrationType;
};

export type SubmitCommerceProductNotFoundFeedbackInput = {
  readonly accountUuid: Scalars['String']['input'];
  readonly feedbackText: Scalars['String']['input'];
};

export type SubmitCommerceProductNotFoundFeedbackOutput = {
  readonly __typename: 'SubmitCommerceProductNotFoundFeedbackOutput';
  readonly message?: Maybe<Scalars['String']['output']>;
  readonly success: Scalars['Boolean']['output'];
};

export type SubmitFormFieldInput = {
  readonly fieldId: Scalars['String']['input'];
  readonly label?: InputMaybe<Scalars['String']['input']>;
  readonly predefinedFormField?: InputMaybe<FormPredefinedFormField>;
  readonly type?: InputMaybe<FormFieldType>;
  readonly value?: InputMaybe<Scalars['JSON']['input']>;
};

export type SubmitFormInput = {
  readonly accountUuid: Scalars['String']['input'];
  readonly agreeToShare?: InputMaybe<Scalars['Boolean']['input']>;
  readonly communitySubscriptionId?: InputMaybe<Scalars['String']['input']>;
  readonly digitalDownloadProductId?: InputMaybe<Scalars['String']['input']>;
  readonly fields?: InputMaybe<ReadonlyArray<SubmitFormFieldInput>>;
  readonly followStatus?: InputMaybe<FollowStatus>;
  readonly followerId?: InputMaybe<Scalars['String']['input']>;
  readonly formId: Scalars['String']['input'];
  readonly kajabiCourseId?: InputMaybe<Scalars['String']['input']>;
  readonly payloadContext?: InputMaybe<PayloadContext>;
  readonly paymentListingId?: InputMaybe<Scalars['String']['input']>;
  /** If true, will resend the payment transactional email on existing success payment. Only apply when paymentListingId is provided. */
  readonly shouldResendPaymentTransactionalEmailOnExistingPayment?: InputMaybe<Scalars['Boolean']['input']>;
};

export type SubmitFormOutput = {
  readonly __typename: 'SubmitFormOutput';
  /** The asset status when the form submission requires some digital asset purchases, such as Kajabi course, by checking the paymentListingId from the submission input. */
  readonly assetStatus?: Maybe<AssetStatus>;
  readonly submission?: Maybe<FormSubmissionModel>;
};

export type SubscribeWeeklyDigestInput = {
  readonly email: Scalars['String']['input'];
  readonly subscribed: Scalars['Boolean']['input'];
};

export type SubscribedGateRule = {
  readonly __typename: 'SubscribedGateRule';
  readonly message?: Maybe<Scalars['String']['output']>;
};

export type SubscribedGateRuleInput = {
  readonly message?: InputMaybe<Scalars['String']['input']>;
};

export type SubscribedModel = {
  readonly __typename: 'SubscribedModel';
  readonly subscribed: Scalars['Boolean']['output'];
};

export type SubscribersAnalytics = {
  readonly __typename: 'SubscribersAnalytics';
  readonly emailSubscribers?: Maybe<ReadonlyArray<Maybe<SubscribersAnalyticsRange>>>;
  readonly interval?: Maybe<Scalars['String']['output']>;
  readonly smsSubscribers?: Maybe<ReadonlyArray<Maybe<SubscribersAnalyticsRange>>>;
  readonly subscribers?: Maybe<ReadonlyArray<Maybe<SubscribersAnalyticsRange>>>;
  readonly total?: Maybe<SubscribersRangeTotal>;
};

export type SubscribersAnalyticsRange = {
  readonly __typename: 'SubscribersAnalyticsRange';
  readonly date: Scalars['String']['output'];
  readonly notifications?: Maybe<ReadonlyArray<Maybe<Notification>>>;
  readonly subscribersClicks: Scalars['Int']['output'];
  readonly subscribersTotal: Scalars['Int']['output'];
};

export type SubscribersRangeTotal = {
  readonly __typename: 'SubscribersRangeTotal';
  readonly clicks?: Maybe<Scalars['Int']['output']>;
  readonly ctr?: Maybe<Scalars['Float']['output']>;
  readonly notificationRecipients?: Maybe<Scalars['Int']['output']>;
  readonly subscribers?: Maybe<Scalars['Int']['output']>;
};

export type Subscription = {
  readonly __typename: 'Subscription';
  readonly addOns: ReadonlyArray<SubscriptionAddOn>;
  readonly coupon?: Maybe<Coupon>;
  readonly couponId?: Maybe<Scalars['String']['output']>;
  readonly hasScheduledChanges: Scalars['Boolean']['output'];
  readonly id: Scalars['Int']['output'];
  readonly isActive: Scalars['Boolean']['output'];
  readonly isNonRenewing: Scalars['Boolean']['output'];
  readonly isPaused: Scalars['Boolean']['output'];
  readonly isPausing: Scalars['Boolean']['output'];
  readonly isPro: Scalars['Boolean']['output'];
  readonly pauseEnd?: Maybe<Scalars['Date']['output']>;
  readonly pauseStart?: Maybe<Scalars['Date']['output']>;
  readonly paygateId?: Maybe<Scalars['String']['output']>;
  readonly paygateStatus?: Maybe<Scalars['String']['output']>;
  readonly paymentMethod: Scalars['String']['output'];
  readonly periodEnd?: Maybe<Scalars['Date']['output']>;
  readonly periodStart?: Maybe<Scalars['Date']['output']>;
  readonly plan?: Maybe<Scalars['String']['output']>;
  readonly platform?: Maybe<SubscriptionPlatform>;
  readonly subscriptionMigration?: Maybe<SubscriptionMigration>;
};

export type SubscriptionAddOn = {
  readonly __typename: 'SubscriptionAddOn';
  readonly product: SubscriptionAddOnProduct;
  readonly productId: Scalars['String']['output'];
  readonly quantity: Scalars['Int']['output'];
};

export type SubscriptionAddOnProduct = {
  readonly __typename: 'SubscriptionAddOnProduct';
  readonly currency: Scalars['String']['output'];
  readonly displayName: Scalars['String']['output'];
  readonly frequency: Scalars['String']['output'];
  readonly id: Scalars['String']['output'];
  readonly name: Scalars['String']['output'];
  readonly price: Scalars['Int']['output'];
};

export type SubscriptionAddOnProductResponse = {
  readonly __typename: 'SubscriptionAddOnProductResponse';
  readonly currency: Scalars['String']['output'];
  readonly displayName: Scalars['String']['output'];
  readonly frequency: Scalars['String']['output'];
  readonly id: Scalars['String']['output'];
  readonly name: Scalars['String']['output'];
  readonly price: Scalars['Int']['output'];
};

export type SubscriptionEstimateResponse = {
  readonly __typename: 'SubscriptionEstimateResponse';
  /** @deprecated This field will be deprecated to avoid integer overflow, use amountDueString instead */
  readonly amountDue?: Maybe<Scalars['Int']['output']>;
  readonly amountDueString?: Maybe<Scalars['String']['output']>;
  readonly dateFrom?: Maybe<Scalars['Int']['output']>;
  readonly dateTo?: Maybe<Scalars['Int']['output']>;
  readonly description?: Maybe<Scalars['String']['output']>;
  readonly formattedAmountDue?: Maybe<Scalars['String']['output']>;
  readonly formattedTaxAmount?: Maybe<Scalars['String']['output']>;
  readonly formattedTotal?: Maybe<Scalars['String']['output']>;
  readonly formattedTotalFrequency?: Maybe<Scalars['String']['output']>;
  readonly isTaxed?: Maybe<Scalars['Boolean']['output']>;
  readonly nextBillingAt?: Maybe<Scalars['Int']['output']>;
  readonly planId?: Maybe<Scalars['String']['output']>;
  readonly remainingDays?: Maybe<Scalars['Int']['output']>;
  readonly taxAmount?: Maybe<Scalars['Int']['output']>;
  readonly taxExemptReason?: Maybe<Scalars['String']['output']>;
  readonly taxRate?: Maybe<Scalars['Float']['output']>;
  /** @deprecated This field will be deprecated to avoid integer overflow, use totalString instead */
  readonly total?: Maybe<Scalars['Int']['output']>;
  readonly totalString?: Maybe<Scalars['String']['output']>;
};

export type SubscriptionMigration = {
  readonly __typename: 'SubscriptionMigration';
  readonly createdAt?: Maybe<Scalars['Date']['output']>;
  readonly id: Scalars['Int']['output'];
  readonly legacyPriceInCents: Scalars['Int']['output'];
  readonly migratedAt?: Maybe<Scalars['Date']['output']>;
  readonly newPriceInCents?: Maybe<Scalars['Int']['output']>;
  readonly path?: Maybe<MigrationPath>;
  readonly scheduledAt?: Maybe<Scalars['Date']['output']>;
  readonly status?: Maybe<MigrationStatus>;
  readonly updatedAt?: Maybe<Scalars['Date']['output']>;
};

export enum SubscriptionPlatform {
  Android = 'android',
  Ios = 'ios',
  Web = 'web'
}

export type SubscriptionV1 = {
  readonly __typename: 'SubscriptionV1';
  readonly addOns: ReadonlyArray<SubscriptionAddOn>;
  readonly coupon?: Maybe<Coupon>;
  readonly couponId?: Maybe<Scalars['String']['output']>;
  readonly hasScheduledChanges: Scalars['Boolean']['output'];
  readonly id: Scalars['Int']['output'];
  readonly isActive: Scalars['Boolean']['output'];
  readonly isNonRenewing: Scalars['Boolean']['output'];
  readonly isPaused: Scalars['Boolean']['output'];
  readonly isPausing: Scalars['Boolean']['output'];
  readonly isPro: Scalars['Boolean']['output'];
  readonly pauseEnd?: Maybe<Scalars['Date']['output']>;
  readonly pauseStart?: Maybe<Scalars['Date']['output']>;
  readonly paygateId?: Maybe<Scalars['String']['output']>;
  readonly paygateStatus?: Maybe<Scalars['String']['output']>;
  readonly paymentMethod: Scalars['String']['output'];
  readonly periodEnd?: Maybe<Scalars['Date']['output']>;
  readonly periodStart?: Maybe<Scalars['Date']['output']>;
  readonly plan?: Maybe<Scalars['String']['output']>;
  readonly platform?: Maybe<SubscriptionPlatform>;
  readonly subscriptionMigration?: Maybe<SubscriptionMigration>;
};

export type SubscriptionV2 = {
  readonly __typename: 'SubscriptionV2';
  readonly accountIds?: Maybe<ReadonlyArray<Maybe<Scalars['Int']['output']>>>;
  readonly accountLimit?: Maybe<Scalars['Int']['output']>;
  readonly activeAccount?: Maybe<Account>;
  readonly addOns?: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  readonly card?: Maybe<Card>;
  readonly coupon?: Maybe<Coupon>;
  readonly couponId?: Maybe<Scalars['String']['output']>;
  readonly hasScheduledChanges: Scalars['Boolean']['output'];
  readonly id: Scalars['Int']['output'];
  readonly isActive: Scalars['Boolean']['output'];
  readonly isNonRenewing: Scalars['Boolean']['output'];
  readonly isPaused: Scalars['Boolean']['output'];
  readonly isPausing: Scalars['Boolean']['output'];
  readonly isPro: Scalars['Boolean']['output'];
  readonly pauseEnd?: Maybe<Scalars['Date']['output']>;
  readonly pauseStart?: Maybe<Scalars['Date']['output']>;
  readonly paygateId?: Maybe<Scalars['String']['output']>;
  readonly paygateStatus?: Maybe<Scalars['String']['output']>;
  readonly paymentMethod: Scalars['String']['output'];
  readonly periodEnd?: Maybe<Scalars['Date']['output']>;
  readonly periodStart?: Maybe<Scalars['Date']['output']>;
  readonly plan?: Maybe<Scalars['String']['output']>;
  readonly platform?: Maybe<SubscriptionPlatform>;
  readonly subscriptionAddOns: ReadonlyArray<SubscriptionAddOn>;
  readonly subscriptionMigration?: Maybe<SubscriptionMigration>;
};

export type TemplateLinkContext = {
  readonly __typename: 'TemplateLinkContext';
  readonly isIncompleteTemplateLink?: Maybe<Scalars['Boolean']['output']>;
  readonly recommendedLinkType?: Maybe<Scalars['String']['output']>;
  readonly recommendedLinkTypeId?: Maybe<Scalars['String']['output']>;
};

export type Theme = {
  readonly editable: Scalars['Boolean']['output'];
  readonly key: Scalars['ID']['output'];
};

export type ThemeV2 = {
  readonly __typename: 'ThemeV2';
  readonly background: Background;
  readonly buttonStyle: ButtonStyle;
  readonly editable: Scalars['Boolean']['output'];
  readonly key: Scalars['ID']['output'];
  readonly luminance: Luminance;
  readonly socialStyle: SocialStyle;
  readonly typeface: Typeface;
};

export enum ThemeVisibility {
  Deleted = 'DELETED',
  Draft = 'DRAFT',
  Public = 'PUBLIC'
}

export type ThreadsLinkContext = {
  readonly __typename: 'ThreadsLinkContext';
  readonly embedOption?: Maybe<LinkEmbedOptions>;
};

export type ThreadsLinkContextInput = {
  readonly embedOption?: InputMaybe<LinkEmbedOptions>;
};

export enum Tier {
  Free = 'free',
  Free1 = 'free1',
  Paid1 = 'paid1',
  Paid2 = 'paid2',
  Paid3 = 'paid3',
  Plus = 'plus',
  Pro = 'pro'
}

export type TikTokBusinessAccount = {
  readonly __typename: 'TikTokBusinessAccount';
  readonly profilePictureUrl: Scalars['String']['output'];
  readonly username: Scalars['String']['output'];
};

export type TikTokBusinessAnalytics = {
  readonly __typename: 'TikTokBusinessAnalytics';
  readonly insights: ReadonlyArray<TikTokInsights>;
};

export type TikTokBusinessAnalyticsInput = {
  readonly accountId: Scalars['Int']['input'];
  readonly includeDemographics?: Scalars['Boolean']['input'];
  readonly includePostsLatest?: Scalars['Boolean']['input'];
  readonly includeTimeseries?: Scalars['Boolean']['input'];
  readonly range: DateRangeInput;
  readonly tiktokBusinessIntegrationId: Scalars['String']['input'];
  readonly timezone: Scalars['String']['input'];
};

export type TikTokDemographics = {
  readonly __typename: 'TikTokDemographics';
  readonly age: ReadonlyArray<DemographicSegment>;
  readonly city: ReadonlyArray<DemographicCitySegment>;
  readonly country: ReadonlyArray<DemographicSegment>;
  readonly gender: ReadonlyArray<DemographicSegment>;
};

export type TikTokInsights = {
  readonly __typename: 'TikTokInsights';
  readonly engagedAudienceDemographics: ReadonlyArray<TikTokDemographics>;
  readonly postsLatest: ReadonlyArray<TikTokPostsLatest>;
  readonly timeseries: ReadonlyArray<TikTokTimeseries>;
  readonly userProfile: ReadonlyArray<TikTokUserProfile>;
};

export type TikTokJumpLinkContext = {
  readonly __typename: 'TikTokJumpLinkContext';
  readonly description?: Maybe<Scalars['String']['output']>;
  readonly firstProfile?: Maybe<Scalars['String']['output']>;
  readonly forthProfile?: Maybe<Scalars['String']['output']>;
  readonly secondProfile?: Maybe<Scalars['String']['output']>;
  readonly thirdProfile?: Maybe<Scalars['String']['output']>;
  readonly videoId?: Maybe<Scalars['String']['output']>;
};

export type TikTokJumpLinkContextInput = {
  readonly description?: InputMaybe<Scalars['String']['input']>;
  readonly firstProfile?: InputMaybe<Scalars['String']['input']>;
  readonly forthProfile?: InputMaybe<Scalars['String']['input']>;
  readonly secondProfile?: InputMaybe<Scalars['String']['input']>;
  readonly thirdProfile?: InputMaybe<Scalars['String']['input']>;
  readonly videoId?: InputMaybe<Scalars['String']['input']>;
};

export type TikTokLinkContext = {
  readonly __typename: 'TikTokLinkContext';
  readonly embedOption?: Maybe<LinkEmbedOptions>;
};

export type TikTokLinkContextInput = {
  readonly embedOption?: InputMaybe<LinkEmbedOptions>;
};

export type TikTokPaginatedVideos = {
  readonly __typename: 'TikTokPaginatedVideos';
  readonly cursor?: Maybe<Scalars['String']['output']>;
  readonly hasMore?: Maybe<Scalars['Boolean']['output']>;
  readonly items: ReadonlyArray<TikTokVideo>;
};

export type TikTokPostItem = {
  readonly __typename: 'TikTokPostItem';
  readonly commentsCount: Scalars['Int']['output'];
  readonly id?: Maybe<Scalars['String']['output']>;
  readonly likeCount: Scalars['Int']['output'];
  readonly mediaType?: Maybe<Scalars['String']['output']>;
  readonly mediaUrl?: Maybe<Scalars['String']['output']>;
  readonly sharesCount: Scalars['Int']['output'];
  readonly timestamp?: Maybe<Scalars['String']['output']>;
};

export type TikTokPostsLatest = {
  readonly __typename: 'TikTokPostsLatest';
  readonly items: ReadonlyArray<TikTokPostItem>;
};

export type TikTokProfile = {
  readonly __typename: 'TikTokProfile';
  readonly avatarUrl?: Maybe<Scalars['String']['output']>;
  readonly displayName?: Maybe<Scalars['String']['output']>;
  readonly followerCount?: Maybe<Scalars['Int']['output']>;
  readonly isVerified?: Maybe<Scalars['Boolean']['output']>;
  readonly likeCount?: Maybe<Scalars['Int']['output']>;
  readonly profileDeepLink?: Maybe<Scalars['String']['output']>;
  readonly unionId?: Maybe<Scalars['String']['output']>;
  readonly username: Scalars['String']['output'];
};

export type TikTokProfileLinkContext = {
  readonly __typename: 'TikTokProfileLinkContext';
  readonly embedOption?: Maybe<LinkEmbedOptions>;
  readonly tiktokIntegrationId?: Maybe<Scalars['String']['output']>;
  readonly videoIds?: Maybe<ReadonlyArray<Maybe<Scalars['String']['output']>>>;
};


export type TikTokProfileLinkContextTiktokIntegrationIdArgs = {
  evaluateGate?: InputMaybe<Scalars['Boolean']['input']>;
};


export type TikTokProfileLinkContextVideoIdsArgs = {
  evaluateGate?: InputMaybe<Scalars['Boolean']['input']>;
};

export type TikTokProfileLinkContextInput = {
  readonly embedOption?: InputMaybe<LinkEmbedOptions>;
  readonly tiktokIntegrationId?: InputMaybe<Scalars['String']['input']>;
  readonly videoIds?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']['input']>>>;
};

export type TikTokSocialBusinessIntegrationContext = {
  readonly __typename: 'TikTokSocialBusinessIntegrationContext';
  readonly tikTokBusinessAccount?: Maybe<TikTokBusinessAccount>;
  readonly type: Scalars['String']['output'];
};

export type TikTokSocialIntegrationContext = {
  readonly __typename: 'TikTokSocialIntegrationContext';
  readonly loginVersion: Scalars['Int']['output'];
  readonly profile: TikTokProfile;
  readonly videos: TikTokPaginatedVideos;
  readonly videosById: ReadonlyArray<TikTokVideo>;
};


export type TikTokSocialIntegrationContextVideosArgs = {
  cursor?: InputMaybe<Scalars['Int']['input']>;
  cursorString?: InputMaybe<Scalars['String']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
};


export type TikTokSocialIntegrationContextVideosByIdArgs = {
  ids: ReadonlyArray<Scalars['String']['input']>;
};

export type TikTokTimeseries = {
  readonly __typename: 'TikTokTimeseries';
  readonly date?: Maybe<Scalars['String']['output']>;
  /** Number of total followers at this date */
  readonly followersCount: Scalars['Int']['output'];
  /** Number of follows gained on this date */
  readonly followsCount: Scalars['Int']['output'];
  /** Status indicating any upstream API issues or data limitations */
  readonly status?: Maybe<Scalars['String']['output']>;
  /** Deprecated, use unfollowsCount instead */
  readonly unfollowersCount: Scalars['Int']['output'];
  /** Number of follows lost on this date */
  readonly unfollowsCount?: Maybe<Scalars['Int']['output']>;
};

export type TikTokUserProfile = {
  readonly __typename: 'TikTokUserProfile';
  /** Current social media profile followers count */
  readonly currentFollowersCount?: Maybe<Scalars['Int']['output']>;
  /** Deprecated, use currentFollowersCount instead */
  readonly followersCount: Scalars['Int']['output'];
  /** Deprecated, use rangeFollowsTotal instead */
  readonly followsCount: Scalars['Int']['output'];
  readonly id?: Maybe<Scalars['String']['output']>;
  readonly mediaCount: Scalars['Int']['output'];
  readonly name?: Maybe<Scalars['String']['output']>;
  readonly profilePictureUrl?: Maybe<Scalars['String']['output']>;
  /** Total followers gained from selected date range */
  readonly rangeFollowsTotal?: Maybe<Scalars['Int']['output']>;
  /** Total followers lost from selected date range */
  readonly rangeUnfollowsTotal?: Maybe<Scalars['Int']['output']>;
  /** Deprecated, use rangeUnfollowsTotal instead */
  readonly unfollowersCount: Scalars['Int']['output'];
  readonly username?: Maybe<Scalars['String']['output']>;
};

export type TikTokVideo = {
  readonly __typename: 'TikTokVideo';
  readonly coverImageUrl?: Maybe<Scalars['String']['output']>;
  readonly createTime?: Maybe<Scalars['Int']['output']>;
  readonly embedLink?: Maybe<Scalars['String']['output']>;
  readonly id?: Maybe<Scalars['String']['output']>;
  readonly shareUrl?: Maybe<Scalars['String']['output']>;
  readonly title?: Maybe<Scalars['String']['output']>;
  readonly videoDescription?: Maybe<Scalars['String']['output']>;
  readonly viewCount?: Maybe<Scalars['Int']['output']>;
};

export enum TipGiftEmoji {
  Beer = 'BEER',
  Cake = 'CAKE',
  Coffee = 'COFFEE',
  Gift = 'GIFT',
  Present = 'PRESENT',
  Taco = 'TACO'
}

export type TipGiftLinkContext = {
  readonly __typename: 'TipGiftLinkContext';
  readonly allowNote: Scalars['Boolean']['output'];
  readonly amount: Scalars['Int']['output'];
  readonly descriptionMessage?: Maybe<Scalars['String']['output']>;
  readonly emoji?: Maybe<TipGiftEmoji>;
  readonly helpCoverFees?: Maybe<Scalars['Boolean']['output']>;
  readonly serviceIntegration?: Maybe<ServiceIntegration>;
  readonly successMessage?: Maybe<Scalars['String']['output']>;
};

export type TipGiftLinkContextInput = {
  readonly allowNote?: InputMaybe<Scalars['Boolean']['input']>;
  readonly amount: Scalars['Int']['input'];
  readonly descriptionMessage?: InputMaybe<Scalars['String']['input']>;
  readonly emoji: TipGiftEmoji;
  readonly helpCoverFees?: InputMaybe<Scalars['Boolean']['input']>;
  readonly serviceIntegrationId?: InputMaybe<Scalars['String']['input']>;
  readonly successMessage?: InputMaybe<Scalars['String']['input']>;
};

export type ToggleGlowUpChangeInput = {
  readonly conversationId?: InputMaybe<Scalars['String']['input']>;
  readonly isToggled?: InputMaybe<Scalars['Boolean']['input']>;
  readonly toolId?: InputMaybe<Scalars['String']['input']>;
};

export type TriggerAddedVendorToCatalogInput = {
  readonly vendorSlugs: ReadonlyArray<Scalars['String']['input']>;
};

export type TriggerAddedVendorToCatalogResponse = {
  readonly __typename: 'TriggerAddedVendorToCatalogResponse';
  readonly failed: Scalars['Int']['output'];
  readonly results: ReadonlyArray<AddedVendorToCatalogResult>;
  readonly successful: Scalars['Int']['output'];
  readonly totalProcessed: Scalars['Int']['output'];
};

export type TwitchChannelLinkContext = {
  readonly __typename: 'TwitchChannelLinkContext';
  readonly autoplay?: Maybe<Scalars['Boolean']['output']>;
  readonly channelId?: Maybe<Scalars['String']['output']>;
  readonly embedOption?: Maybe<LinkEmbedOptions>;
  readonly mute?: Maybe<Scalars['Boolean']['output']>;
};

export type TwitchCollectionLinkContext = {
  readonly __typename: 'TwitchCollectionLinkContext';
  readonly autoplay?: Maybe<Scalars['Boolean']['output']>;
  readonly collectionId?: Maybe<Scalars['String']['output']>;
  readonly embedOption?: Maybe<LinkEmbedOptions>;
  readonly mute?: Maybe<Scalars['Boolean']['output']>;
  readonly videoId?: Maybe<Scalars['String']['output']>;
};

export type TwitchExtensionIntegrationContext = {
  readonly __typename: 'TwitchExtensionIntegrationContext';
  readonly hideTwitchTvLinks?: Maybe<Scalars['Boolean']['output']>;
};

export type TwitchLinkContext = {
  readonly __typename: 'TwitchLinkContext';
  readonly autoplay?: Maybe<Scalars['Boolean']['output']>;
  readonly embedOption?: Maybe<LinkEmbedOptions>;
  readonly mute?: Maybe<Scalars['Boolean']['output']>;
};

export type TwitchLinkContextInput = {
  readonly autoplay?: InputMaybe<Scalars['Boolean']['input']>;
  readonly embedOption?: InputMaybe<LinkEmbedOptions>;
  readonly mute?: InputMaybe<Scalars['Boolean']['input']>;
};

export type TwitchVideoLinkContext = {
  readonly __typename: 'TwitchVideoLinkContext';
  readonly autoplay?: Maybe<Scalars['Boolean']['output']>;
  readonly embedOption?: Maybe<LinkEmbedOptions>;
  readonly mute?: Maybe<Scalars['Boolean']['output']>;
  readonly videoId?: Maybe<Scalars['String']['output']>;
};

export type TwitterLinkContext = {
  readonly __typename: 'TwitterLinkContext';
  readonly embedOption?: Maybe<LinkEmbedOptions>;
};

export type TwitterLinkContextInput = {
  readonly embedOption?: InputMaybe<LinkEmbedOptions>;
};

export type Typeface = {
  readonly __typename: 'Typeface';
  readonly color?: Maybe<Scalars['String']['output']>;
  readonly family: Scalars['String']['output'];
  readonly fontSize: Scalars['Int']['output'];
  readonly fontWeights: ReadonlyArray<Scalars['Int']['output']>;
  readonly letterSpacing: Scalars['Float']['output'];
};

export type UgcContent = {
  readonly __typename: 'UgcContent';
  readonly active: Scalars['Boolean']['output'];
  /** The external social-platform identifier to the content. For example of Instagram post, it is the Instagram media ID, such as "17943020204369222" */
  readonly contentId: Scalars['String']['output'];
  readonly embedUrl?: Maybe<Scalars['String']['output']>;
  /** ID of the UGC content in Linktree database. It is in UUID format. It is not the external social-platform ID. */
  readonly id: Scalars['String']['output'];
  readonly integrationId?: Maybe<Scalars['String']['output']>;
  readonly position: Scalars['Float']['output'];
  readonly provider: Scalars['String']['output'];
  readonly thumbnailSrc: Scalars['String']['output'];
  readonly url: Scalars['String']['output'];
  readonly videoUrl?: Maybe<Scalars['String']['output']>;
};

export type UgcContentInput = {
  /** The external social-platform identifier to the content. For example of Instagram post, it is the Instagram media ID, such as "17943020204369222" */
  readonly contentId: Scalars['String']['input'];
  readonly embedUrl?: InputMaybe<Scalars['String']['input']>;
  readonly integrationId?: InputMaybe<Scalars['String']['input']>;
  readonly provider: Scalars['String']['input'];
  readonly thumbnailSrc: Scalars['String']['input'];
  readonly url: Scalars['String']['input'];
  readonly videoUrl?: InputMaybe<Scalars['String']['input']>;
};

export type UnfollowInput = {
  readonly token: Scalars['String']['input'];
};

export type UnfollowProfileInput = {
  readonly followerId: Scalars['String']['input'];
  readonly payloadContext?: InputMaybe<PayloadContext>;
  readonly unsubscribedFrom?: InputMaybe<Scalars['String']['input']>;
  readonly uuid: Scalars['String']['input'];
};

export type UnsubscribeDigestInput = {
  readonly token: Scalars['String']['input'];
};

export type UpdateAccountAppearanceInput = {
  readonly avatarMode?: InputMaybe<AvatarMode>;
  readonly avatarType?: InputMaybe<AvatarType>;
  readonly backgroundColor?: InputMaybe<Scalars['String']['input']>;
  readonly backgroundGradient?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']['input']>>>;
  readonly backgroundGradientStyle?: InputMaybe<BackgroundGradientStyle>;
  readonly backgroundHeroColor?: InputMaybe<Scalars['String']['input']>;
  readonly backgroundImage?: InputMaybe<Scalars['String']['input']>;
  readonly backgroundImageAttributes?: InputMaybe<Scalars['String']['input']>;
  readonly backgroundImageEffect?: InputMaybe<BackgroundImageEffect>;
  readonly backgroundNoise?: InputMaybe<Scalars['Boolean']['input']>;
  readonly backgroundPoster?: InputMaybe<Scalars['String']['input']>;
  readonly backgroundStyle?: InputMaybe<BackgroundStyle>;
  readonly backgroundTint?: InputMaybe<Scalars['Int']['input']>;
  readonly buttonColor?: InputMaybe<Scalars['String']['input']>;
  readonly buttonCornerStyle?: InputMaybe<Scalars['String']['input']>;
  readonly buttonShadowColor?: InputMaybe<Scalars['String']['input']>;
  readonly buttonShadowStyle?: InputMaybe<Scalars['String']['input']>;
  readonly buttonStyle?: InputMaybe<Scalars['String']['input']>;
  readonly buttonTextColor?: InputMaybe<Scalars['String']['input']>;
  readonly canvaAvatarDesignId?: InputMaybe<Scalars['String']['input']>;
  readonly canvaBackgroundDesignId?: InputMaybe<Scalars['String']['input']>;
  readonly colorSchema?: InputMaybe<ColorSchema>;
  readonly colorway?: InputMaybe<Scalars['String']['input']>;
  readonly colourway?: InputMaybe<Scalars['String']['input']>;
  readonly customAvatar?: InputMaybe<Scalars['String']['input']>;
  readonly customAvatarAttributes?: InputMaybe<Scalars['String']['input']>;
  readonly customAvatarVideo?: InputMaybe<Scalars['String']['input']>;
  readonly fontColor?: InputMaybe<Scalars['String']['input']>;
  readonly fontStyle?: InputMaybe<Scalars['String']['input']>;
  readonly headingColor?: InputMaybe<Scalars['String']['input']>;
  readonly headingEffect?: InputMaybe<HeadingEffect>;
  readonly headingFont?: InputMaybe<Scalars['String']['input']>;
  readonly headingLogo?: InputMaybe<Scalars['String']['input']>;
  readonly headingLogoSize?: InputMaybe<HeadingLogoSize>;
  readonly headingSize?: InputMaybe<HeadingSize>;
  readonly headingType?: InputMaybe<HeadingType>;
  readonly luminance?: InputMaybe<Scalars['String']['input']>;
  readonly profilePicture?: InputMaybe<Scalars['String']['input']>;
  readonly profilePictureUrl?: InputMaybe<Scalars['String']['input']>;
  readonly shadowColor?: InputMaybe<Scalars['String']['input']>;
  readonly whiteLabel?: InputMaybe<Scalars['Int']['input']>;
};

export type UpdateAccountInfoInput = {
  readonly realName: Scalars['String']['input'];
  readonly verticals: ReadonlyArray<Scalars['String']['input']>;
  readonly verticalsOther?: InputMaybe<Scalars['String']['input']>;
};

export type UpdateAccountTitleAndDescriptionInput = {
  readonly description?: InputMaybe<Scalars['String']['input']>;
  readonly pageTitle?: InputMaybe<Scalars['String']['input']>;
};

export type UpdateAffiliateTokenInput = {
  readonly advertiser?: InputMaybe<Scalars['String']['input']>;
  readonly aid?: InputMaybe<Scalars['String']['input']>;
  readonly program: Scalars['String']['input'];
  readonly token: Scalars['String']['input'];
};

export type UpdateAudienceManagerSubscriberTableSchemaColumnCheckedInput = {
  readonly accountUuid: Scalars['String']['input'];
  /** Mark these columns as checked by default. */
  readonly checkedColumnIds: ReadonlyArray<Scalars['String']['input']>;
  /** Mark these columns as unchecked by default. */
  readonly uncheckedColumnIds: ReadonlyArray<Scalars['String']['input']>;
};

export type UpdateAudienceManagerSubscriberTableSchemaColumnCheckedOutput = {
  readonly __typename: 'UpdateAudienceManagerSubscriberTableSchemaColumnCheckedOutput';
  readonly columnsPage?: Maybe<AudienceManagerSubscriberTableColumnModelPage>;
};

export type UpdateBaseThemeByKeyInput = {
  readonly avatarMode?: InputMaybe<Scalars['String']['input']>;
  readonly avatarType?: InputMaybe<Scalars['String']['input']>;
  readonly backgroundAssetUrl?: InputMaybe<Scalars['String']['input']>;
  readonly backgroundColor?: InputMaybe<Scalars['String']['input']>;
  readonly backgroundGradient?: InputMaybe<ReadonlyArray<Scalars['String']['input']>>;
  readonly backgroundGradientStyle?: InputMaybe<Scalars['String']['input']>;
  readonly backgroundHeroColor?: InputMaybe<Scalars['String']['input']>;
  readonly backgroundImageEffect?: InputMaybe<Scalars['String']['input']>;
  readonly backgroundNoise?: InputMaybe<Scalars['Boolean']['input']>;
  readonly backgroundPosterUrl?: InputMaybe<Scalars['String']['input']>;
  readonly backgroundStyle?: InputMaybe<Scalars['String']['input']>;
  readonly backgroundTint?: InputMaybe<Scalars['Int']['input']>;
  readonly buttonColor?: InputMaybe<Scalars['String']['input']>;
  readonly buttonCorners?: InputMaybe<Scalars['String']['input']>;
  readonly buttonShadow?: InputMaybe<Scalars['String']['input']>;
  readonly buttonShadowColor?: InputMaybe<Scalars['String']['input']>;
  readonly buttonStyle?: InputMaybe<Scalars['String']['input']>;
  readonly buttonTextColor?: InputMaybe<Scalars['String']['input']>;
  readonly colorPalette?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']['input']>>>;
  readonly colorSchema?: InputMaybe<Scalars['String']['input']>;
  readonly customAvatar?: InputMaybe<Scalars['String']['input']>;
  readonly customAvatarVideo?: InputMaybe<Scalars['String']['input']>;
  readonly fontColor?: InputMaybe<Scalars['String']['input']>;
  readonly fontStyle?: InputMaybe<Scalars['String']['input']>;
  readonly footerCustomColor?: InputMaybe<Scalars['String']['input']>;
  readonly footerLogoUrl?: InputMaybe<Scalars['String']['input']>;
  readonly footerUrl?: InputMaybe<Scalars['String']['input']>;
  readonly h1TextColor?: InputMaybe<Scalars['String']['input']>;
  readonly h2TextColor?: InputMaybe<Scalars['String']['input']>;
  readonly h3TextColor?: InputMaybe<Scalars['String']['input']>;
  readonly headingColor?: InputMaybe<Scalars['String']['input']>;
  readonly headingEffect?: InputMaybe<Scalars['String']['input']>;
  readonly headingFont?: InputMaybe<Scalars['String']['input']>;
  readonly headingLogo?: InputMaybe<Scalars['String']['input']>;
  readonly headingLogoSize?: InputMaybe<Scalars['String']['input']>;
  readonly headingSize?: InputMaybe<Scalars['String']['input']>;
  readonly headingType?: InputMaybe<Scalars['String']['input']>;
  readonly isEditable?: InputMaybe<Scalars['Boolean']['input']>;
  readonly luminance?: InputMaybe<Scalars['String']['input']>;
  readonly mouseCursor?: InputMaybe<Scalars['String']['input']>;
  readonly socialLinkColor?: InputMaybe<Scalars['String']['input']>;
  readonly tags?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']['input']>>>;
  readonly themeKey: Scalars['String']['input'];
  readonly thumbnailUrl?: InputMaybe<Scalars['String']['input']>;
  readonly tier?: InputMaybe<Scalars['String']['input']>;
  readonly title?: InputMaybe<Scalars['String']['input']>;
  /** The email of the operator updating the base theme */
  readonly updatingOperator?: InputMaybe<Scalars['String']['input']>;
  readonly visibility?: InputMaybe<ThemeVisibility>;
};

export type UpdateBaseThemeFromAccountThemeInput = {
  readonly accountId: Scalars['Int']['input'];
  readonly themeKey: Scalars['String']['input'];
  /** The email of the operator updating the base theme */
  readonly updatingOperator?: InputMaybe<Scalars['String']['input']>;
};

export type UpdateBioPreviousStateAccount = {
  readonly __typename: 'UpdateBioPreviousStateAccount';
  readonly description?: Maybe<Scalars['String']['output']>;
  readonly pageTitle?: Maybe<Scalars['String']['output']>;
};

export type UpdateCommerceBrandProfileCollaborationInterestsArgs = {
  /** The account uuid of the brand profile owner */
  readonly accountUuid: Scalars['String']['input'];
  /** The collaboration types that the profile owner is interested in */
  readonly collaborationInterests: ReadonlyArray<CommerceBrandProfileCollaborationType>;
};

export type UpdateCommerceBrandProfileCreatorInfoArgs = {
  /** The account uuid of the brand profile owner */
  readonly accountUuid: Scalars['String']['input'];
  /** The brand profiles bio section */
  readonly bio?: InputMaybe<Scalars['String']['input']>;
  /** The brand profiles location */
  readonly location?: InputMaybe<Scalars['String']['input']>;
  /** The brand profile's selected content categories */
  readonly selectedCategories: ReadonlyArray<CommerceBrandProfileCategories>;
};

export type UpdateCommerceBrandProfileMailingAddressArgs = {
  /** The account uuid of the brand profile owner */
  readonly accountUuid: Scalars['String']['input'];
  readonly city?: InputMaybe<Scalars['String']['input']>;
  readonly state?: InputMaybe<Scalars['String']['input']>;
  readonly street?: InputMaybe<Scalars['String']['input']>;
  readonly zipcode?: InputMaybe<Scalars['String']['input']>;
};

export type UpdateCommerceBrandProfilePersonalInfoArgs = {
  /** The account uuid of the brand profile owner */
  readonly accountUuid: Scalars['String']['input'];
  readonly birthday?: InputMaybe<Scalars['DateTime']['input']>;
  readonly email?: InputMaybe<Scalars['String']['input']>;
  readonly fullName?: InputMaybe<Scalars['String']['input']>;
  readonly gender?: InputMaybe<CommerceBrandProfileGender>;
  readonly phone?: InputMaybe<Scalars['String']['input']>;
};

export type UpdateCommerceBrandProfilePreviousCollaborationsArgs = {
  /** The account uuid of the brand profile owner */
  readonly accountUuid: Scalars['String']['input'];
  /** The previous collaborations to update */
  readonly previousCollaborations: ReadonlyArray<CommerceBrandProfilePreviousCollaborationInput>;
};

export type UpdateCommerceBrandProfileProfessionalInformationArgs = {
  /** The account uuid of the brand profile owner */
  readonly accountUuid: Scalars['String']['input'];
  readonly jobTitle?: InputMaybe<Scalars['String']['input']>;
  readonly languages?: InputMaybe<ReadonlyArray<Scalars['String']['input']>>;
  readonly occupation?: InputMaybe<Scalars['String']['input']>;
};

export type UpdateFormFieldInput = {
  readonly accountUuid: Scalars['String']['input'];
  readonly formFieldId: Scalars['String']['input'];
  readonly formId: Scalars['String']['input'];
  /** Updating the label of the field. This will impact all the forms using this field. */
  readonly label?: InputMaybe<Scalars['String']['input']>;
  /** Updating the options of the field. Only apply for pptions for SELECT, or RADIO. This will impact all the forms using this field. */
  readonly options?: InputMaybe<ReadonlyArray<Scalars['String']['input']>>;
  /** Updating the requiredness of this field in the form. */
  readonly required?: InputMaybe<Scalars['Boolean']['input']>;
};

export type UpdateFormFieldOutput = {
  readonly __typename: 'UpdateFormFieldOutput';
  readonly formField?: Maybe<FormFieldModel>;
};

export type UpdateFormInput = {
  readonly accountUuid: Scalars['String']['input'];
  readonly customTermsConditionsEnabled?: InputMaybe<Scalars['Boolean']['input']>;
  readonly customTermsConditionsLinkLabel?: InputMaybe<Scalars['String']['input']>;
  readonly customTermsConditionsLinkUrl?: InputMaybe<Scalars['String']['input']>;
  readonly description?: InputMaybe<Scalars['String']['input']>;
  readonly formId: Scalars['String']['input'];
  readonly name?: InputMaybe<Scalars['String']['input']>;
  readonly thankYouMessage?: InputMaybe<Scalars['String']['input']>;
};

export type UpdateFormOutput = {
  readonly __typename: 'UpdateFormOutput';
  readonly form?: Maybe<FormModel>;
};

export type UpdateInAppSubscriptionResult = {
  readonly __typename: 'UpdateInAppSubscriptionResult';
  readonly user?: Maybe<User>;
};

export type UpdateLinkInput = {
  readonly active?: InputMaybe<Scalars['Boolean']['input']>;
  readonly isTitleAiGenerated?: InputMaybe<Scalars['Boolean']['input']>;
  readonly status?: InputMaybe<LinkStatus>;
  readonly title?: InputMaybe<Scalars['String']['input']>;
  readonly url?: InputMaybe<Scalars['String']['input']>;
};

export type UpdateLinkTitlePreviousStateLink = {
  readonly __typename: 'UpdateLinkTitlePreviousStateLink';
  readonly linkId: Scalars['Int']['output'];
  readonly title?: Maybe<Scalars['String']['output']>;
};

export type UpdateMailchimpIntegrationInput = {
  readonly id: Scalars['String']['input'];
  readonly title?: InputMaybe<Scalars['String']['input']>;
};

export type UpdateProcessedCustomVideoInput = {
  readonly accountUuid?: InputMaybe<Scalars['String']['input']>;
  readonly hlsUrl?: InputMaybe<Scalars['String']['input']>;
  readonly linkId?: InputMaybe<Scalars['Int']['input']>;
  readonly originalFileName?: InputMaybe<Scalars['String']['input']>;
  readonly originalUrl?: InputMaybe<Scalars['String']['input']>;
  readonly updatedUrl?: InputMaybe<Scalars['String']['input']>;
  readonly userUuid?: InputMaybe<Scalars['String']['input']>;
  readonly videoType?: InputMaybe<ProcessedCustomVideoType>;
};

export type UpdateProcessedCustomVideoResult = {
  readonly __typename: 'UpdateProcessedCustomVideoResult';
  readonly result?: Maybe<Scalars['String']['output']>;
};

export type UpdateScheduledNotificationInput = {
  readonly accountUuid: Scalars['String']['input'];
  readonly linkId: Scalars['Int']['input'];
  readonly scheduledAt: Scalars['DateTime']['input'];
  readonly scheduledAtTimezone?: InputMaybe<Scalars['String']['input']>;
};

export type UpdateShopifyIntegrationInput = {
  readonly id: Scalars['String']['input'];
  readonly title?: InputMaybe<Scalars['String']['input']>;
};

export type UpdateSocialFeedMutationInput = {
  readonly active?: InputMaybe<Scalars['Boolean']['input']>;
  readonly layout?: InputMaybe<SocialFeedLayoutType>;
  readonly socialIntegrationId?: InputMaybe<Scalars['String']['input']>;
  readonly title?: InputMaybe<Scalars['String']['input']>;
};

export type UpdateSocialFeedPostMediaLinkMutationInput = {
  readonly active?: InputMaybe<Scalars['Boolean']['input']>;
  readonly coordinates?: InputMaybe<SocialFeedPostMediaLinkCoordinatesInput>;
  readonly position?: InputMaybe<Scalars['Int']['input']>;
  readonly title?: InputMaybe<Scalars['String']['input']>;
  readonly url?: InputMaybe<Scalars['String']['input']>;
};

export type UpdateSocialFeedPostMediaMutationInput = {
  readonly mediaUrl?: InputMaybe<Scalars['String']['input']>;
  readonly thumbnailUrl?: InputMaybe<Scalars['String']['input']>;
};

export type UpdateSocialFeedPostMutationInput = {
  readonly caption?: InputMaybe<Scalars['String']['input']>;
  readonly mediaUrl?: InputMaybe<Scalars['String']['input']>;
  readonly pinned?: InputMaybe<Scalars['Boolean']['input']>;
  readonly thumbnailUrl?: InputMaybe<Scalars['String']['input']>;
  readonly url?: InputMaybe<Scalars['String']['input']>;
  readonly visible?: InputMaybe<Scalars['Boolean']['input']>;
};

export type UpdateSocialIntegrationInput = {
  readonly displayName?: InputMaybe<Scalars['String']['input']>;
  readonly id: Scalars['String']['input'];
  readonly type: SocialIntegrationType;
};

export type UpdateSocialLinksPositionInput = {
  readonly socialLinksPosition: SocialLinksPosition;
};

export type UpdateSocialLinksPositionResult = {
  readonly __typename: 'UpdateSocialLinksPositionResult';
  readonly user?: Maybe<User>;
};

export type UpdateSocialLinksResult = {
  readonly __typename: 'UpdateSocialLinksResult';
  readonly user?: Maybe<User>;
};

export type UpdateSocialNotificationConfigInput = {
  readonly accountUuid: Scalars['String']['input'];
  /** New action. NOTE you must provide the full action, we do not support updating partial action */
  readonly action?: InputMaybe<SocialNotificationConfigActionInput>;
  /** Update the associated object to a SoCo account product */
  readonly associatedCommerceAccountProductId?: InputMaybe<Scalars['String']['input']>;
  /** Update the associated object to a SoCo collection */
  readonly associatedCommerceCollectionId?: InputMaybe<Scalars['String']['input']>;
  /** Update the associated object to a SoCo post */
  readonly associatedCommercePostId?: InputMaybe<Scalars['String']['input']>;
  /** Update the associated object to a Monolith Link */
  readonly associatedLinkId?: InputMaybe<Scalars['Int']['input']>;
  readonly id: Scalars['String']['input'];
  /** New status of the configuration, such as ACTIVE, INACTIVE, etc */
  readonly status?: InputMaybe<Scalars['String']['input']>;
  /** New trigger. NOTE you must provide the full trigger, we do not support updating partial trigger */
  readonly trigger?: InputMaybe<SocialNotificationConfigTriggerInput>;
};

export type UpdateSocialNotificationConfigOutput = {
  readonly __typename: 'UpdateSocialNotificationConfigOutput';
  readonly config: SocialNotificationConfigModel;
};

export type UpdateSocialNotificationConfigSocialIntegrationInput = {
  readonly accountUuid: Scalars['String']['input'];
  readonly id: Scalars['String']['input'];
  /** Instagram business account ID. Must be set if socialIntegrationType is FACEBOOK */
  readonly instagramBusinessAccountId?: InputMaybe<Scalars['String']['input']>;
  /** Linktree social integration id */
  readonly socialIntegrationId: Scalars['String']['input'];
  /** Linktree social integration type, such as FACEBOOK, TIKTOK */
  readonly socialIntegrationType: Scalars['String']['input'];
};

export type UpdateSponsoredLinksResult = {
  readonly __typename: 'UpdateSponsoredLinksResult';
  readonly message?: Maybe<Scalars['String']['output']>;
  readonly success?: Maybe<Scalars['Boolean']['output']>;
  readonly updatedCount?: Maybe<Scalars['Int']['output']>;
};

export type UpdateSpringIntegrationInput = {
  readonly id: Scalars['String']['input'];
  readonly title?: InputMaybe<Scalars['String']['input']>;
};

export type UpdateSquareIntegrationInput = {
  readonly locationId: Scalars['ID']['input'];
  readonly title: Scalars['String']['input'];
};

export type UpdateSubscriptionAddOnInput = {
  readonly name: Scalars['String']['input'];
  readonly quantity: Scalars['Int']['input'];
};

export type UpdateSubscriptionAddOnResult = {
  readonly __typename: 'UpdateSubscriptionAddOnResult';
  readonly product: SubscriptionAddOnProduct;
  readonly quantity: Scalars['Int']['output'];
};

export type UpdateSubscriptionInput = {
  readonly corrilyPriceShown?: InputMaybe<Scalars['Boolean']['input']>;
  readonly currency: Scalars['String']['input'];
  readonly frequency: Scalars['String']['input'];
  readonly price?: InputMaybe<Scalars['Int']['input']>;
  readonly subscriptionId?: InputMaybe<Scalars['Int']['input']>;
  readonly tier: Scalars['String']['input'];
};

export type UpdateSubscriptionResult = {
  readonly __typename: 'UpdateSubscriptionResult';
  readonly user?: Maybe<User>;
};

export type UpdateSubscriptionV2ActiveAccountInput = {
  readonly activeAccountId: Scalars['Int']['input'];
  readonly subscriptionId: Scalars['Int']['input'];
};

export type UpdateSubscriptionV2Input = {
  readonly accountIds?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']['input']>>>;
  readonly currency: Scalars['String']['input'];
  readonly frequency: Scalars['String']['input'];
  readonly price?: InputMaybe<Scalars['Int']['input']>;
  readonly subscriptionId?: InputMaybe<Scalars['Int']['input']>;
  readonly tier: Scalars['String']['input'];
};

export type UpdateUserInput = {
  readonly email?: InputMaybe<Scalars['String']['input']>;
  readonly name?: InputMaybe<Scalars['String']['input']>;
};

export type UpdateUserPhoneNumberResult = {
  readonly __typename: 'UpdateUserPhoneNumberResult';
  readonly success?: Maybe<Scalars['Boolean']['output']>;
};

export type UpdateUserResult = {
  readonly __typename: 'UpdateUserResult';
  readonly success?: Maybe<Scalars['Boolean']['output']>;
};

export type UpdateVendorInput = {
  readonly affiliateLinkId?: InputMaybe<Scalars['String']['input']>;
  readonly categories?: InputMaybe<ReadonlyArray<Scalars['String']['input']>>;
  readonly commissionPercentageMax?: InputMaybe<Scalars['String']['input']>;
  readonly commissionPercentageMin?: InputMaybe<Scalars['String']['input']>;
  readonly defaultCommissionRate?: InputMaybe<Scalars['Float']['input']>;
  readonly fullDomain?: InputMaybe<Scalars['String']['input']>;
  readonly icon?: InputMaybe<Scalars['String']['input']>;
  readonly isActive?: InputMaybe<Scalars['Boolean']['input']>;
  readonly isVisible?: InputMaybe<Scalars['Boolean']['input']>;
  readonly label?: InputMaybe<Scalars['String']['input']>;
  readonly marketplace?: InputMaybe<Scalars['String']['input']>;
  readonly offerId?: InputMaybe<Scalars['String']['input']>;
  readonly productDomainPatterns?: InputMaybe<ReadonlyArray<Scalars['String']['input']>>;
  readonly redirectDomain?: InputMaybe<Scalars['String']['input']>;
  readonly searchWeight?: InputMaybe<Scalars['Float']['input']>;
  readonly themeColor?: InputMaybe<Scalars['String']['input']>;
  readonly url?: InputMaybe<Scalars['String']['input']>;
};

export type UpsertVendorInput = {
  readonly affiliateLinkId?: InputMaybe<Scalars['String']['input']>;
  readonly categories?: InputMaybe<ReadonlyArray<Scalars['String']['input']>>;
  readonly commissionPercentageMax?: InputMaybe<Scalars['String']['input']>;
  readonly commissionPercentageMin?: InputMaybe<Scalars['String']['input']>;
  readonly defaultCommissionRate?: InputMaybe<Scalars['Float']['input']>;
  readonly fullDomain?: InputMaybe<Scalars['String']['input']>;
  readonly icon: Scalars['String']['input'];
  readonly isActive?: InputMaybe<Scalars['Boolean']['input']>;
  readonly label: Scalars['String']['input'];
  readonly marketplace: Scalars['String']['input'];
  readonly offerId?: InputMaybe<Scalars['String']['input']>;
  readonly productDomainPatterns?: InputMaybe<ReadonlyArray<Scalars['String']['input']>>;
  readonly redirectDomain?: InputMaybe<Scalars['String']['input']>;
  readonly searchWeight?: InputMaybe<Scalars['Float']['input']>;
  readonly slug: Scalars['String']['input'];
  readonly themeColor?: InputMaybe<Scalars['String']['input']>;
  readonly url: Scalars['String']['input'];
  readonly vendorId: Scalars['String']['input'];
};

export type User = {
  readonly __typename: 'User';
  readonly accessToken?: Maybe<Scalars['String']['output']>;
  readonly accounts: ReadonlyArray<Account>;
  readonly bio?: Maybe<Scalars['String']['output']>;
  readonly businessAccount: Scalars['Boolean']['output'];
  readonly canChangeEmail?: Maybe<Scalars['Boolean']['output']>;
  readonly canCreateMultiProfile?: Maybe<Scalars['Boolean']['output']>;
  readonly canResetPassword?: Maybe<Scalars['Boolean']['output']>;
  readonly createdAt?: Maybe<Scalars['Date']['output']>;
  readonly deleted?: Maybe<Scalars['Boolean']['output']>;
  readonly email?: Maybe<Scalars['String']['output']>;
  readonly emailVerificationRequired?: Maybe<Scalars['Int']['output']>;
  readonly emailVerified?: Maybe<Scalars['Int']['output']>;
  readonly enabled?: Maybe<Scalars['Int']['output']>;
  /** @deprecated Use getUserEntitlementsQuery instead */
  readonly entitlements: UserEntitlements;
  readonly followedBy?: Maybe<Scalars['Int']['output']>;
  readonly following?: Maybe<Scalars['Int']['output']>;
  readonly hasSelectedPlan?: Maybe<Scalars['Int']['output']>;
  readonly id: Scalars['Int']['output'];
  readonly instagramId?: Maybe<Scalars['String']['output']>;
  readonly instagramUsername?: Maybe<Scalars['String']['output']>;
  readonly intercomHash?: Maybe<Scalars['String']['output']>;
  readonly isAccountOwner?: Maybe<Scalars['Boolean']['output']>;
  readonly isEmailVerified: Scalars['Boolean']['output'];
  readonly maskedEmail?: Maybe<Scalars['String']['output']>;
  readonly mediaCount?: Maybe<Scalars['Int']['output']>;
  readonly mfaEnrolmentUrl: Scalars['String']['output'];
  readonly mfaFactors: ReadonlyArray<MfaFactor>;
  /** @deprecated Use mfaFactors instead */
  readonly mfaStatus: Scalars['Boolean']['output'];
  readonly oauthId?: Maybe<Scalars['String']['output']>;
  readonly ownedAccounts: ReadonlyArray<Account>;
  readonly phoneNumber?: Maybe<Scalars['String']['output']>;
  readonly profilePicture?: Maybe<Scalars['String']['output']>;
  readonly realName?: Maybe<Scalars['String']['output']>;
  readonly selectedAccount?: Maybe<Account>;
  /** @deprecated We have achieved the goal of email uniqueness. This is always false. */
  readonly showMergeLinktrees: Scalars['Boolean']['output'];
  readonly signupMethod?: Maybe<Scalars['String']['output']>;
  readonly updatedAt?: Maybe<Scalars['Date']['output']>;
  readonly userWorkspaces: ReadonlyArray<WorkspaceUser>;
  readonly username?: Maybe<Scalars['String']['output']>;
  readonly uuid: Scalars['String']['output'];
  readonly website?: Maybe<Scalars['String']['output']>;
};


export type UserIntercomHashArgs = {
  platform?: InputMaybe<Scalars['String']['input']>;
};


export type UserSelectedAccountArgs = {
  isGlowUpPreview?: InputMaybe<Scalars['Boolean']['input']>;
};

export type UserAffinities = {
  readonly __typename: 'UserAffinities';
  readonly scrapedVendors: ReadonlyArray<Scalars['String']['output']>;
  readonly userIntentVendors: ReadonlyArray<Scalars['String']['output']>;
};

export type UserDetailsForChargehound = {
  readonly __typename: 'UserDetailsForChargehound';
  readonly cancelationDate?: Maybe<Scalars['String']['output']>;
  readonly customerCreatedAt: Scalars['String']['output'];
  readonly customerPurchasedIp?: Maybe<Scalars['String']['output']>;
  readonly pastPayments: ReadonlyArray<Maybe<PastPaymentsForChargehound>>;
  readonly planName: Scalars['String']['output'];
  readonly purchasedAt: Scalars['String']['output'];
  readonly subscriptionInterval: Scalars['String']['output'];
  readonly userName: Scalars['String']['output'];
};

export type UserEntitlement = {
  readonly __typename: 'UserEntitlement';
  readonly cacheType: CacheType;
  readonly isQualified: Scalars['Boolean']['output'];
  readonly name: UserEntitlementName;
  readonly quota?: Maybe<EntitlementQuota>;
  readonly requiredProduct?: Maybe<EntitlementProduct>;
  readonly type: EntitlementType;
};

export enum UserEntitlementName {
  MultiAccountCreation = 'MultiAccountCreation',
  PurchasePlannBrand = 'PurchasePlannBrand'
}

export type UserEntitlements = {
  readonly __typename: 'UserEntitlements';
  readonly isMultiAccountEligible: Scalars['Boolean']['output'];
};

export type UserFromEmailResult = {
  readonly __typename: 'UserFromEmailResult';
  readonly totalUsers: Scalars['Int']['output'];
  readonly user?: Maybe<User>;
};

export type UserStatus = {
  readonly __typename: 'UserStatus';
  readonly isDuplicateEmail: Scalars['Boolean']['output'];
  readonly isHalfSignup?: Maybe<Scalars['Boolean']['output']>;
  readonly isPasswordResetAllowed: Scalars['Boolean']['output'];
  readonly showOtpErrorMsg: Scalars['Boolean']['output'];
};

export type UserWorkspaceInvitation = {
  readonly __typename: 'UserWorkspaceInvitation';
  readonly createdAt?: Maybe<Scalars['Date']['output']>;
  readonly role: WorkspaceRole;
  readonly status: WorkspaceInvitationStatus;
  readonly updatedAt?: Maybe<Scalars['Date']['output']>;
  readonly user: User;
  readonly workspace: Workspace;
};

export type UsernameInput = {
  readonly username: Scalars['String']['input'];
};

export type UsernamePasswordInput = {
  readonly password: Scalars['String']['input'];
  readonly username: Scalars['String']['input'];
};

export type UtmParameter = {
  readonly __typename: 'UtmParameter';
  readonly isActive: Scalars['Boolean']['output'];
  readonly medium?: Maybe<Scalars['String']['output']>;
  readonly source?: Maybe<Scalars['String']['output']>;
};

export type ValidateGoogleSheetsIdResult = {
  readonly __typename: 'ValidateGoogleSheetsIdResult';
  /** Whether the provided Google Sheet ID is valid and accessible with the integration credentials. */
  readonly valid: Scalars['Boolean']['output'];
};

export type ValidateGoogleYouTubeResult = {
  readonly __typename: 'ValidateGoogleYouTubeResult';
  readonly isValid: Scalars['Boolean']['output'];
};

export type ValidationInput = {
  readonly acceptedSensitiveContent?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']['input']>>>;
  readonly age?: InputMaybe<Scalars['Int']['input']>;
  readonly followerId?: InputMaybe<Scalars['String']['input']>;
  readonly minAge?: InputMaybe<Scalars['Int']['input']>;
  readonly nft?: InputMaybe<NftInput>;
  readonly passcode?: InputMaybe<ReadonlyArray<InputMaybe<PasscodeInput>>>;
  readonly passcodeV2?: InputMaybe<PasscodeInput>;
  readonly password?: InputMaybe<ReadonlyArray<InputMaybe<PasswordInput>>>;
  readonly payment?: InputMaybe<Scalars['Boolean']['input']>;
  readonly subscribed?: InputMaybe<Scalars['Boolean']['input']>;
};

export enum Verification {
  Unverified = 'UNVERIFIED',
  Verified = 'VERIFIED'
}

export type VerifiedDeleteAccountResult = {
  readonly __typename: 'VerifiedDeleteAccountResult';
  readonly success: Scalars['Boolean']['output'];
};

export type VerifiedDeleteCurrentUserResult = {
  readonly __typename: 'VerifiedDeleteCurrentUserResult';
  readonly success: Scalars['Boolean']['output'];
};

export type VerifyEmailChangeOtpInput = {
  readonly otpCode: Scalars['String']['input'];
};

export type VerifyEmailChangeOtpResult = {
  readonly __typename: 'VerifyEmailChangeOtpResult';
  readonly error?: Maybe<Scalars['String']['output']>;
  readonly success: Scalars['Boolean']['output'];
};

export type VerifyEmailResult = {
  readonly __typename: 'VerifyEmailResult';
  readonly success?: Maybe<Scalars['Boolean']['output']>;
};

export type Version = {
  readonly __typename: 'Version';
  readonly sha: Scalars['String']['output'];
};

export type VideoBackground = {
  readonly __typename: 'VideoBackground';
  readonly color: Scalars['String']['output'];
  readonly imageUrl: Scalars['String']['output'];
  readonly noise: Scalars['Boolean']['output'];
  readonly posterUrl?: Maybe<Scalars['String']['output']>;
  readonly tint: Scalars['String']['output'];
  readonly type: BackgroundType;
};

export type VideoLinkContext = {
  readonly __typename: 'VideoLinkContext';
  readonly embedOption?: Maybe<LinkEmbedOptions>;
};

export type VideoLinkContextInput = {
  readonly embedOption?: InputMaybe<LinkEmbedOptions>;
};

export type ViewInput = {
  readonly geoTag?: InputMaybe<Scalars['String']['input']>;
  readonly isDefaultView?: InputMaybe<Scalars['Boolean']['input']>;
  readonly userUuid?: InputMaybe<Scalars['String']['input']>;
  readonly viewId?: InputMaybe<Scalars['Int']['input']>;
};

export type VimeoLinkContext = {
  readonly __typename: 'VimeoLinkContext';
  readonly autoplay?: Maybe<Scalars['Boolean']['output']>;
  readonly embedOption?: Maybe<LinkEmbedOptions>;
  readonly mute?: Maybe<Scalars['Boolean']['output']>;
};

export type VimeoLinkContextInput = {
  readonly autoplay?: InputMaybe<Scalars['Boolean']['input']>;
  readonly embedOption?: InputMaybe<LinkEmbedOptions>;
  readonly mute?: InputMaybe<Scalars['Boolean']['input']>;
};

export enum VisualLinkPreviewLayoutOption {
  Carousel = 'carousel',
  Featured = 'featured',
  FeaturedSubscribe = 'featuredSubscribe',
  Grid = 'grid',
  Stack = 'stack'
}

export type WallGateRule = {
  readonly __typename: 'WallGateRule';
  readonly enforced?: Maybe<LinkRuleFilter>;
};

export type Wallet = {
  readonly __typename: 'Wallet';
  readonly accountUuid: Scalars['String']['output'];
  readonly balances: ReadonlyArray<WalletBalance>;
  /**
   * Returns the affiliate connection if it exists, otherwise returns the first connection found for this account
   * @deprecated Use connections instead and select the connection you need
   */
  readonly connection?: Maybe<WalletConnection>;
  readonly connections: ReadonlyArray<WalletConnection>;
  readonly createdAt: Scalars['Float']['output'];
  readonly updatedAt?: Maybe<Scalars['Float']['output']>;
};

export type WalletBalance = {
  readonly __typename: 'WalletBalance';
  readonly amount: Scalars['Int']['output'];
  readonly createdAt: Scalars['Float']['output'];
  readonly currency: Scalars['Currency']['output'];
  readonly program: Scalars['String']['output'];
  readonly provider: Scalars['String']['output'];
  readonly updatedAt?: Maybe<Scalars['Float']['output']>;
};

export type WalletBalanceTransferJob = {
  readonly __typename: 'WalletBalanceTransferJob';
  readonly createdAt: Scalars['DateTime']['output'];
  readonly description?: Maybe<Scalars['String']['output']>;
  readonly id: Scalars['Int']['output'];
  readonly status: WalletBalanceTransferJobStatus;
  readonly type: WalletBalanceTransferJobType;
  readonly updatedAt: Scalars['DateTime']['output'];
};

export enum WalletBalanceTransferJobStatus {
  CompletedSuccessfully = 'COMPLETED_SUCCESSFULLY',
  CompletedWithErrors = 'COMPLETED_WITH_ERRORS',
  Idle = 'IDLE',
  Processing = 'PROCESSING'
}

export type WalletBalanceTransferJobSubject = {
  readonly __typename: 'WalletBalanceTransferJobSubject';
  readonly accountUuid: Scalars['String']['output'];
  readonly balance?: Maybe<Scalars['Int']['output']>;
  readonly createdAt: Scalars['DateTime']['output'];
  readonly currency?: Maybe<Scalars['String']['output']>;
  readonly id: Scalars['String']['output'];
  readonly jobId: Scalars['Int']['output'];
  readonly status: WalletBalanceTransferJobSubjectStatus;
  readonly updatedAt: Scalars['DateTime']['output'];
  readonly username?: Maybe<Scalars['String']['output']>;
};

export enum WalletBalanceTransferJobSubjectStatus {
  CriteriaNotMet = 'CRITERIA_NOT_MET',
  Error = 'ERROR',
  Idle = 'IDLE',
  Processing = 'PROCESSING',
  RolledBack = 'ROLLED_BACK',
  Success = 'SUCCESS',
  UserActionRequired = 'USER_ACTION_REQUIRED',
  UserNotFound = 'USER_NOT_FOUND'
}

export enum WalletBalanceTransferJobType {
  AdhocPayout = 'ADHOC_PAYOUT',
  MonthlyPayout = 'MONTHLY_PAYOUT'
}

export type WalletConnection = ActiveWalletConnection | DisabledWalletConnection | DisconnectedWalletConnection | PendingWalletConnection | RestrictedWalletConnection;

export type WalletEventRecon = {
  readonly __typename: 'WalletEventRecon';
  readonly accountUuid: Scalars['String']['output'];
  readonly createdAt: Scalars['DateTime']['output'];
  readonly idempotencyToken: Scalars['String']['output'];
  readonly name: Scalars['String']['output'];
  /** The payload of the event serialized as json */
  readonly payload?: Maybe<Scalars['String']['output']>;
};

/** The experience the Linker should see based on their country and whether their Linktree has sensitive content */
export enum WalletExperience {
  /** Linker can only offer free digital products. No paid digital or third party affiliate products due to sensitive content */
  AccountRestricted = 'ACCOUNT_RESTRICTED',
  /** Linker can only offer free digital products. No paid digital or third party affiliate products due to their country not being supported */
  CountryRestricted = 'COUNTRY_RESTRICTED',
  /** Linker can sell paid digital products and third party affiliate products */
  PaidDigitalAndAffiliateProducts = 'PAID_DIGITAL_AND_AFFILIATE_PRODUCTS',
  /** Linker can sell paid digital products only. */
  PaidDigitalProducts = 'PAID_DIGITAL_PRODUCTS'
}

export type WalletPayout = {
  readonly __typename: 'WalletPayout';
  readonly amount: Scalars['Float']['output'];
  readonly createdAt: Scalars['Float']['output'];
  readonly currency: Scalars['String']['output'];
  readonly processor: PaymentProcessor;
};

export type WalletPayoutHistory = {
  readonly __typename: 'WalletPayoutHistory';
  readonly lastPayoutDate?: Maybe<Scalars['String']['output']>;
  readonly nextPayoutDate: Scalars['String']['output'];
  readonly payoutFrequency: PayoutFrequency;
  /** @deprecated use 'payoutTotalsByCurrency' */
  readonly payoutTotals: ReadonlyArray<WalletPayout>;
  readonly payoutTotalsByCurrency: ReadonlyArray<WalletPayoutTotal>;
  readonly payouts: ReadonlyArray<WalletPayout>;
};

export enum WalletPayoutSchedule {
  Daily = 'DAILY',
  Fortnightly = 'FORTNIGHTLY',
  Manual = 'MANUAL',
  Monthly = 'MONTHLY',
  Unknown = 'UNKNOWN',
  Weekly = 'WEEKLY'
}

export type WalletPayoutTotal = {
  readonly __typename: 'WalletPayoutTotal';
  readonly amount: Scalars['Float']['output'];
  readonly currency: Scalars['String']['output'];
};

export type WalletStateV3 = {
  readonly __typename: 'WalletStateV3';
  readonly affiliateCardInfo: CardInfo;
  readonly digitalCardInfo: CardInfo;
  readonly isAffiliateEnabled: Scalars['Boolean']['output'];
  readonly isDigitalEnabled: Scalars['Boolean']['output'];
  readonly isUserPremium: Scalars['Boolean']['output'];
  readonly items: ReadonlyArray<Item>;
};

export type WalletTotalBalance = {
  readonly __typename: 'WalletTotalBalance';
  readonly amount: Scalars['Float']['output'];
  readonly currency: Scalars['String']['output'];
};

/** The errors that prevent a transfer from being made */
export enum WalletTransferEligibilityErrors {
  ConnectionDoesNotExist = 'CONNECTION_DOES_NOT_EXIST',
  ConnectionIsNotActive = 'CONNECTION_IS_NOT_ACTIVE',
  ConnectionIsRestricted = 'CONNECTION_IS_RESTRICTED',
  MinimumTransferAmountNotMet = 'MINIMUM_TRANSFER_AMOUNT_NOT_MET',
  ProgramIsNotAffiliate = 'PROGRAM_IS_NOT_AFFILIATE',
  TransfersDisabled = 'TRANSFERS_DISABLED'
}

export type WalletViewabilityResult = {
  readonly __typename: 'WalletViewabilityResult';
  readonly isDigitalWalletViewable: Scalars['Boolean']['output'];
  readonly isLegacyViewable: Scalars['Boolean']['output'];
};

export type Workspace = {
  readonly __typename: 'Workspace';
  readonly avatarUrl?: Maybe<Scalars['String']['output']>;
  readonly id: Scalars['Int']['output'];
  readonly name: Scalars['String']['output'];
  readonly profileInvitations: WorkspaceProfileInvitationsPage;
  readonly profiles: WorkspaceProfilesPage;
  readonly userInvitations: WorkspaceUserInvitationsPage;
  readonly users: WorkspaceUsersPage;
  readonly uuid: Scalars['String']['output'];
};


export type WorkspaceProfileInvitationsArgs = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
};


export type WorkspaceProfilesArgs = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
};


export type WorkspaceUserInvitationsArgs = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
};


export type WorkspaceUsersArgs = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
};

export type WorkspaceAccount = {
  readonly __typename: 'WorkspaceAccount';
  readonly account: Account;
  readonly createdAt?: Maybe<Scalars['Date']['output']>;
  readonly id: Scalars['Int']['output'];
  readonly updatedAt?: Maybe<Scalars['Date']['output']>;
  readonly workspace: Workspace;
};

export type WorkspaceAccountOwner = {
  readonly __typename: 'WorkspaceAccountOwner';
  readonly name?: Maybe<Scalars['String']['output']>;
  readonly uuid?: Maybe<Scalars['String']['output']>;
};

export enum WorkspaceInvitationStatus {
  Accepted = 'ACCEPTED',
  Declined = 'DECLINED',
  Pending = 'PENDING'
}

export type WorkspaceOverviewAnalytics = {
  readonly __typename: 'WorkspaceOverviewAnalytics';
  readonly lifetime: WorkspaceOverviewAnalyticsLifetime;
  readonly timeseries: ReadonlyArray<WorkspaceOverviewAnalyticsTimeseries>;
};

export type WorkspaceOverviewAnalyticsClicks = {
  readonly __typename: 'WorkspaceOverviewAnalyticsClicks';
  readonly total: Scalars['Int']['output'];
};

export type WorkspaceOverviewAnalyticsLifetime = {
  readonly __typename: 'WorkspaceOverviewAnalyticsLifetime';
  readonly clickThroughRate: Scalars['Float']['output'];
  readonly clicks: WorkspaceOverviewAnalyticsClicks;
  readonly views: WorkspaceOverviewAnalyticsViews;
};

export type WorkspaceOverviewAnalyticsTimeseries = {
  readonly __typename: 'WorkspaceOverviewAnalyticsTimeseries';
  readonly clickThroughRate: Scalars['Float']['output'];
  readonly date: Scalars['String']['output'];
  readonly totalClicks: Scalars['Int']['output'];
  readonly totalViews: Scalars['Int']['output'];
};

export type WorkspaceOverviewAnalyticsViews = {
  readonly __typename: 'WorkspaceOverviewAnalyticsViews';
  readonly total: Scalars['Int']['output'];
};

export type WorkspaceProfileInvitationsPage = {
  readonly __typename: 'WorkspaceProfileInvitationsPage';
  readonly items: ReadonlyArray<AccountWorkspaceInvitation>;
  readonly pageInfo: PaginationResult;
};

export type WorkspaceProfilesPage = {
  readonly __typename: 'WorkspaceProfilesPage';
  readonly items: ReadonlyArray<Account>;
  readonly pageInfo: PaginationResult;
};

export enum WorkspaceRole {
  Manager = 'MANAGER',
  Member = 'MEMBER'
}

export type WorkspaceUser = {
  readonly __typename: 'WorkspaceUser';
  readonly role: WorkspaceRole;
  readonly workspace: Workspace;
};

export type WorkspaceUserInvitationsPage = {
  readonly __typename: 'WorkspaceUserInvitationsPage';
  readonly items: ReadonlyArray<UserWorkspaceInvitation>;
  readonly pageInfo: PaginationResult;
};

export type WorkspaceUsersPage = {
  readonly __typename: 'WorkspaceUsersPage';
  readonly items: ReadonlyArray<User>;
  readonly pageInfo: PaginationResult;
};

export type YouTubeBusinessAnalytics = {
  readonly __typename: 'YouTubeBusinessAnalytics';
  readonly insights: ReadonlyArray<YouTubeInsights>;
};

export type YouTubeBusinessAnalyticsInput = {
  readonly accountId: Scalars['Int']['input'];
  readonly includeDemographics?: Scalars['Boolean']['input'];
  readonly includePostsLatest?: Scalars['Boolean']['input'];
  readonly includeTimeseries?: Scalars['Boolean']['input'];
  readonly range: DateRangeInput;
  readonly timezone: Scalars['String']['input'];
  readonly youtubeIntegrationId: Scalars['String']['input'];
};

export type YouTubeChannelStatistics = {
  readonly __typename: 'YouTubeChannelStatistics';
  readonly hiddenSubscriberCount?: Maybe<Scalars['Boolean']['output']>;
  readonly subscriberCount?: Maybe<Scalars['String']['output']>;
  readonly videoCount?: Maybe<Scalars['String']['output']>;
  readonly viewCount?: Maybe<Scalars['String']['output']>;
};

export type YouTubeDemographics = {
  readonly __typename: 'YouTubeDemographics';
  readonly age: ReadonlyArray<DemographicSegment>;
  readonly city: ReadonlyArray<DemographicCitySegment>;
  readonly country: ReadonlyArray<DemographicSegment>;
  readonly gender: ReadonlyArray<DemographicSegment>;
};

export type YouTubeInsights = {
  readonly __typename: 'YouTubeInsights';
  readonly engagedAudienceDemographics: ReadonlyArray<YouTubeDemographics>;
  readonly postsLatest: ReadonlyArray<YouTubePostsLatest>;
  readonly timeseries: ReadonlyArray<YouTubeTimeseries>;
  readonly userProfile: ReadonlyArray<YouTubeUserProfile>;
};

export type YouTubeMostPopularResult = {
  readonly __typename: 'YouTubeMostPopularResult';
  /** @deprecated Deprecated: server no longer paginates; use limit param to control size. */
  readonly nextPageToken?: Maybe<Scalars['String']['output']>;
  /** @deprecated Deprecated: server no longer paginates; use limit param to control size. */
  readonly prevPageToken?: Maybe<Scalars['String']['output']>;
  readonly videos?: Maybe<ReadonlyArray<Maybe<YouTubeVideo>>>;
};

export type YouTubePostItem = {
  readonly __typename: 'YouTubePostItem';
  readonly commentsCount: Scalars['Int']['output'];
  readonly duration?: Maybe<Scalars['String']['output']>;
  readonly id?: Maybe<Scalars['String']['output']>;
  readonly likeCount: Scalars['Int']['output'];
  readonly thumbnailUrl?: Maybe<Scalars['String']['output']>;
  readonly timestamp?: Maybe<Scalars['String']['output']>;
  readonly title?: Maybe<Scalars['String']['output']>;
  readonly viewCount: Scalars['Int']['output'];
};

export type YouTubePostsLatest = {
  readonly __typename: 'YouTubePostsLatest';
  readonly items: ReadonlyArray<YouTubePostItem>;
};

export type YouTubeTimeseries = {
  readonly __typename: 'YouTubeTimeseries';
  readonly averageViewDuration: Scalars['Int']['output'];
  readonly date?: Maybe<Scalars['String']['output']>;
  readonly estimatedMinutesWatched: Scalars['Int']['output'];
  /** Number of total followers at this date */
  readonly followersCount: Scalars['Int']['output'];
  /** Number of follows gained on this date */
  readonly followsCount: Scalars['Int']['output'];
  /** Status indicating any upstream API issues or data limitations */
  readonly status?: Maybe<Scalars['String']['output']>;
  readonly subscribersCount: Scalars['Int']['output'];
  /** Deprecated, use unfollowsCount instead */
  readonly unfollowersCount: Scalars['Int']['output'];
  /** Number of follows lost on this date */
  readonly unfollowsCount: Scalars['Int']['output'];
};

export type YouTubeUserProfile = {
  readonly __typename: 'YouTubeUserProfile';
  /** Current social media profile followers count */
  readonly currentFollowersCount?: Maybe<Scalars['Int']['output']>;
  readonly id?: Maybe<Scalars['String']['output']>;
  readonly mediaCount: Scalars['Int']['output'];
  readonly name?: Maybe<Scalars['String']['output']>;
  readonly profilePictureUrl?: Maybe<Scalars['String']['output']>;
  /** Total followers gained from selected date range */
  readonly rangeFollowsTotal?: Maybe<Scalars['Int']['output']>;
  /** Total followers lost from selected date range */
  readonly rangeUnfollowsTotal?: Maybe<Scalars['Int']['output']>;
  readonly subscribersCount: Scalars['Int']['output'];
  readonly username?: Maybe<Scalars['String']['output']>;
  readonly videoCount: Scalars['Int']['output'];
  readonly viewCount: Scalars['Int']['output'];
};

export type YouTubeVideo = {
  readonly __typename: 'YouTubeVideo';
  readonly description?: Maybe<Scalars['String']['output']>;
  readonly id?: Maybe<Scalars['String']['output']>;
  readonly publishedAt?: Maybe<Scalars['String']['output']>;
  readonly statistics?: Maybe<YouTubeVideoStatistics>;
  readonly thumbnailUrl?: Maybe<Scalars['String']['output']>;
  readonly title?: Maybe<Scalars['String']['output']>;
  readonly videoType?: Maybe<Scalars['String']['output']>;
};

export type YouTubeVideoStatistics = {
  readonly __typename: 'YouTubeVideoStatistics';
  readonly commentCount?: Maybe<Scalars['String']['output']>;
  readonly likeCount?: Maybe<Scalars['String']['output']>;
  readonly viewCount?: Maybe<Scalars['String']['output']>;
};

export type YoutubeChannelLinkContext = {
  readonly __typename: 'YoutubeChannelLinkContext';
  readonly channelId?: Maybe<Scalars['String']['output']>;
  readonly embedOption?: Maybe<LinkEmbedOptions>;
  readonly subscribe?: Maybe<Scalars['Boolean']['output']>;
};

export type YoutubeLinkContext = {
  readonly __typename: 'YoutubeLinkContext';
  readonly autoplay?: Maybe<Scalars['Boolean']['output']>;
  readonly channelId?: Maybe<Scalars['String']['output']>;
  readonly embedOption?: Maybe<LinkEmbedOptions>;
  readonly mute?: Maybe<Scalars['Boolean']['output']>;
  readonly playlistId?: Maybe<Scalars['String']['output']>;
  readonly subscribe?: Maybe<Scalars['Boolean']['output']>;
  readonly videoId?: Maybe<Scalars['String']['output']>;
};

export type YoutubeLinkContextInput = {
  readonly autoplay?: InputMaybe<Scalars['Boolean']['input']>;
  readonly channelId?: InputMaybe<Scalars['String']['input']>;
  readonly embedOption?: InputMaybe<LinkEmbedOptions>;
  readonly mute?: InputMaybe<Scalars['Boolean']['input']>;
  readonly playlistId?: InputMaybe<Scalars['String']['input']>;
  readonly subscribe?: InputMaybe<Scalars['Boolean']['input']>;
  readonly videoId?: InputMaybe<Scalars['String']['input']>;
};

export type YoutubePlaylistLinkContext = {
  readonly __typename: 'YoutubePlaylistLinkContext';
  readonly autoplay?: Maybe<Scalars['Boolean']['output']>;
  /** The YouTube channel ID, who owns the playlist. */
  readonly channelId?: Maybe<Scalars['String']['output']>;
  readonly embedOption?: Maybe<LinkEmbedOptions>;
  readonly list?: Maybe<Scalars['String']['output']>;
  readonly mute?: Maybe<Scalars['Boolean']['output']>;
  readonly playlistId?: Maybe<Scalars['String']['output']>;
  readonly startTime?: Maybe<Scalars['Int']['output']>;
  /** If the URL is a video in a playlist, the use YOUTUBE_PLAYLIST link-app to model it. And this field capture the video ID. */
  readonly videoId?: Maybe<Scalars['String']['output']>;
};


export type YoutubePlaylistLinkContextListArgs = {
  evaluateGate?: InputMaybe<Scalars['Boolean']['input']>;
};


export type YoutubePlaylistLinkContextPlaylistIdArgs = {
  evaluateGate?: InputMaybe<Scalars['Boolean']['input']>;
};


export type YoutubePlaylistLinkContextVideoIdArgs = {
  evaluateGate?: InputMaybe<Scalars['Boolean']['input']>;
};

export type YoutubeVideoLinkContext = {
  readonly __typename: 'YoutubeVideoLinkContext';
  readonly autoplay?: Maybe<Scalars['Boolean']['output']>;
  /** The YouTube channel ID, who originally creates the video. For example, if you create a playlist contains an Adele song. This is Adele channel ID. */
  readonly channelId?: Maybe<Scalars['String']['output']>;
  readonly embedOption?: Maybe<LinkEmbedOptions>;
  readonly mute?: Maybe<Scalars['Boolean']['output']>;
  readonly startTime?: Maybe<Scalars['Int']['output']>;
  readonly videoId?: Maybe<Scalars['String']['output']>;
};


export type YoutubeVideoLinkContextVideoIdArgs = {
  evaluateGate?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ZapierIntegrationContext = {
  readonly __typename: 'ZapierIntegrationContext';
  readonly message?: Maybe<Scalars['String']['output']>;
  readonly position?: Maybe<Scalars['String']['output']>;
  readonly termsActive?: Maybe<Scalars['Boolean']['output']>;
  readonly termsLabel?: Maybe<Scalars['String']['output']>;
  readonly termsUrl?: Maybe<Scalars['String']['output']>;
  readonly title?: Maybe<Scalars['String']['output']>;
  readonly webhookUrl?: Maybe<Scalars['String']['output']>;
};

export type ZoomIntegrationContext = {
  readonly __typename: 'ZoomIntegrationContext';
  readonly accessToken?: Maybe<Scalars['String']['output']>;
  readonly createdAt?: Maybe<Scalars['Int']['output']>;
  readonly expiresIn?: Maybe<Scalars['Int']['output']>;
  readonly isAuthenticated?: Maybe<Scalars['Boolean']['output']>;
  readonly refreshToken?: Maybe<Scalars['String']['output']>;
  readonly scope?: Maybe<Scalars['String']['output']>;
  readonly tokenType?: Maybe<Scalars['String']['output']>;
};

export type CommerceLinkiqProfile = {
  readonly __typename: 'commerceLinkiqProfile';
  readonly ctrBand?: Maybe<Scalars['String']['output']>;
  readonly gmvBand?: Maybe<Scalars['String']['output']>;
  readonly instagramEngagementRate?: Maybe<Scalars['Float']['output']>;
  readonly instagramFollowerCount?: Maybe<Scalars['Float']['output']>;
  readonly profileUuid?: Maybe<Scalars['String']['output']>;
  readonly tiktokEngagementRate?: Maybe<Scalars['Float']['output']>;
  readonly tiktokFollowerCount?: Maybe<Scalars['Float']['output']>;
  readonly viewBand?: Maybe<Scalars['String']['output']>;
};

export type IsWalletViewableV3 = {
  readonly __typename: 'isWalletViewableV3';
  readonly isDigitalWalletViewable: Scalars['Boolean']['output'];
  readonly isLegacyViewable: Scalars['Boolean']['output'];
};

export type AccountForPreviewFragment = { readonly __typename: 'Account', readonly id: number, readonly uuid: string, readonly username: string, readonly realName?: string | null, readonly customAvatar?: string | null, readonly customAvatarVideo?: string | null, readonly customAvatarAttributes?: string | null, readonly profilePicture?: string | null, readonly profilePictureUrl?: string | null, readonly avatarType: AvatarType, readonly avatarMode: AvatarMode, readonly avatarModes: ReadonlyArray<AvatarMode>, readonly backgroundHeroColor?: string | null, readonly pageTitle: string, readonly description?: string | null, readonly backgroundImage?: string | null, readonly backgroundPoster?: string | null, readonly shadowColor: string, readonly isLogoVisible: boolean, readonly luminance: string, readonly tier?: string | null, readonly createdAt?: string | null, readonly backgroundColor?: string | null, readonly buttonColor?: string | null, readonly buttonStyle?: string | null, readonly buttonCornerStyle?: string | null, readonly buttonShadowStyle?: string | null, readonly backgroundStyle?: string | null, readonly buttonTextColor?: string | null, readonly fontStyle?: string | null, readonly fontColor?: string | null, readonly headingType?: HeadingType | null, readonly headingLogo?: string | null, readonly headingFont?: string | null, readonly headingColor?: string | null, readonly headingSize?: HeadingSize | null, readonly headingEffect?: HeadingEffect | null, readonly headingLogoSize?: HeadingLogoSize | null, readonly colorSchema?: ColorSchema | null, readonly hasAccountPreviewChanges: boolean, readonly hasUndoChanges: boolean, readonly hasRedoChanges: boolean, readonly theme: { readonly __typename: 'CelebrityTheme', readonly key: string } | { readonly __typename: 'CustomTheme', readonly luminance: Luminance, readonly key: string, readonly background: { readonly __typename: 'AnimatedBackground', readonly color: string, readonly style: BackgroundStyle, readonly type: BackgroundType } | { readonly __typename: 'ColorBackground', readonly color: string, readonly style: BackgroundStyle, readonly type: BackgroundType, readonly noise: boolean } | { readonly __typename: 'DefaultBackground' } | { readonly __typename: 'GradientBackground', readonly colors: ReadonlyArray<string | null>, readonly style: BackgroundStyle, readonly type: BackgroundType, readonly animated?: boolean | null, readonly noise: boolean, readonly name: BackgroundGradientStyle } | { readonly __typename: 'ImageBackground', readonly color: string, readonly imageUrl: string, readonly type: BackgroundType, readonly tint: string, readonly noise: boolean, readonly effect: BackgroundImageEffect } | { readonly __typename: 'VideoBackground', readonly color: string, readonly imageUrl: string, readonly posterUrl?: string | null, readonly type: BackgroundType, readonly tint: string, readonly noise: boolean }, readonly heading: { readonly __typename: 'HeadingOptions', readonly type: HeadingType, readonly font?: string | null, readonly color?: string | null, readonly size: HeadingSize, readonly effect: HeadingEffect, readonly logo?: string | null, readonly logoSize?: HeadingLogoSize | null }, readonly buttonStyle: { readonly __typename: 'ButtonStyle', readonly type: ButtonType, readonly backgroundStyle: { readonly __typename: 'ButtonBackgroundStyle', readonly color: string }, readonly shadowStyle?: { readonly __typename: 'ButtonShadowStyle', readonly type: ButtonShadowType, readonly color: string } | null, readonly cornerStyle?: { readonly __typename: 'ButtonCornerStyle', readonly type: ButtonCornerType } | null, readonly textStyle?: { readonly __typename: 'ButtonTextStyle', readonly color: string } | null }, readonly socialStyle: { readonly __typename: 'SocialStyle', readonly color?: string | null }, readonly typeface: { readonly __typename: 'Typeface', readonly color?: string | null, readonly family: string }, readonly footer: { readonly __typename: 'Footer', readonly logoUrl?: string | null, readonly url?: string | null, readonly color?: string | null } } | { readonly __typename: 'DefaultTheme', readonly key: string }, readonly accountPreviewPaidChanges?: { readonly __typename: 'AccountPreviewPaidChanges', readonly hasProFeatures: boolean, readonly hasPremiumFeatures: boolean } | null, readonly metaAttributes?: { readonly __typename: 'MetaAttributes', readonly ogImageBackgroundType?: OgImageBackgroundType | null, readonly ogImageBackgroundColor?: string | null } | null };

export type LinkFragment = { readonly __typename: 'Link', readonly id: number, readonly type?: string | null, readonly title?: string | null, readonly url?: string | null, readonly active: boolean, readonly position: number, readonly modifiers: { readonly __typename: 'LinkModifiers', readonly animation?: ButtonHighlightType | null, readonly isForwarding: boolean, readonly isForwardingActive: boolean, readonly thumbnailUrl?: string | null, readonly layoutOption?: VisualLinkPreviewLayoutOption | null, readonly sponsorshipId?: string | null, readonly amazonAffiliate?: { readonly __typename: 'AmazonAffiliate', readonly type: AmazonAffiliateType, readonly style: AmazonAffiliateStyle } | null }, readonly rules?: { readonly __typename: 'LinkRules', readonly gate?: { readonly __typename: 'GateRule', readonly activeOrder?: ReadonlyArray<string | null> | null, readonly age?: { readonly __typename: 'AgeGateRule', readonly message?: string | null, readonly minAge?: number | null } | null, readonly passcode?: { readonly __typename: 'PasscodeGateRule', readonly message?: string | null, readonly code?: string | null } | null, readonly nft?: { readonly __typename: 'NFTGateRule', readonly contractAddress?: string | null, readonly collectionName?: string | null, readonly message?: string | null } | null, readonly payment?: { readonly __typename: 'PaymentGateRule', readonly amount?: number | null, readonly successMessage?: string | null, readonly descriptionMessage?: string | null, readonly helpCoverFees?: boolean | null, readonly isValid?: boolean | null, readonly serviceIntegration?: { readonly __typename: 'MailchimpIntegration', readonly id: string, readonly type: ServiceIntegrationType, readonly title?: string | null, readonly status: ServiceIntegrationStatus } | { readonly __typename: 'PartnerIntegration', readonly id: string, readonly type: ServiceIntegrationType, readonly title?: string | null, readonly status: ServiceIntegrationStatus } | { readonly __typename: 'PaypalIntegration', readonly paypalIntegrationId?: string | null, readonly currencyCode?: CurrencyCode | null, readonly id: string, readonly type: ServiceIntegrationType, readonly title?: string | null, readonly status: ServiceIntegrationStatus } | { readonly __typename: 'ShopifyIntegration', readonly id: string, readonly type: ServiceIntegrationType, readonly title?: string | null, readonly status: ServiceIntegrationStatus } | { readonly __typename: 'SpringIntegration', readonly id: string, readonly type: ServiceIntegrationType, readonly title?: string | null, readonly status: ServiceIntegrationStatus } | { readonly __typename: 'SquareIntegration', readonly squareIntegrationId?: string | null, readonly currencyCode?: CurrencyCode | null, readonly id: string, readonly type: ServiceIntegrationType, readonly title?: string | null, readonly status: ServiceIntegrationStatus } | { readonly __typename: 'StripeIntegration', readonly id: string, readonly type: ServiceIntegrationType, readonly title?: string | null, readonly status: ServiceIntegrationStatus } | null } | null } | null } | null, readonly context?: { readonly __typename: 'BookLinkContext', readonly embedOption?: LinkEmbedOptions | null, readonly productReference?: string | null, readonly displayPrices: boolean, readonly includeUsedCopiesInResult: boolean, readonly options: ReadonlyArray<{ readonly __typename: 'BookLinkOption', readonly type: string, readonly visible: boolean, readonly formats?: ReadonlyArray<{ readonly __typename: 'BookLinkFormat', readonly format: string, readonly visible: boolean, readonly url?: string | null }> | null }> } | { readonly __typename: 'ChatbotLinkContext', readonly embedOption?: LinkEmbedOptions | null, readonly examplePrompts: ReadonlyArray<string>, readonly initialMessage: string, readonly inputPlaceholder: string } | { readonly __typename: 'ClubhouseLinkContext', readonly embedOption?: LinkEmbedOptions | null } | { readonly __typename: 'CoachingLinkContext', readonly campaignId?: string | null } | { readonly __typename: 'CommercePayLinkContext', readonly presetAmounts: ReadonlyArray<number>, readonly allowCustomAmount: boolean, readonly descriptionMessage?: string | null, readonly successMessage?: string | null, readonly allowNote: boolean, readonly serviceIntegration?: { readonly __typename: 'MailchimpIntegration' } | { readonly __typename: 'PartnerIntegration' } | { readonly __typename: 'PaypalIntegration', readonly id: string, readonly type: ServiceIntegrationType, readonly title?: string | null, readonly status: ServiceIntegrationStatus, readonly currencyCode?: CurrencyCode | null, readonly merchantId?: string | null } | { readonly __typename: 'ShopifyIntegration' } | { readonly __typename: 'SpringIntegration' } | { readonly __typename: 'SquareIntegration', readonly id: string, readonly type: ServiceIntegrationType, readonly title?: string | null, readonly status: ServiceIntegrationStatus, readonly currencyCode?: CurrencyCode | null, readonly locationId?: string | null, readonly squareApplicationId?: string | null, readonly squareIntegrationId?: string | null } | { readonly __typename: 'StripeIntegration', readonly id: string, readonly type: ServiceIntegrationType, readonly title?: string | null, readonly status: ServiceIntegrationStatus, readonly currencyCode?: CurrencyCode | null, readonly stripeIntegrationId?: string | null } | null } | { readonly __typename: 'CommerceProductLinkContext', readonly accountProductId?: string | null, readonly product?: { readonly __typename: 'CommerceProductLinkProduct', readonly id: string, readonly url: string, readonly title: string, readonly price?: number | null, readonly salePrice?: number | null, readonly image?: string | null, readonly currency?: string | null, readonly vendorDisplayName?: string | null } | null } | { readonly __typename: 'CommunityLinkContext', readonly linkType?: CommunityPlatformOptions | null, readonly linkBehaviour?: CommunityLinkBehaviourOptions | null, readonly communityDescription?: string | null, readonly communitySubscriptionId?: string | null, readonly communityTitle?: string | null, readonly communityImage?: string | null, readonly communityInviteUrl?: string | null, readonly v2FormId?: string | null, readonly listingId?: string | null } | { readonly __typename: 'ContactDetailsLinkContext', readonly firstName?: string | null, readonly lastName?: string | null, readonly organization?: string | null, readonly position?: string | null, readonly emailPrimary?: string | null, readonly emailPrimaryType?: ContactDetailEmailType | null, readonly emailSecondary?: string | null, readonly emailSecondaryType?: ContactDetailEmailType | null, readonly phonePrimary?: string | null, readonly phonePrimaryType?: ContactDetailPhoneType | null, readonly phoneSecondary?: string | null, readonly phoneSecondaryType?: ContactDetailPhoneType | null, readonly addressLine1?: string | null, readonly addressLine2?: string | null, readonly addressCity?: string | null, readonly addressCountry?: string | null, readonly addressState?: string | null, readonly addressPostcode?: string | null, readonly openingHours?: string | null } | { readonly __typename: 'DigitalDownloadLinkContext', readonly v2FormId?: string | null, readonly listing?: { readonly __typename: 'DigitalDownloadLinkListing', readonly id?: string | null, readonly name?: string | null, readonly description?: string | null, readonly imageUrl?: string | null, readonly paymentType?: DigitalDownloadPaymentType | null, readonly currency?: string | null, readonly amount?: number | null } | null, readonly product?: { readonly __typename: 'DigitalDownloadLinkProduct', readonly id: string, readonly items?: ReadonlyArray<{ readonly __typename: 'DigitalDownloadLinkProductItem', readonly id?: string | null, readonly displayName?: string | null, readonly extension?: string | null, readonly mimeType?: string | null, readonly size?: number | null } | null> | null } | null } | { readonly __typename: 'EmailLinkContext', readonly embedOption?: LinkEmbedOptions | null } | { readonly __typename: 'ExtensionLinkContext', readonly linkTypeId: string, readonly data?: string | null, readonly embedOption?: LinkEmbedOptions | null, readonly isValid?: boolean | null } | { readonly __typename: 'FacebookLinkContext', readonly embedOption?: LinkEmbedOptions | null, readonly autoplay?: boolean | null, readonly mute?: boolean | null } | { readonly __typename: 'FormLinkContext', readonly formType?: string | null, readonly submissionMethod?: string | null, readonly emailRecipient?: string | null, readonly linkDescription?: string | null, readonly confirmationMessage?: string | null, readonly termsConditions?: boolean | null, readonly termsConditionsLabel?: string | null, readonly termsConditionsUrl?: string | null, readonly v2FormId?: string | null, readonly fields?: ReadonlyArray<{ readonly __typename: 'FormLinkField', readonly label?: string | null, readonly name?: string | null, readonly type?: string | null, readonly enabled?: boolean | null, readonly required?: boolean | null } | null> | null } | { readonly __typename: 'GroupLinkContext', readonly layoutOption?: GroupLayoutOptions | null } | { readonly __typename: 'HeaderLinkContext', readonly headerLayoutOption?: HeaderLayoutOptions | null } | { readonly __typename: 'InstagramPostLinkContext', readonly embedOption?: LinkEmbedOptions | null } | { readonly __typename: 'InstagramProfileLinkContext', readonly embedOption?: LinkEmbedOptions | null, readonly integrationId?: string | null, readonly instagramBusinessAccountId?: string | null, readonly displayType?: InstagramProfileDisplayOption | null, readonly mediaType?: InstagramProfileMediaOption | null } | { readonly __typename: 'KajabiCourseLinkContext', readonly v2FormId?: string | null, readonly course?: { readonly __typename: 'KajabiCourseContext', readonly id?: string | null, readonly title?: string | null, readonly description?: string | null, readonly thumbnailUrl?: string | null, readonly amount?: number | null, readonly currency?: string | null, readonly paymentType?: KajabiCoursePaymentType | null, readonly listingId?: string | null, readonly modules?: ReadonlyArray<{ readonly __typename: 'KajabiCourseModule', readonly id?: string | null, readonly name?: string | null, readonly numberOfLessons?: number | null, readonly length?: number | null, readonly thumbnailUrl?: string | null } | null> | null } | null } | { readonly __typename: 'LinkerRecommendationsLinkContext', readonly recommendedAccounts?: ReadonlyArray<{ readonly __typename: 'LinkerRecommendation', readonly username?: string | null, readonly accountUuid?: string | null, readonly profileTitle?: string | null, readonly customAvatarUrl?: string | null, readonly invalidUsername?: string | null } | null> | null } | { readonly __typename: 'MobileAppLinkContext', readonly embedOption?: LinkEmbedOptions | null, readonly options: ReadonlyArray<{ readonly __typename: 'MobileAppLinkOption', readonly type: string, readonly visible: boolean, readonly url?: string | null }> } | { readonly __typename: 'MusicLinkContext', readonly embedOption?: LinkEmbedOptions | null, readonly options: ReadonlyArray<{ readonly __typename: 'MusicLinkOption', readonly type: string, readonly visible: boolean, readonly url?: string | null }> } | { readonly __typename: 'NftGalleryLinkContext', readonly walletProvider?: string | null, readonly walletAddress?: string | null, readonly marketplace?: string | null, readonly lastUpdated?: number | null, readonly assets?: ReadonlyArray<{ readonly __typename: 'NftAsset', readonly openseaId?: number | null, readonly name?: string | null, readonly tokenId?: string | null, readonly imageUrl?: string | null, readonly description?: string | null, readonly externalLink?: string | null, readonly contractAddress?: string | null, readonly openseaLink?: string | null, readonly collectionName?: string | null, readonly collectionSymbol?: string | null, readonly ownerName?: string | null, readonly ownerAddress?: string | null, readonly collectionVerified?: boolean | null, readonly creatorVerified?: boolean | null } | null> | null } | { readonly __typename: 'PinterestLinkContext', readonly embedOption?: LinkEmbedOptions | null } | { readonly __typename: 'PodcastLinkContext', readonly embedOption?: LinkEmbedOptions | null, readonly useLatestEpisode: boolean, readonly options: ReadonlyArray<{ readonly __typename: 'PodcastLinkOption', readonly type: string, readonly visible: boolean, readonly url?: string | null }> } | { readonly __typename: 'PreSaveLinkContext', readonly releaseDateTime?: string | null, readonly releaseDateTimeZone?: string | null, readonly alertSubscribers?: boolean | null, readonly uniqueId?: string | null, readonly artist?: string | null, readonly songTitle?: string | null, readonly description?: string | null, readonly confirmationMessage?: string | null, readonly userUploadedCoverArt?: string | null, readonly options: ReadonlyArray<{ readonly __typename: 'PreSaveLinkOption', readonly type: string, readonly visible: boolean }> } | { readonly __typename: 'ProductLinkContext', readonly descriptionMessage?: string | null, readonly productIds: ReadonlyArray<string | null>, readonly collectionId?: string | null, readonly embedOption?: LinkEmbedOptions | null, readonly products?: ReadonlyArray<{ readonly __typename: 'Product', readonly shopUrl?: string | null, readonly id?: string | null, readonly title?: string | null, readonly description?: string | null, readonly price?: number | null, readonly currencyCode?: CurrencyCode | null, readonly url?: string | null, readonly imageUrl?: string | null, readonly promotionalBanner?: ProductPromotionalBannerOptions | null, readonly salePrice?: number | null, readonly image?: { readonly __typename: 'Image', readonly id: string, readonly src: string } | null } | null> | null, readonly collection?: { readonly __typename: 'ProductCollection', readonly id: string, readonly shopName?: string | null, readonly shopUrl?: string | null, readonly products: ReadonlyArray<{ readonly __typename: 'Product', readonly id?: string | null, readonly title?: string | null, readonly description?: string | null, readonly price?: number | null, readonly currencyCode?: CurrencyCode | null, readonly url?: string | null, readonly image?: { readonly __typename: 'Image', readonly id: string, readonly src: string } | null } | null> } | null, readonly providerServiceIntegration?: { readonly __typename: 'MailchimpIntegration', readonly id: string, readonly status: ServiceIntegrationStatus, readonly type: ServiceIntegrationType } | { readonly __typename: 'PartnerIntegration', readonly id: string, readonly status: ServiceIntegrationStatus, readonly type: ServiceIntegrationType } | { readonly __typename: 'PaypalIntegration', readonly id: string, readonly status: ServiceIntegrationStatus, readonly type: ServiceIntegrationType } | { readonly __typename: 'ShopifyIntegration', readonly externalIntegrationId?: string | null, readonly status: ServiceIntegrationStatus, readonly id: string, readonly type: ServiceIntegrationType } | { readonly __typename: 'SpringIntegration', readonly externalIntegrationId?: string | null, readonly id: string, readonly status: ServiceIntegrationStatus, readonly type: ServiceIntegrationType } | { readonly __typename: 'SquareIntegration', readonly id: string, readonly status: ServiceIntegrationStatus, readonly type: ServiceIntegrationType } | { readonly __typename: 'StripeIntegration', readonly id: string, readonly status: ServiceIntegrationStatus, readonly type: ServiceIntegrationType } | null, readonly paymentServiceIntegration?: { readonly __typename: 'MailchimpIntegration', readonly id: string } | { readonly __typename: 'PartnerIntegration', readonly id: string } | { readonly __typename: 'PaypalIntegration', readonly id: string } | { readonly __typename: 'ShopifyIntegration', readonly id: string } | { readonly __typename: 'SpringIntegration', readonly id: string } | { readonly __typename: 'SquareIntegration', readonly id: string } | { readonly __typename: 'StripeIntegration', readonly id: string } | null } | { readonly __typename: 'RequestLinkContext', readonly descriptionMessage?: string | null, readonly successMessage?: string | null, readonly requireDetails: boolean, readonly requireTax: boolean, readonly taxRate?: number | null, readonly serviceIntegration?: { readonly __typename: 'MailchimpIntegration' } | { readonly __typename: 'PartnerIntegration' } | { readonly __typename: 'PaypalIntegration', readonly id: string, readonly type: ServiceIntegrationType, readonly title?: string | null, readonly status: ServiceIntegrationStatus, readonly currencyCode?: CurrencyCode | null, readonly merchantId?: string | null, readonly paypalIntegrationId?: string | null } | { readonly __typename: 'ShopifyIntegration' } | { readonly __typename: 'SpringIntegration' } | { readonly __typename: 'SquareIntegration', readonly id: string, readonly type: ServiceIntegrationType, readonly title?: string | null, readonly status: ServiceIntegrationStatus, readonly currencyCode?: CurrencyCode | null, readonly locationId?: string | null, readonly squareApplicationId?: string | null, readonly squareIntegrationId?: string | null } | { readonly __typename: 'StripeIntegration', readonly id: string, readonly type: ServiceIntegrationType, readonly title?: string | null, readonly status: ServiceIntegrationStatus, readonly currencyCode?: CurrencyCode | null, readonly stripeIntegrationId?: string | null } | null, readonly options: ReadonlyArray<{ readonly __typename: 'RequestLinkOption', readonly title: string, readonly amount: number }> } | { readonly __typename: 'RssFeedLinkContext', readonly embedOption?: LinkEmbedOptions | null, readonly itemCount?: number | null, readonly includeThumbnails?: boolean | null } | { readonly __typename: 'SpotifyLinkContext', readonly embedOption?: LinkEmbedOptions | null, readonly useLatestEpisode: boolean, readonly options: ReadonlyArray<{ readonly __typename: 'SpotifyLinkOption', readonly type: string, readonly visible: boolean, readonly url?: string | null }> } | { readonly __typename: 'SpringLinkContext', readonly embedOption?: LinkEmbedOptions | null, readonly message?: string | null } | { readonly __typename: 'TemplateLinkContext', readonly isIncompleteTemplateLink?: boolean | null } | { readonly __typename: 'ThreadsLinkContext', readonly embedOption?: LinkEmbedOptions | null } | { readonly __typename: 'TikTokJumpLinkContext', readonly firstProfile?: string | null, readonly secondProfile?: string | null, readonly thirdProfile?: string | null, readonly forthProfile?: string | null, readonly videoId?: string | null, readonly description?: string | null } | { readonly __typename: 'TikTokLinkContext', readonly embedOption?: LinkEmbedOptions | null } | { readonly __typename: 'TikTokProfileLinkContext', readonly embedOption?: LinkEmbedOptions | null, readonly tiktokIntegrationId?: string | null, readonly videoIds?: ReadonlyArray<string | null> | null } | { readonly __typename: 'TipGiftLinkContext', readonly emoji?: TipGiftEmoji | null, readonly amount: number, readonly descriptionMessage?: string | null, readonly successMessage?: string | null, readonly helpCoverFees?: boolean | null, readonly serviceIntegration?: { readonly __typename: 'MailchimpIntegration' } | { readonly __typename: 'PartnerIntegration' } | { readonly __typename: 'PaypalIntegration', readonly id: string, readonly type: ServiceIntegrationType, readonly title?: string | null, readonly status: ServiceIntegrationStatus, readonly currencyCode?: CurrencyCode | null, readonly merchantId?: string | null, readonly paypalIntegrationId?: string | null } | { readonly __typename: 'ShopifyIntegration' } | { readonly __typename: 'SpringIntegration' } | { readonly __typename: 'SquareIntegration', readonly id: string, readonly type: ServiceIntegrationType, readonly title?: string | null, readonly status: ServiceIntegrationStatus, readonly currencyCode?: CurrencyCode | null, readonly locationId?: string | null, readonly squareApplicationId?: string | null, readonly squareIntegrationId?: string | null } | { readonly __typename: 'StripeIntegration', readonly id: string, readonly type: ServiceIntegrationType, readonly title?: string | null, readonly status: ServiceIntegrationStatus, readonly currencyCode?: CurrencyCode | null, readonly stripeIntegrationId?: string | null } | null } | { readonly __typename: 'TwitchChannelLinkContext', readonly embedOption?: LinkEmbedOptions | null, readonly autoplay?: boolean | null, readonly mute?: boolean | null, readonly channelId?: string | null } | { readonly __typename: 'TwitchCollectionLinkContext', readonly embedOption?: LinkEmbedOptions | null, readonly autoplay?: boolean | null, readonly mute?: boolean | null, readonly videoId?: string | null, readonly collectionId?: string | null } | { readonly __typename: 'TwitchVideoLinkContext', readonly embedOption?: LinkEmbedOptions | null, readonly autoplay?: boolean | null, readonly mute?: boolean | null, readonly videoId?: string | null } | { readonly __typename: 'TwitterLinkContext', readonly embedOption?: LinkEmbedOptions | null } | { readonly __typename: 'VideoLinkContext' } | { readonly __typename: 'VimeoLinkContext', readonly embedOption?: LinkEmbedOptions | null, readonly autoplay?: boolean | null, readonly mute?: boolean | null } | { readonly __typename: 'YoutubeChannelLinkContext', readonly channelId?: string | null, readonly subscribe?: boolean | null, readonly embedOption?: LinkEmbedOptions | null } | { readonly __typename: 'YoutubePlaylistLinkContext', readonly embedOption?: LinkEmbedOptions | null, readonly autoplay?: boolean | null, readonly mute?: boolean | null, readonly videoId?: string | null, readonly startTime?: number | null, readonly list?: string | null } | { readonly __typename: 'YoutubeVideoLinkContext', readonly embedOption?: LinkEmbedOptions | null, readonly autoplay?: boolean | null, readonly mute?: boolean | null, readonly videoId?: string | null, readonly startTime?: number | null } | null };

export type BulkUpdateLinkPreviewTitlesMutationVariables = Exact<{
  linkUpdates: ReadonlyArray<BulkUpdateLinkTitlesInput> | BulkUpdateLinkTitlesInput;
  glowUp: GlowUpInput;
  isGlowUpPreview?: InputMaybe<Scalars['Boolean']['input']>;
}>;


export type BulkUpdateLinkPreviewTitlesMutation = { readonly __typename: 'Mutation', readonly bulkUpdateLinkPreviewTitlesMutation?: { readonly __typename: 'Account', readonly id: number, readonly uuid: string } | null };

export type CreateCanvaAssetUploadJobMutationVariables = Exact<{
  input: CreateCanvaAssetUploadJobInput;
}>;


export type CreateCanvaAssetUploadJobMutation = { readonly __typename: 'Mutation', readonly createCanvaAssetUploadJob?: { readonly __typename: 'CanvaAssetUploadJobResult', readonly jobId?: string | null, readonly status?: string | null, readonly error?: string | null, readonly canvaAsset?: { readonly __typename: 'CanvaAsset', readonly id?: string | null } | null } | null };

export type CreateCanvaDesignMutationVariables = Exact<{
  input: CreateCanvaDesignInput;
}>;


export type CreateCanvaDesignMutation = { readonly __typename: 'Mutation', readonly createCanvaDesign?: { readonly __typename: 'CreateCanvaDesignResult', readonly design?: { readonly __typename: 'CanvaDesign', readonly id?: string | null, readonly title?: string | null, readonly thumbnailUrl?: string | null, readonly editUrl?: string | null, readonly viewUrl?: string | null } | null } | null };

export type CreateCanvaDesignExportJobMutationVariables = Exact<{
  input: CreateCanvaDesignOutputJobInput;
}>;


export type CreateCanvaDesignExportJobMutation = { readonly __typename: 'Mutation', readonly createCanvaDesignExportJob?: { readonly __typename: 'CanvaDesignExportJobResult', readonly jobId?: string | null, readonly status?: string | null, readonly error?: string | null, readonly canvaDesignUrls?: ReadonlyArray<string | null> | null } | null };

export type CreateInAppMessageMutationVariables = Exact<{
  code: Scalars['String']['input'];
  level: Scalars['String']['input'];
  count?: InputMaybe<Scalars['Int']['input']>;
}>;


export type CreateInAppMessageMutation = { readonly __typename: 'Mutation', readonly createInAppMessage?: { readonly __typename: 'InAppMessage', readonly code: MessageCode, readonly level: MessageLevel, readonly count?: number | null } | null };

export type DeleteAccountPreviewChangesMutationVariables = Exact<{
  returnProfilePreview: Scalars['Boolean']['input'];
}>;


export type DeleteAccountPreviewChangesMutation = { readonly __typename: 'Mutation', readonly deleteAccountPreviewChanges?: (
    { readonly __typename: 'Account' }
    & AccountForPreviewFragment
  ) | null };

export type DeleteGlowUpStateMutationVariables = Exact<{ [key: string]: never; }>;


export type DeleteGlowUpStateMutation = { readonly __typename: 'Mutation', readonly deleteGlowUpState?: { readonly __typename: 'Account', readonly id: number, readonly uuid: string, readonly glowUp?: { readonly __typename: 'GlowUp', readonly conversationId: string, readonly data: ReadonlyArray<{ readonly __typename: 'GlowUpData', readonly toolId: string, readonly isToggled: boolean, readonly type?: GlowUpType | null, readonly paidChange?: { readonly __typename: 'GlowUpPaidChange', readonly isPro: boolean, readonly isPremium: boolean } | null } | null> } | null } | null };

export type GlowUpMutationVariables = Exact<{
  isGlowUpPreview: Scalars['Boolean']['input'];
}>;


export type GlowUpMutation = { readonly __typename: 'Mutation', readonly glowUp?: { readonly __typename: 'Account', readonly id: number, readonly uuid: string, readonly username: string, readonly isActive: boolean, readonly pageTitle: string, readonly contentWarning?: ContentWarningType | null, readonly description?: string | null, readonly isLogoVisible: boolean, readonly socialLinksPosition: SocialLinksPosition, readonly profilePictureUrl?: string | null, readonly customAvatar?: string | null, readonly customAvatarVideo?: string | null, readonly customAvatarAttributes?: string | null, readonly backgroundImageAttributes?: string | null, readonly backgroundHeroColor?: string | null, readonly backgroundGradient?: ReadonlyArray<string | null> | null, readonly backgroundImage?: string | null, readonly backgroundStyle?: string | null, readonly avatarMode: AvatarMode, readonly avatarType: AvatarType, readonly hasCustomBackgroundColor?: boolean | null, readonly colorPalette: { readonly __typename: 'AppearanceColorPaletteOption', readonly palette: ReadonlyArray<string>, readonly alternatePalette: ReadonlyArray<string> }, readonly socialIntegrations: ReadonlyArray<{ readonly __typename: 'SocialIntegration', readonly type: SocialIntegrationType, readonly id: string }>, readonly socialLinks: ReadonlyArray<{ readonly __typename: 'SocialLink', readonly id?: string | null, readonly type: SocialLinkType, readonly url: string, readonly active?: boolean | null, readonly position?: number | null }>, readonly glowUp?: { readonly __typename: 'GlowUp', readonly status?: GlowUpStatus | null, readonly conversationId: string, readonly data: ReadonlyArray<{ readonly __typename: 'GlowUpData', readonly toolId: string, readonly isToggled: boolean, readonly type?: GlowUpType | null, readonly paidChange?: { readonly __typename: 'GlowUpPaidChange', readonly isPro: boolean, readonly isPremium: boolean } | null, readonly incompleteGlowUpData?: { readonly __typename: 'GlowUpIncompleteToolData', readonly message: string } | null, readonly previousState?: { readonly __typename: 'GlowUpToolAnimateLinkPreviousState', readonly links: ReadonlyArray<{ readonly __typename: 'AnimateLinkPreviousStateLink', readonly linkId: number, readonly animation?: ButtonHighlightType | null } | null> } | { readonly __typename: 'GlowUpToolCreateSocialLinkPreviousState' } | { readonly __typename: 'GlowUpToolFeaturedLayoutPreviousState', readonly links: ReadonlyArray<{ readonly __typename: 'FeaturedLayoutPreviousStateLink', readonly linkId: number, readonly layoutOption?: VisualLinkPreviewLayoutOption | null } | null> } | { readonly __typename: 'GlowUpToolHeroPreviousState', readonly avatarMode: AvatarMode } | { readonly __typename: 'GlowUpToolRichMediaSpotifyPreviousState' } | { readonly __typename: 'GlowUpToolRichMediaYoutubePreviousState' } | { readonly __typename: 'GlowUpToolSetThumbnailPreviousState' } | { readonly __typename: 'GlowUpToolUpdateAppearancePreviousState' } | { readonly __typename: 'GlowUpToolUpdateBioPreviousState' } | { readonly __typename: 'GlowUpToolUpdateHeadingOptionsPreviousState' } | { readonly __typename: 'GlowUpToolUpdateLinkTitlePreviousState' } | null } | null> } | null, readonly theme: { readonly __typename: 'CelebrityTheme' } | { readonly __typename: 'CustomTheme', readonly background: { readonly __typename: 'AnimatedBackground', readonly color: string, readonly style: BackgroundStyle, readonly type: BackgroundType } | { readonly __typename: 'ColorBackground', readonly color: string, readonly style: BackgroundStyle, readonly type: BackgroundType } | { readonly __typename: 'DefaultBackground' } | { readonly __typename: 'GradientBackground', readonly colors: ReadonlyArray<string | null>, readonly style: BackgroundStyle, readonly type: BackgroundType } | { readonly __typename: 'ImageBackground', readonly color: string, readonly imageUrl: string, readonly type: BackgroundType } | { readonly __typename: 'VideoBackground', readonly color: string, readonly imageUrl: string, readonly posterUrl?: string | null, readonly type: BackgroundType } } | { readonly __typename: 'DefaultTheme' } } | null };

export type MarkAllNotificationsAsReadMutationVariables = Exact<{
  accountUuid: Scalars['String']['input'];
}>;


export type MarkAllNotificationsAsReadMutation = { readonly __typename: 'Mutation', readonly markAllNotificationsRead: { readonly __typename: 'MarkAllNotificationsReadResponse', readonly updated: number } };

export type MarkNotificationAsReadMutationVariables = Exact<{
  notificationId: Scalars['ID']['input'];
  accountUuid: Scalars['String']['input'];
}>;


export type MarkNotificationAsReadMutation = { readonly __typename: 'Mutation', readonly markNotificationAsRead: { readonly __typename: 'MarkNotificationAsReadResponse', readonly success: boolean, readonly readAt?: string | null } };

export type RedoProfilePreviewChangesMutationVariables = Exact<{
  returnProfilePreview: Scalars['Boolean']['input'];
}>;


export type RedoProfilePreviewChangesMutation = { readonly __typename: 'Mutation', readonly redoProfilePreviewChanges?: (
    { readonly __typename: 'Account' }
    & AccountForPreviewFragment
  ) | null };

export type ReorderSocialLinksMutationVariables = Exact<{
  reorderSocialLinks: SocialLinkReorderInput;
}>;


export type ReorderSocialLinksMutation = { readonly __typename: 'Mutation', readonly reorderSocialLinks?: { readonly __typename: 'UpdateSocialLinksResult', readonly user?: { readonly __typename: 'User', readonly id: number, readonly selectedAccount?: { readonly __typename: 'Account', readonly id: number, readonly uuid: string, readonly socialLinks: ReadonlyArray<{ readonly __typename: 'SocialLink', readonly id?: string | null, readonly type: SocialLinkType, readonly url: string, readonly active?: boolean | null, readonly position?: number | null, readonly moderationAction?: string | null }> } | null } | null } | null };

export type RequestEmailVerificationMutationVariables = Exact<{ [key: string]: never; }>;


export type RequestEmailVerificationMutation = { readonly __typename: 'Mutation', readonly requestEmailVerification?: { readonly __typename: 'RequestEmailVerificationResult', readonly result?: string | null } | null };

export type SaveGlowUpToProfileMutationVariables = Exact<{ [key: string]: never; }>;


export type SaveGlowUpToProfileMutation = { readonly __typename: 'Mutation', readonly saveGlowUpToProfile?: { readonly __typename: 'Account', readonly id: number, readonly uuid: string, readonly glowUp?: { readonly __typename: 'GlowUp', readonly conversationId: string, readonly data: ReadonlyArray<{ readonly __typename: 'GlowUpData', readonly toolId: string, readonly isToggled: boolean, readonly type?: GlowUpType | null, readonly paidChange?: { readonly __typename: 'GlowUpPaidChange', readonly isPro: boolean, readonly isPremium: boolean } | null } | null> } | null } | null };

export type SetLinkModifiersMutationVariables = Exact<{
  id: Scalars['Int']['input'];
  modifiers: LinkModifiersInput;
}>;


export type SetLinkModifiersMutation = { readonly __typename: 'Mutation', readonly setLinkModifiers?: { readonly __typename: 'Link', readonly id: number, readonly modifiers: { readonly __typename: 'LinkModifiers', readonly thumbnailUrl?: string | null, readonly layoutOption?: VisualLinkPreviewLayoutOption | null } } | null };

export type SetMultipleLinkPreviewGroupLinkContextMutationVariables = Exact<{
  context: GroupLinkContextInput;
}>;


export type SetMultipleLinkPreviewGroupLinkContextMutation = { readonly __typename: 'Mutation', readonly setMultipleLinkPreviewGroupLinkContext?: { readonly __typename: 'Account', readonly id: number, readonly glowUp?: { readonly __typename: 'GlowUp', readonly status?: GlowUpStatus | null, readonly conversationId: string, readonly data: ReadonlyArray<{ readonly __typename: 'GlowUpData', readonly toolId: string, readonly isToggled: boolean, readonly type?: GlowUpType | null, readonly paidChange?: { readonly __typename: 'GlowUpPaidChange', readonly isPro: boolean, readonly isPremium: boolean } | null } | null> } | null } | null };

export type ToggleGlowUpChangeMutationVariables = Exact<{
  input: ToggleGlowUpChangeInput;
  linksFilter: LinksFilterInput;
  isProfilePreview?: InputMaybe<Scalars['Boolean']['input']>;
  isGlowUpPreview?: InputMaybe<Scalars['Boolean']['input']>;
}>;


export type ToggleGlowUpChangeMutation = { readonly __typename: 'Mutation', readonly toggleGlowUpChange?: { readonly __typename: 'Account', readonly id: number, readonly uuid: string, readonly username: string, readonly isActive: boolean, readonly pageTitle: string, readonly contentWarning?: ContentWarningType | null, readonly description?: string | null, readonly isLogoVisible: boolean, readonly socialLinksPosition: SocialLinksPosition, readonly profilePictureUrl?: string | null, readonly customAvatar?: string | null, readonly customAvatarVideo?: string | null, readonly customAvatarAttributes?: string | null, readonly backgroundImageAttributes?: string | null, readonly backgroundHeroColor?: string | null, readonly backgroundGradient?: ReadonlyArray<string | null> | null, readonly avatarMode: AvatarMode, readonly avatarType: AvatarType, readonly colorPalette: { readonly __typename: 'AppearanceColorPaletteOption', readonly palette: ReadonlyArray<string>, readonly alternatePalette: ReadonlyArray<string> }, readonly socialIntegrations: ReadonlyArray<{ readonly __typename: 'SocialIntegration', readonly type: SocialIntegrationType, readonly id: string }>, readonly links: ReadonlyArray<(
      { readonly __typename: 'Link', readonly parent?: { readonly __typename: 'Link', readonly id: number } | null }
      & LinkFragment
    )>, readonly socialLinks: ReadonlyArray<{ readonly __typename: 'SocialLink', readonly id?: string | null, readonly type: SocialLinkType, readonly url: string, readonly active?: boolean | null, readonly position?: number | null }>, readonly glowUp?: { readonly __typename: 'GlowUp', readonly status?: GlowUpStatus | null, readonly conversationId: string, readonly data: ReadonlyArray<{ readonly __typename: 'GlowUpData', readonly toolId: string, readonly isToggled: boolean, readonly type?: GlowUpType | null, readonly paidChange?: { readonly __typename: 'GlowUpPaidChange', readonly isPro: boolean, readonly isPremium: boolean } | null, readonly incompleteGlowUpData?: { readonly __typename: 'GlowUpIncompleteToolData', readonly message: string } | null, readonly previousState?: { readonly __typename: 'GlowUpToolAnimateLinkPreviousState', readonly links: ReadonlyArray<{ readonly __typename: 'AnimateLinkPreviousStateLink', readonly linkId: number, readonly animation?: ButtonHighlightType | null } | null> } | { readonly __typename: 'GlowUpToolCreateSocialLinkPreviousState', readonly socialLinks: ReadonlyArray<{ readonly __typename: 'CreateSocialLinkPreviousStateLink', readonly id?: string | null, readonly type?: SocialLinkType | null, readonly url?: string | null, readonly active?: boolean | null, readonly position?: number | null } | null> } | { readonly __typename: 'GlowUpToolFeaturedLayoutPreviousState', readonly links: ReadonlyArray<{ readonly __typename: 'FeaturedLayoutPreviousStateLink', readonly linkId: number, readonly layoutOption?: VisualLinkPreviewLayoutOption | null } | null> } | { readonly __typename: 'GlowUpToolHeroPreviousState', readonly avatarMode: AvatarMode } | { readonly __typename: 'GlowUpToolRichMediaSpotifyPreviousState', readonly links: ReadonlyArray<{ readonly __typename: 'RichMediaSpotifyPreviousStateLink', readonly linkId: number, readonly linkType?: string | null, readonly embedOption?: LinkEmbedOptions | null, readonly useLatestEpisode?: boolean | null } | null> } | { readonly __typename: 'GlowUpToolRichMediaYoutubePreviousState', readonly links: ReadonlyArray<{ readonly __typename: 'RichMediaYoutubePreviousStateLink', readonly linkId: number, readonly linkType?: string | null, readonly embedOption?: LinkEmbedOptions | null, readonly autoplay?: boolean | null, readonly mute?: boolean | null, readonly videoId?: string | null, readonly channelId?: string | null, readonly playlistId?: string | null } | null> } | { readonly __typename: 'GlowUpToolSetThumbnailPreviousState', readonly links: ReadonlyArray<{ readonly __typename: 'SetThumbnailPreviousStateLink', readonly linkId: number, readonly thumbnailUrl?: string | null } | null> } | { readonly __typename: 'GlowUpToolUpdateAppearancePreviousState', readonly backgroundColor?: string | null, readonly backgroundGradient?: ReadonlyArray<string | null> | null, readonly backgroundGradientStyle?: string | null, readonly backgroundTint?: number | null, readonly buttonColor?: string | null, readonly buttonStyle?: string | null, readonly buttonShadowStyle?: string | null, readonly buttonCornerStyle?: string | null, readonly buttonTextColor?: string | null, readonly fontStyle?: string | null, readonly fontColor?: string | null, readonly customAvatar?: string | null, readonly backgroundStyle?: string | null, readonly colourway?: string | null, readonly colorPalette?: ReadonlyArray<string | null> | null, readonly whiteLabel?: string | null, readonly backgroundHeroColor?: string | null, readonly luminance?: string | null, readonly customAvatarAttributes?: string | null, readonly canvaAvatarDesignId?: string | null, readonly canvaBackgroundDesignId?: string | null, readonly customAvatarVideo?: string | null, readonly shadowColor?: string | null, readonly backgroundPoster?: string | null, readonly backgroundImage?: string | null, readonly backgroundImageAttributes?: string | null, readonly colorSchema?: string | null } | { readonly __typename: 'GlowUpToolUpdateBioPreviousState', readonly account: { readonly __typename: 'UpdateBioPreviousStateAccount', readonly pageTitle?: string | null, readonly description?: string | null } } | { readonly __typename: 'GlowUpToolUpdateHeadingOptionsPreviousState', readonly headingType?: string | null, readonly headingLogoSize?: string | null, readonly headingEffect?: string | null, readonly headingFont?: string | null, readonly headingColor?: string | null, readonly headingSize?: string | null, readonly headingLogo?: string | null } | { readonly __typename: 'GlowUpToolUpdateLinkTitlePreviousState', readonly updatedLinks?: ReadonlyArray<{ readonly __typename: 'UpdateLinkTitlePreviousStateLink', readonly linkId: number, readonly title?: string | null } | null> | null } | null } | null> } | null, readonly theme: { readonly __typename: 'CelebrityTheme', readonly key: string } | { readonly __typename: 'CustomTheme', readonly luminance: Luminance, readonly key: string, readonly background: { readonly __typename: 'AnimatedBackground', readonly color: string, readonly style: BackgroundStyle, readonly type: BackgroundType } | { readonly __typename: 'ColorBackground', readonly color: string, readonly style: BackgroundStyle, readonly type: BackgroundType } | { readonly __typename: 'DefaultBackground' } | { readonly __typename: 'GradientBackground', readonly colors: ReadonlyArray<string | null>, readonly style: BackgroundStyle, readonly type: BackgroundType, readonly animated?: boolean | null, readonly noise: boolean, readonly name: BackgroundGradientStyle } | { readonly __typename: 'ImageBackground', readonly color: string, readonly imageUrl: string, readonly type: BackgroundType, readonly tint: string, readonly noise: boolean, readonly effect: BackgroundImageEffect } | { readonly __typename: 'VideoBackground', readonly color: string, readonly imageUrl: string, readonly posterUrl?: string | null, readonly type: BackgroundType, readonly tint: string, readonly noise: boolean }, readonly buttonStyle: { readonly __typename: 'ButtonStyle', readonly type: ButtonType, readonly backgroundStyle: { readonly __typename: 'ButtonBackgroundStyle', readonly color: string }, readonly cornerStyle?: { readonly __typename: 'ButtonCornerStyle', readonly type: ButtonCornerType } | null, readonly shadowStyle?: { readonly __typename: 'ButtonShadowStyle', readonly type: ButtonShadowType, readonly color: string } | null, readonly textStyle?: { readonly __typename: 'ButtonTextStyle', readonly color: string } | null }, readonly socialStyle: { readonly __typename: 'SocialStyle', readonly color?: string | null }, readonly typeface: { readonly __typename: 'Typeface', readonly color?: string | null, readonly family: string }, readonly heading: { readonly __typename: 'HeadingOptions', readonly type: HeadingType, readonly font?: string | null, readonly color?: string | null, readonly size: HeadingSize, readonly effect: HeadingEffect, readonly logo?: string | null, readonly logoSize?: HeadingLogoSize | null }, readonly footer: { readonly __typename: 'Footer', readonly logoUrl?: string | null, readonly url?: string | null, readonly color?: string | null } } | { readonly __typename: 'DefaultTheme', readonly key: string } } | null };

export type UndoProfilePreviewChangesMutationVariables = Exact<{
  returnProfilePreview: Scalars['Boolean']['input'];
}>;


export type UndoProfilePreviewChangesMutation = { readonly __typename: 'Mutation', readonly undoProfilePreviewChanges?: (
    { readonly __typename: 'Account' }
    & AccountForPreviewFragment
  ) | null };

export type UpdateAccountAppearanceMutationVariables = Exact<{
  input: UpdateAccountAppearanceInput;
  glowUp?: InputMaybe<GlowUpInput>;
  isProfilePreview?: InputMaybe<Scalars['Boolean']['input']>;
}>;


export type UpdateAccountAppearanceMutation = { readonly __typename: 'Mutation', readonly updateAccountAppearance?: { readonly __typename: 'Account', readonly id: number, readonly uuid: string, readonly customAvatar?: string | null, readonly avatarType: AvatarType, readonly customAvatarAttributes?: string | null, readonly customAvatarVideo?: string | null, readonly hasAccountPreviewChanges: boolean, readonly accountPreviewPaidChanges?: { readonly __typename: 'AccountPreviewPaidChanges', readonly hasProFeatures: boolean, readonly hasPremiumFeatures: boolean } | null } | null };

export type UpdateProfileWithPreviewStateMutationVariables = Exact<{ [key: string]: never; }>;


export type UpdateProfileWithPreviewStateMutation = { readonly __typename: 'Mutation', readonly updateProfileWithPreviewState?: { readonly __typename: 'Account', readonly id: number, readonly uuid: string } | null };

export type UpdateSocialLinkMutationVariables = Exact<{
  updateSocialLink: SocialLinkInput;
}>;


export type UpdateSocialLinkMutation = { readonly __typename: 'Mutation', readonly updateSocialLink?: { readonly __typename: 'UpdateSocialLinksResult', readonly user?: { readonly __typename: 'User', readonly id: number, readonly selectedAccount?: { readonly __typename: 'Account', readonly id: number, readonly uuid: string, readonly socialLinks: ReadonlyArray<{ readonly __typename: 'SocialLink', readonly id?: string | null, readonly url: string, readonly type: SocialLinkType, readonly active?: boolean | null, readonly position?: number | null, readonly moderationAction?: string | null }> } | null } | null } | null };

export type UpdateSocialLinksPositionMutationVariables = Exact<{
  updateSocialLinksPosition: UpdateSocialLinksPositionInput;
}>;


export type UpdateSocialLinksPositionMutation = { readonly __typename: 'Mutation', readonly updateSocialLinksPosition?: { readonly __typename: 'UpdateSocialLinksPositionResult', readonly user?: { readonly __typename: 'User', readonly id: number, readonly selectedAccount?: { readonly __typename: 'Account', readonly id: number, readonly uuid: string, readonly socialLinksPosition: SocialLinksPosition } | null } | null } | null };

export type SetHasVisitedDesignPageMutationVariables = Exact<{ [key: string]: never; }>;


export type SetHasVisitedDesignPageMutation = { readonly __typename: 'Mutation', readonly setHasVisitedDesignPage?: { readonly __typename: 'Account', readonly hasVisitedDesignPage?: boolean | null, readonly id: number } | null };

export type CommerceAccountRewardsQueryVariables = Exact<{
  accountUuid: Scalars['String']['input'];
}>;


export type CommerceAccountRewardsQuery = { readonly __typename: 'Query', readonly commerceAccountRewards: { readonly __typename: 'CommerceAccountRewards', readonly tier: { readonly __typename: 'CommerceRewardsProgramTier', readonly id: string, readonly name: CommerceRewardsProgramTierName, readonly primaryColor: ReadonlyArray<string>, readonly secondaryColor: ReadonlyArray<string> } } };

export type GetRewardsNotificationsQueryVariables = Exact<{
  accountUuid: Scalars['String']['input'];
  timestamp?: InputMaybe<Scalars['DateTime']['input']>;
}>;


export type GetRewardsNotificationsQuery = { readonly __typename: 'Query', readonly commercePollRewardsNotifications: { readonly __typename: 'RewardsNotificationPollResult', readonly timestamp: any, readonly notifications: ReadonlyArray<{ readonly __typename: 'RewardsNotification', readonly text: string, readonly points: number }>, readonly notificationsV2: ReadonlyArray<{ readonly __typename: 'RewardsNotificationV2', readonly title: string, readonly description: string }> } };

export type FollowersAreEnabledQueryVariables = Exact<{
  uuid: Scalars['String']['input'];
}>;


export type FollowersAreEnabledQuery = { readonly __typename: 'Query', readonly followersAreEnabled?: { readonly __typename: 'FollowerEnablementModel', readonly hasFeatureAccess: boolean, readonly enabled?: boolean | null } | null };

export type GetAccountAnalyticsQueryVariables = Exact<{
  account?: InputMaybe<AccountAnalyticsInput>;
  includeStorefront?: InputMaybe<Scalars['Boolean']['input']>;
}>;


export type GetAccountAnalyticsQuery = { readonly __typename: 'Query', readonly getAccountAnalytics?: { readonly __typename: 'AccountAnalytics', readonly lifetime?: { readonly __typename: 'AccountLifetime', readonly clickThroughRate: number, readonly views?: { readonly __typename: 'AccountLifetimeViews', readonly total: number } | null, readonly clicks?: { readonly __typename: 'AccountLifetimeClicks', readonly total: number, readonly profile: number } | null, readonly subscribers?: { readonly __typename: 'AccountLifetimeSubscribers', readonly total: number } | null } | null } | null };

export type GetAccountAnalyticsWithReferrersQueryVariables = Exact<{
  account?: InputMaybe<AccountAnalyticsInput>;
  includeStorefront?: InputMaybe<Scalars['Boolean']['input']>;
  includeReferrers?: InputMaybe<Scalars['Boolean']['input']>;
  range?: InputMaybe<Range>;
}>;


export type GetAccountAnalyticsWithReferrersQuery = { readonly __typename: 'Query', readonly getAccountAnalytics?: { readonly __typename: 'AccountAnalytics', readonly lifetime?: { readonly __typename: 'AccountLifetime', readonly timeToClick: number, readonly clickThroughRate: number, readonly views?: { readonly __typename: 'AccountLifetimeViews', readonly total: number } | null, readonly clicks?: { readonly __typename: 'AccountLifetimeClicks', readonly total: number, readonly profile: number } | null, readonly subscribers?: { readonly __typename: 'AccountLifetimeSubscribers', readonly total: number } | null, readonly payments?: ReadonlyArray<{ readonly __typename: 'AccountLifetimePayment', readonly revenueNet: number, readonly currency: string } | null> | null } | null, readonly referrers?: { readonly __typename: 'AccountReferrers', readonly referrers?: ReadonlyArray<{ readonly __typename: 'AccountReferrer', readonly name?: string | null, readonly clickThroughRate?: number | null, readonly views?: { readonly __typename: 'AccountViews', readonly total: number } | null, readonly clicks?: { readonly __typename: 'AccountClicks', readonly total: number, readonly profile?: number | null } | null } | null> | null } | null } | null };

export type GetAccountAvatarPropertiesQueryVariables = Exact<{
  isProfilePreview: Scalars['Boolean']['input'];
}>;


export type GetAccountAvatarPropertiesQuery = { readonly __typename: 'Query', readonly currentUser?: { readonly __typename: 'User', readonly id: number, readonly selectedAccount?: { readonly __typename: 'Account', readonly id: number, readonly customAvatarAttributes?: string | null, readonly customAvatar?: string | null, readonly avatarType: AvatarType, readonly avatarMode: AvatarMode } | null } | null };

export type GetActiveSponsoredOffersQueryVariables = Exact<{
  accountUuid: Scalars['String']['input'];
}>;


export type GetActiveSponsoredOffersQuery = { readonly __typename: 'Query', readonly getActiveSponsoredOffers: ReadonlyArray<{ readonly __typename: 'SponsoredOffer', readonly id: string, readonly isNew?: boolean | null }> };

export type GetCanvaAssetUploadJobQueryVariables = Exact<{
  input: GetCanvaAssetUploadJobInput;
}>;


export type GetCanvaAssetUploadJobQuery = { readonly __typename: 'Query', readonly getCanvaAssetUploadJob: { readonly __typename: 'CanvaAssetUploadJobResult', readonly jobId?: string | null, readonly status?: string | null, readonly error?: string | null, readonly canvaAsset?: { readonly __typename: 'CanvaAsset', readonly id?: string | null } | null } };

export type GetCanvaDesignQueryVariables = Exact<{
  id: Scalars['String']['input'];
  accountUuid: Scalars['String']['input'];
  returnNavigation?: InputMaybe<Scalars['String']['input']>;
}>;


export type GetCanvaDesignQuery = { readonly __typename: 'Query', readonly accountFromUuid?: { readonly __typename: 'Account', readonly id: number, readonly integrations: ReadonlyArray<{ readonly __typename: 'Integration', readonly id: string, readonly active: boolean, readonly type: IntegrationType, readonly context?: { readonly __typename: 'CanvaIntegrationContext', readonly isAuthenticated?: boolean | null, readonly design?: { readonly __typename: 'CanvaDesign', readonly id?: string | null, readonly title?: string | null, readonly thumbnailUrl?: string | null, readonly editUrl?: string | null, readonly viewUrl?: string | null, readonly pageCount?: number | null, readonly pages?: ReadonlyArray<{ readonly __typename: 'CanvaDesignPage', readonly index?: number | null, readonly thumbnailUrl?: string | null } | null> | null } | null } | { readonly __typename: 'DotDigitalIntegrationContext' } | { readonly __typename: 'GoogleCalendarIntegrationContext' } | { readonly __typename: 'GoogleSheetsIntegrationContext' } | { readonly __typename: 'GoogleYouTubeIntegrationContext' } | { readonly __typename: 'KitIntegrationContext' } | { readonly __typename: 'KlaviyoIntegrationContext' } | { readonly __typename: 'MailchimpIntegrationContext' } | { readonly __typename: 'TwitchExtensionIntegrationContext' } | { readonly __typename: 'ZapierIntegrationContext' } | { readonly __typename: 'ZoomIntegrationContext' } | null }> } | null };

export type GetCanvaDesignExportJobQueryVariables = Exact<{
  input: GetCanvaDesignExportJobInput;
}>;


export type GetCanvaDesignExportJobQuery = { readonly __typename: 'Query', readonly getCanvaDesignExportJob: { readonly __typename: 'CanvaDesignExportJobResult', readonly jobId?: string | null, readonly status?: string | null, readonly error?: string | null, readonly canvaDesignUrls?: ReadonlyArray<string | null> | null } };

export type GetCanvaIntegrationQueryVariables = Exact<{
  accountUuid: Scalars['String']['input'];
  query?: InputMaybe<Scalars['String']['input']>;
  continuation?: InputMaybe<Scalars['String']['input']>;
  returnNavigation?: InputMaybe<Scalars['String']['input']>;
  includeDesigns?: InputMaybe<Scalars['Boolean']['input']>;
  includeUser?: InputMaybe<Scalars['Boolean']['input']>;
}>;


export type GetCanvaIntegrationQuery = { readonly __typename: 'Query', readonly accountFromUuid?: { readonly __typename: 'Account', readonly id: number, readonly uuid: string, readonly integrations: ReadonlyArray<{ readonly __typename: 'Integration', readonly id: string, readonly active: boolean, readonly type: IntegrationType, readonly context?: { readonly __typename: 'CanvaIntegrationContext', readonly isAuthenticated?: boolean | null, readonly user?: { readonly __typename: 'CanvaUser', readonly userId?: string | null } | null, readonly designs?: { readonly __typename: 'CanvaDesignList', readonly continuation?: string | null, readonly items?: ReadonlyArray<{ readonly __typename: 'CanvaDesign', readonly id?: string | null, readonly title?: string | null, readonly thumbnailUrl?: string | null, readonly editUrl?: string | null, readonly viewUrl?: string | null, readonly pageCount?: number | null } | null> | null } | null } | { readonly __typename: 'DotDigitalIntegrationContext' } | { readonly __typename: 'GoogleCalendarIntegrationContext' } | { readonly __typename: 'GoogleSheetsIntegrationContext' } | { readonly __typename: 'GoogleYouTubeIntegrationContext' } | { readonly __typename: 'KitIntegrationContext' } | { readonly __typename: 'KlaviyoIntegrationContext' } | { readonly __typename: 'MailchimpIntegrationContext' } | { readonly __typename: 'TwitchExtensionIntegrationContext' } | { readonly __typename: 'ZapierIntegrationContext' } | { readonly __typename: 'ZoomIntegrationContext' } | null }> } | null };

export type GetCommerceBrandProfileForDisplayQueryVariables = Exact<{
  accountUuid: Scalars['String']['input'];
}>;


export type GetCommerceBrandProfileForDisplayQuery = { readonly __typename: 'Query', readonly commerceBrandProfile: { readonly __typename: 'CommerceBrandProfile', readonly id?: string | null, readonly accountUuid?: string | null, readonly setupStatus: { readonly __typename: 'CommerceBrandProfileSetupStatus', readonly hasConnectedSocials: boolean, readonly cards: ReadonlyArray<{ readonly __typename: 'CommerceBrandProfileSetupCards', readonly id?: string | null, readonly icon?: string | null, readonly isComplete: boolean, readonly title?: string | null }> } } };

export type CommerceChatSessionTokenQueryVariables = Exact<{
  userId: Scalars['String']['input'];
}>;


export type CommerceChatSessionTokenQuery = { readonly __typename: 'Query', readonly commerceChatSessionToken?: { readonly __typename: 'CommerceChatSessionToken', readonly token: string } | null };

export type GetCommerceWalletQueryVariables = Exact<{
  accountUuid: Scalars['String']['input'];
  country: Scalars['String']['input'];
}>;


export type GetCommerceWalletQuery = { readonly __typename: 'Query', readonly getCommerceWallet: { readonly __typename: 'Wallet', readonly accountUuid: string, readonly balances: ReadonlyArray<{ readonly __typename: 'WalletBalance', readonly currency: any, readonly amount: number }> }, readonly allCommissions: { readonly __typename: 'GetCommerceCommissionsByAccountUuidResult', readonly summary: { readonly __typename: 'CommissionSummary', readonly displayValue: number } }, readonly getWalletStateV3: { readonly __typename: 'WalletStateV3', readonly digitalCardInfo: { readonly __typename: 'CardInfo', readonly balance: number, readonly currency: string } } };

export type GetCurrentUserQueryVariables = Exact<{
  isGlowUpPreview?: InputMaybe<Scalars['Boolean']['input']>;
}>;


export type GetCurrentUserQuery = { readonly __typename: 'Query', readonly currentCountryCode: { readonly __typename: 'CountryCode', readonly countryCode: string }, readonly currentUser?: { readonly __typename: 'User', readonly id: number, readonly uuid: string, readonly emailVerified?: number | null, readonly email?: string | null, readonly canCreateMultiProfile?: boolean | null, readonly username?: string | null, readonly signupMethod?: string | null, readonly accounts: ReadonlyArray<{ readonly __typename: 'Account', readonly id: number, readonly uuid: string, readonly username: string, readonly status?: string | null, readonly customAvatar?: string | null, readonly pageTitle: string, readonly tier?: string | null, readonly theme: { readonly __typename: 'CelebrityTheme', readonly key: string } | { readonly __typename: 'CustomTheme', readonly key: string } | { readonly __typename: 'DefaultTheme', readonly key: string } }>, readonly selectedAccount?: { readonly __typename: 'Account', readonly id: number, readonly tier?: string | null, readonly uuid: string, readonly eligibleForMonetization?: string | null, readonly canvaAvatarDesignId?: string | null, readonly backgroundImage?: string | null, readonly backgroundImageAttributes?: string | null, readonly canvaBackgroundDesignId?: string | null, readonly isSensitiveWithGracePeriod?: boolean | null, readonly customAvatar?: string | null, readonly customAvatarAttributes?: string | null, readonly avatarType: AvatarType, readonly country?: string | null, readonly isStoreTabEnabled?: boolean | null, readonly hasUsedFreeProTier: boolean, readonly status?: string | null, readonly verticals?: ReadonlyArray<string | null> | null, readonly verticalsV2?: ReadonlyArray<string | null> | null, readonly username: string, readonly profilePicture?: string | null, readonly realName?: string | null, readonly pageTitle: string, readonly description?: string | null, readonly headingType?: HeadingType | null, readonly hasUndoChanges: boolean, readonly hasRedoChanges: boolean, readonly isPaymentWarning: boolean, readonly hasAccountPreviewChanges: boolean, readonly isEnterprise?: boolean | null, readonly hasVisitedDesignPage?: boolean | null, readonly inAppMessages: ReadonlyArray<{ readonly __typename: 'InAppMessage', readonly code: MessageCode, readonly level: MessageLevel, readonly dismissedAt?: string | null, readonly count?: number | null }>, readonly socialLinks: ReadonlyArray<{ readonly __typename: 'SocialLink', readonly id?: string | null, readonly type: SocialLinkType, readonly url: string, readonly position?: number | null }>, readonly theme: { readonly __typename: 'CelebrityTheme', readonly key: string } | { readonly __typename: 'CustomTheme', readonly key: string } | { readonly __typename: 'DefaultTheme', readonly key: string }, readonly planSubscription?: { readonly __typename: 'PlanSubscription', readonly id: number, readonly paymentMethod: string, readonly isActive: boolean, readonly periodStart?: string | null, readonly periodEnd?: string | null, readonly couponId?: string | null, readonly isNonRenewing: boolean } | null, readonly subscriptionV2?: { readonly __typename: 'SubscriptionV2', readonly id: number, readonly paymentMethod: string, readonly isActive: boolean, readonly periodEnd?: string | null, readonly couponId?: string | null, readonly isNonRenewing: boolean, readonly accountLimit?: number | null, readonly activeAccount?: { readonly __typename: 'Account', readonly id: number } | null } | null, readonly accountPreviewPaidChanges?: { readonly __typename: 'AccountPreviewPaidChanges', readonly hasProFeatures: boolean, readonly hasPremiumFeatures: boolean } | null } | null } | null };

export type GetFollowersQueryVariables = Exact<{
  account?: InputMaybe<AccountInput>;
}>;


export type GetFollowersQuery = { readonly __typename: 'Query', readonly getFollowers: { readonly __typename: 'FollowersSummaryModel', readonly emailAgreeToShareCount: number, readonly phoneAgreeToShareCount: number, readonly totalCount?: number | null, readonly totalCountDiff?: number | null, readonly totalSubscribedCount?: number | null, readonly totalUnsubscribedCount?: number | null, readonly totalCountTrend?: { readonly __typename: 'FollowersSummaryTrendModel', readonly diff?: number | null } | null, readonly totalCountDiffTrend?: { readonly __typename: 'FollowersSummaryTrendModel', readonly diff?: number | null } | null, readonly totalSubscribedCountTrend?: { readonly __typename: 'FollowersSummaryTrendModel', readonly diff?: number | null } | null, readonly totalUnsubscribedCountTrend?: { readonly __typename: 'FollowersSummaryTrendModel', readonly diff?: number | null } | null } };

export type GetFreeHomeAnalyticsQueryVariables = Exact<{
  accountId: Scalars['Int']['input'];
}>;


export type GetFreeHomeAnalyticsQuery = { readonly __typename: 'Query', readonly getAccountAnalytics?: { readonly __typename: 'AccountAnalytics', readonly lifetime?: { readonly __typename: 'AccountLifetime', readonly views?: { readonly __typename: 'AccountLifetimeViews', readonly total: number } | null, readonly clicks?: { readonly __typename: 'AccountLifetimeClicks', readonly total: number } | null } | null } | null };

export type GetGlowUpStatusQueryVariables = Exact<{ [key: string]: never; }>;


export type GetGlowUpStatusQuery = { readonly __typename: 'Query', readonly currentUser?: { readonly __typename: 'User', readonly id: number, readonly selectedAccount?: { readonly __typename: 'Account', readonly id: number, readonly uuid: string, readonly hasCustomBackgroundColor?: boolean | null, readonly backgroundImage?: string | null, readonly backgroundStyle?: string | null, readonly colorPalette: { readonly __typename: 'AppearanceColorPaletteOption', readonly palette: ReadonlyArray<string>, readonly alternatePalette: ReadonlyArray<string> }, readonly glowUp?: { readonly __typename: 'GlowUp', readonly status?: GlowUpStatus | null, readonly conversationId: string, readonly data: ReadonlyArray<{ readonly __typename: 'GlowUpData', readonly toolId: string, readonly isToggled: boolean, readonly type?: GlowUpType | null, readonly paidChange?: { readonly __typename: 'GlowUpPaidChange', readonly isPro: boolean, readonly isPremium: boolean } | null, readonly incompleteGlowUpData?: { readonly __typename: 'GlowUpIncompleteToolData', readonly message: string } | null, readonly previousState?: { readonly __typename: 'GlowUpToolAnimateLinkPreviousState', readonly links: ReadonlyArray<{ readonly __typename: 'AnimateLinkPreviousStateLink', readonly linkId: number, readonly animation?: ButtonHighlightType | null } | null> } | { readonly __typename: 'GlowUpToolCreateSocialLinkPreviousState', readonly socialLinks: ReadonlyArray<{ readonly __typename: 'CreateSocialLinkPreviousStateLink', readonly type?: SocialLinkType | null, readonly url?: string | null, readonly id?: string | null, readonly active?: boolean | null, readonly position?: number | null } | null> } | { readonly __typename: 'GlowUpToolFeaturedLayoutPreviousState', readonly links: ReadonlyArray<{ readonly __typename: 'FeaturedLayoutPreviousStateLink', readonly linkId: number, readonly layoutOption?: VisualLinkPreviewLayoutOption | null } | null> } | { readonly __typename: 'GlowUpToolHeroPreviousState', readonly avatarMode: AvatarMode } | { readonly __typename: 'GlowUpToolRichMediaSpotifyPreviousState', readonly links: ReadonlyArray<{ readonly __typename: 'RichMediaSpotifyPreviousStateLink', readonly linkId: number, readonly linkType?: string | null, readonly embedOption?: LinkEmbedOptions | null, readonly useLatestEpisode?: boolean | null } | null> } | { readonly __typename: 'GlowUpToolRichMediaYoutubePreviousState', readonly links: ReadonlyArray<{ readonly __typename: 'RichMediaYoutubePreviousStateLink', readonly linkId: number, readonly linkType?: string | null, readonly embedOption?: LinkEmbedOptions | null, readonly autoplay?: boolean | null, readonly mute?: boolean | null, readonly videoId?: string | null, readonly channelId?: string | null, readonly playlistId?: string | null } | null> } | { readonly __typename: 'GlowUpToolSetThumbnailPreviousState', readonly links: ReadonlyArray<{ readonly __typename: 'SetThumbnailPreviousStateLink', readonly linkId: number, readonly thumbnailUrl?: string | null } | null> } | { readonly __typename: 'GlowUpToolUpdateAppearancePreviousState', readonly backgroundColor?: string | null, readonly backgroundGradient?: ReadonlyArray<string | null> | null, readonly backgroundGradientStyle?: string | null, readonly backgroundTint?: number | null, readonly buttonColor?: string | null, readonly buttonStyle?: string | null, readonly buttonShadowStyle?: string | null, readonly buttonCornerStyle?: string | null, readonly buttonTextColor?: string | null, readonly fontStyle?: string | null, readonly fontColor?: string | null, readonly customAvatar?: string | null, readonly backgroundStyle?: string | null, readonly colourway?: string | null, readonly colorPalette?: ReadonlyArray<string | null> | null, readonly whiteLabel?: string | null, readonly backgroundHeroColor?: string | null, readonly luminance?: string | null, readonly customAvatarAttributes?: string | null, readonly canvaAvatarDesignId?: string | null, readonly canvaBackgroundDesignId?: string | null, readonly customAvatarVideo?: string | null, readonly shadowColor?: string | null, readonly backgroundPoster?: string | null, readonly backgroundImage?: string | null, readonly backgroundImageAttributes?: string | null, readonly colorSchema?: string | null } | { readonly __typename: 'GlowUpToolUpdateBioPreviousState', readonly account: { readonly __typename: 'UpdateBioPreviousStateAccount', readonly pageTitle?: string | null, readonly description?: string | null } } | { readonly __typename: 'GlowUpToolUpdateHeadingOptionsPreviousState', readonly headingType?: string | null, readonly headingLogoSize?: string | null, readonly headingEffect?: string | null, readonly headingFont?: string | null, readonly headingColor?: string | null, readonly headingSize?: string | null, readonly headingLogo?: string | null } | { readonly __typename: 'GlowUpToolUpdateLinkTitlePreviousState', readonly updatedLinks?: ReadonlyArray<{ readonly __typename: 'UpdateLinkTitlePreviousStateLink', readonly linkId: number, readonly title?: string | null } | null> | null } | null } | null> } | null, readonly theme: { readonly __typename: 'CelebrityTheme', readonly key: string } | { readonly __typename: 'CustomTheme', readonly luminance: Luminance, readonly key: string, readonly background: { readonly __typename: 'AnimatedBackground', readonly color: string, readonly style: BackgroundStyle, readonly type: BackgroundType } | { readonly __typename: 'ColorBackground', readonly color: string, readonly style: BackgroundStyle, readonly type: BackgroundType } | { readonly __typename: 'DefaultBackground' } | { readonly __typename: 'GradientBackground', readonly colors: ReadonlyArray<string | null>, readonly style: BackgroundStyle, readonly type: BackgroundType, readonly animated?: boolean | null, readonly noise: boolean, readonly name: BackgroundGradientStyle } | { readonly __typename: 'ImageBackground', readonly color: string, readonly imageUrl: string, readonly type: BackgroundType, readonly tint: string, readonly noise: boolean, readonly effect: BackgroundImageEffect } | { readonly __typename: 'VideoBackground', readonly color: string, readonly imageUrl: string, readonly posterUrl?: string | null, readonly type: BackgroundType, readonly tint: string, readonly noise: boolean }, readonly buttonStyle: { readonly __typename: 'ButtonStyle', readonly type: ButtonType, readonly backgroundStyle: { readonly __typename: 'ButtonBackgroundStyle', readonly color: string }, readonly cornerStyle?: { readonly __typename: 'ButtonCornerStyle', readonly type: ButtonCornerType } | null, readonly shadowStyle?: { readonly __typename: 'ButtonShadowStyle', readonly type: ButtonShadowType, readonly color: string } | null, readonly textStyle?: { readonly __typename: 'ButtonTextStyle', readonly color: string } | null }, readonly socialStyle: { readonly __typename: 'SocialStyle', readonly color?: string | null }, readonly typeface: { readonly __typename: 'Typeface', readonly color?: string | null, readonly family: string }, readonly heading: { readonly __typename: 'HeadingOptions', readonly type: HeadingType, readonly font?: string | null, readonly color?: string | null, readonly size: HeadingSize, readonly effect: HeadingEffect, readonly logo?: string | null, readonly logoSize?: HeadingLogoSize | null }, readonly footer: { readonly __typename: 'Footer', readonly logoUrl?: string | null, readonly url?: string | null, readonly color?: string | null } } | { readonly __typename: 'DefaultTheme', readonly key: string } } | null } | null };

export type IsWalletViewableQueryVariables = Exact<{
  accountUuid: Scalars['String']['input'];
  country?: InputMaybe<Scalars['String']['input']>;
}>;


export type IsWalletViewableQuery = { readonly __typename: 'Query', readonly isWalletViewableV3: { readonly __typename: 'isWalletViewableV3', readonly isDigitalWalletViewable: boolean, readonly isLegacyViewable: boolean } };

export type GetLinksQueryVariables = Exact<{
  numberOfLinks?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<LinkStatus>;
}>;


export type GetLinksQuery = { readonly __typename: 'Query', readonly getLinks: { readonly __typename: 'LinksPage', readonly totalCount: number, readonly items: ReadonlyArray<{ readonly __typename: 'Link', readonly id: number, readonly title?: string | null, readonly url?: string | null, readonly active: boolean, readonly position: number, readonly type?: string | null, readonly status: LinkStatus, readonly modifiers: { readonly __typename: 'LinkModifiers', readonly thumbnailUrl?: string | null } }> } };

export type GetNotificationCountsQueryVariables = Exact<{
  accountUuid: Scalars['String']['input'];
}>;


export type GetNotificationCountsQuery = { readonly __typename: 'Query', readonly getNotificationCounts: { readonly __typename: 'NotificationCounts', readonly summary: { readonly __typename: 'NotificationCountsSummary', readonly unreadCount: number } } };

export type GetNotificationsQueryVariables = Exact<{
  accountUuid: Scalars['String']['input'];
  first?: Scalars['Int']['input'];
  after?: InputMaybe<Scalars['String']['input']>;
  status?: Scalars['String']['input'];
  category?: Scalars['String']['input'];
}>;


export type GetNotificationsQuery = { readonly __typename: 'Query', readonly getNotifications: { readonly __typename: 'NotificationConnection', readonly edges: ReadonlyArray<{ readonly __typename: 'NotificationEdge', readonly cursor: string, readonly node: { readonly __typename: 'NotificationNode', readonly id: string, readonly category: NotificationCategory, readonly type: string, readonly eventName: string, readonly title: string, readonly body: string, readonly imageUrl?: string | null, readonly createdAt: string, readonly readAt?: string | null, readonly status: string, readonly deepLink?: { readonly __typename: 'DeepLink', readonly mobile?: { readonly __typename: 'DeepLinkMobile', readonly url: string, readonly fallback?: string | null } | null, readonly web?: { readonly __typename: 'DeepLinkWeb', readonly url: string } | null } | null } }>, readonly pageInfo: { readonly __typename: 'PageInfo', readonly startCursor?: string | null, readonly endCursor?: string | null, readonly hasPreviousPage: boolean, readonly hasNextPage: boolean } } };

export type GetPlansWithPricesQueryVariables = Exact<{
  countryCode: Scalars['String']['input'];
}>;


export type GetPlansWithPricesQuery = { readonly __typename: 'Query', readonly getPlansWithPrices: ReadonlyArray<{ readonly __typename: 'GetPlansWithPricesResponse', readonly id: string, readonly tier: string, readonly displayName: string, readonly frequency: string, readonly currency: string, readonly price: number, readonly formattedPrice: string, readonly formattedPriceFrequency: string, readonly currencySymbol: string }> };

export type GetSauceKeyQueryVariables = Exact<{ [key: string]: never; }>;


export type GetSauceKeyQuery = { readonly __typename: 'Query', readonly getSauceKey: string };

export type GetSocialLinksQueryVariables = Exact<{ [key: string]: never; }>;


export type GetSocialLinksQuery = { readonly __typename: 'Query', readonly currentUser?: { readonly __typename: 'User', readonly id: number, readonly selectedAccount?: { readonly __typename: 'Account', readonly id: number, readonly uuid: string, readonly socialLinksPosition: SocialLinksPosition, readonly isSocialLinksPositionEditable: boolean, readonly socialLinks: ReadonlyArray<{ readonly __typename: 'SocialLink', readonly id?: string | null, readonly type: SocialLinkType, readonly url: string, readonly active?: boolean | null, readonly position?: number | null, readonly moderationAction?: string | null }> } | null } | null };

export type GetSponsoredOffersBySponsorshipIdsQueryVariables = Exact<{
  input: GetSponsoredOffersBySponsorshipIdsInput;
}>;


export type GetSponsoredOffersBySponsorshipIdsQuery = { readonly __typename: 'Query', readonly getSponsoredOffersBySponsorshipIds: ReadonlyArray<{ readonly __typename: 'SponsoredOffer', readonly id: string, readonly title: string, readonly image?: string | null, readonly url: string, readonly offerType: string, readonly marketplace: string, readonly metadata: { readonly __typename: 'SponsoredOfferMetadata', readonly vendorIcon?: string | null, readonly description: string, readonly termsAndConditions?: string | null } }> };

export type GetTotalBalanceByCurrencyQueryVariables = Exact<{
  accountUuid: Scalars['String']['input'];
}>;


export type GetTotalBalanceByCurrencyQuery = { readonly __typename: 'Query', readonly getTotalBalanceByCurrency: ReadonlyArray<{ readonly __typename: 'WalletTotalBalance', readonly amount: number, readonly currency: string }> };

export type GetWalletExperienceQueryVariables = Exact<{
  accountUuid: Scalars['String']['input'];
}>;


export type GetWalletExperienceQuery = { readonly __typename: 'Query', readonly walletExperience: WalletExperience };

export type GetWalletStateQueryVariables = Exact<{
  accountUuid: Scalars['String']['input'];
}>;


export type GetWalletStateQuery = { readonly __typename: 'Query', readonly getWalletStateV3: { readonly __typename: 'WalletStateV3', readonly affiliateCardInfo: { readonly __typename: 'CardInfo', readonly currency: string, readonly balance: number, readonly balanceV2?: number | null, readonly available: number, readonly nextPayoutDate: any, readonly transferEligibilityErrors: ReadonlyArray<WalletTransferEligibilityErrors> }, readonly digitalCardInfo: { readonly __typename: 'CardInfo', readonly currency: string, readonly balance: number, readonly balanceV2?: number | null, readonly available: number, readonly nextPayoutDate: any, readonly transferEligibilityErrors: ReadonlyArray<WalletTransferEligibilityErrors> }, readonly items: ReadonlyArray<{ readonly __typename: 'Item', readonly id: number, readonly type: string, readonly saleType: string, readonly data: { readonly __typename: 'AffiliateTransaction', readonly id: string, readonly status: string } | { readonly __typename: 'DigitalTransaction', readonly id: string, readonly status: string } | { readonly __typename: 'Payout' } }> } };

export type GetWorkspacesForCurrentUserQueryVariables = Exact<{ [key: string]: never; }>;


export type GetWorkspacesForCurrentUserQuery = { readonly __typename: 'Query', readonly getWorkspacesForCurrentUser: ReadonlyArray<{ readonly __typename: 'WorkspaceUser', readonly role: WorkspaceRole, readonly workspace: { readonly __typename: 'Workspace', readonly id: number, readonly name: string, readonly avatarUrl?: string | null, readonly profiles: { readonly __typename: 'WorkspaceProfilesPage', readonly items: ReadonlyArray<{ readonly __typename: 'Account', readonly id: number, readonly uuid: string, readonly username: string, readonly customAvatar?: string | null }>, readonly pageInfo: { readonly __typename: 'PaginationResult', readonly totalCount: number, readonly currentPage: number, readonly totalPages: number } } } }> };

export type AssistantSendMessageMutationVariables = Exact<{
  accountUuid: Scalars['String']['input'];
  conversationId?: InputMaybe<Scalars['String']['input']>;
  message: ChatMessage;
}>;


export type AssistantSendMessageMutation = { readonly __typename: 'Mutation', readonly assistantSendMessage?: { readonly __typename: 'AssistantResponse', readonly conversationId: string, readonly responseId?: string | null, readonly toolId?: string | null, readonly done: boolean, readonly chat: ReadonlyArray<{ readonly __typename: 'AssistantMessage', readonly content: string }> } | null };

export type AssistantPollResponseQueryVariables = Exact<{
  conversationId: Scalars['String']['input'];
  responseId: Scalars['String']['input'];
}>;


export type AssistantPollResponseQuery = { readonly __typename: 'Query', readonly assistantPollResponse?: { readonly __typename: 'AssistantResponse', readonly conversationId: string, readonly toolId?: string | null, readonly done: boolean, readonly chat: ReadonlyArray<{ readonly __typename: 'AssistantMessage', readonly content: string }> } | null };

export type AssistantFollowUpQuestionsQueryVariables = Exact<{
  conversationId: Scalars['String']['input'];
}>;


export type AssistantFollowUpQuestionsQuery = { readonly __typename: 'Query', readonly assistantFollowUpQuestions: ReadonlyArray<string> };

export type AssistantLastMessageQueryVariables = Exact<{
  conversationId: Scalars['String']['input'];
}>;


export type AssistantLastMessageQuery = { readonly __typename: 'Query', readonly assistantLastMessage?: { readonly __typename: 'AssistantResponse', readonly conversationId: string, readonly done: boolean, readonly toolId?: string | null, readonly chat: ReadonlyArray<{ readonly __typename: 'AssistantMessage', readonly content: string }> } | null };

export type ProfilePreviewFromUuidQueryVariables = Exact<{
  uuid: Scalars['String']['input'];
  linksFilter: LinksFilterInput;
  integrationsFilter: IntegrationsFilterInput;
  isProfilePreview?: InputMaybe<Scalars['Boolean']['input']>;
  isGlowUpPreview?: InputMaybe<Scalars['Boolean']['input']>;
  isDowngradedPreview?: InputMaybe<Scalars['Boolean']['input']>;
}>;


export type ProfilePreviewFromUuidQuery = { readonly __typename: 'Query', readonly accountFromUuid?: { readonly __typename: 'Account', readonly id: number, readonly uuid: string, readonly username: string, readonly isActive: boolean, readonly pageTitle: string, readonly googleAnalyticsId?: string | null, readonly facebookPixelId?: string | null, readonly donationsActive: boolean, readonly causeBanner?: string | null, readonly contentWarning?: ContentWarningType | null, readonly description?: string | null, readonly isLogoVisible: boolean, readonly socialLinksPosition: SocialLinksPosition, readonly expandableLinkCaret?: boolean | null, readonly profileBadges?: ReadonlyArray<ProfileBadges> | null, readonly isShareButtonEnabled?: boolean | null, readonly isShareWithEllipsis?: boolean | null, readonly isInitialsProfileEnabled?: boolean | null, readonly isAppearanceRebrandEnabled?: boolean | null, readonly isWhatsappNotificationsEnabled?: boolean | null, readonly isVenmoEnabled?: boolean | null, readonly isSquareWalletEnabled?: boolean | null, readonly profilePictureUrl?: string | null, readonly customAvatar?: string | null, readonly customAvatarVideo?: string | null, readonly customAvatarAttributes?: string | null, readonly backgroundImageAttributes?: string | null, readonly isAmazonAffiliateEnabled?: boolean | null, readonly profileLinkContentDisplayType?: string | null, readonly groupsEnabled: boolean, readonly isVisualLinkPreviewsEnabled?: boolean | null, readonly isStoreTabEnabled?: boolean | null, readonly isProfilePreviewsLinkAppsEnabled: boolean, readonly eligibleForMonetization?: string | null, readonly backgroundHeroColor?: string | null, readonly backgroundGradient?: ReadonlyArray<string | null> | null, readonly headingColor?: string | null, readonly headingFont?: string | null, readonly headingSize?: HeadingSize | null, readonly headingEffect?: HeadingEffect | null, readonly headingLogo?: string | null, readonly headingLogoSize?: HeadingLogoSize | null, readonly headingType?: HeadingType | null, readonly avatarMode: AvatarMode, readonly avatarType: AvatarType, readonly isEligibleForProfileLinkAppRebuild: boolean, readonly metaAttributes?: { readonly __typename: 'MetaAttributes', readonly ogImageBackgroundType?: OgImageBackgroundType | null, readonly ogImageBackgroundColor?: string | null } | null, readonly colorPalette: { readonly __typename: 'AppearanceColorPaletteOption', readonly palette: ReadonlyArray<string>, readonly alternatePalette: ReadonlyArray<string> }, readonly socialIntegrations: ReadonlyArray<{ readonly __typename: 'SocialIntegration', readonly type: SocialIntegrationType, readonly id: string }>, readonly socialFeeds: ReadonlyArray<{ readonly __typename: 'SocialFeed', readonly id: string, readonly source: SocialFeedSource, readonly type: SocialFeedType, readonly layout: SocialFeedLayoutType, readonly active: boolean, readonly title?: string | null, readonly socialIntegration?: { readonly __typename: 'SocialIntegration', readonly id: string } | null, readonly posts: ReadonlyArray<{ readonly __typename: 'SocialFeedPost', readonly id: string, readonly externalId: string, readonly postType: SocialFeedPostType, readonly mediaUrl: string, readonly thumbnailUrl?: string | null, readonly url: string, readonly pinned: boolean, readonly visible: boolean, readonly timestamp: string, readonly caption?: string | null, readonly media: ReadonlyArray<{ readonly __typename: 'SocialFeedPostMedia', readonly id: string, readonly externalId: string, readonly mediaType: SocialFeedPostMediaType, readonly mediaUrl: string, readonly thumbnailUrl: string, readonly links: ReadonlyArray<{ readonly __typename: 'Link', readonly title?: string | null, readonly url?: string | null, readonly id: number, readonly coordinates?: { readonly __typename: 'SocialFeedPostMediaLinkCoordinates', readonly x: number, readonly y: number, readonly top: number, readonly left: number } | null } | null> }> }> }>, readonly pageMeta?: { readonly __typename: 'PageMeta', readonly title?: string | null, readonly description?: string | null } | null, readonly affiliateTokens: ReadonlyArray<{ readonly __typename: 'AffiliateToken', readonly program: AffiliateProgramType, readonly advertiser?: AffiliateAdvertiserType | null, readonly token: string, readonly aid?: string | null }>, readonly integrations: ReadonlyArray<{ readonly __typename: 'Integration', readonly id: string, readonly active: boolean, readonly type: IntegrationType, readonly context?: { readonly __typename: 'CanvaIntegrationContext' } | { readonly __typename: 'DotDigitalIntegrationContext', readonly position?: string | null, readonly title?: string | null, readonly message?: string | null, readonly termsUrl?: string | null, readonly termsLabel?: string | null } | { readonly __typename: 'GoogleCalendarIntegrationContext' } | { readonly __typename: 'GoogleSheetsIntegrationContext', readonly position?: string | null, readonly title?: string | null, readonly message?: string | null, readonly termsUrl?: string | null, readonly termsLabel?: string | null } | { readonly __typename: 'GoogleYouTubeIntegrationContext' } | { readonly __typename: 'KitIntegrationContext' } | { readonly __typename: 'KlaviyoIntegrationContext' } | { readonly __typename: 'MailchimpIntegrationContext', readonly position?: string | null, readonly title?: string | null, readonly message?: string | null, readonly termsUrl?: string | null, readonly termsLabel?: string | null } | { readonly __typename: 'TwitchExtensionIntegrationContext' } | { readonly __typename: 'ZapierIntegrationContext', readonly position?: string | null, readonly title?: string | null, readonly message?: string | null, readonly termsUrl?: string | null, readonly termsLabel?: string | null } | { readonly __typename: 'ZoomIntegrationContext' } | null }>, readonly links: ReadonlyArray<(
      { readonly __typename: 'Link', readonly parent?: { readonly __typename: 'Link', readonly id: number } | null }
      & LinkFragment
    )>, readonly socialLinks: ReadonlyArray<{ readonly __typename: 'SocialLink', readonly id?: string | null, readonly type: SocialLinkType, readonly url: string, readonly active?: boolean | null, readonly position?: number | null }>, readonly theme: { readonly __typename: 'CelebrityTheme', readonly key: string } | { readonly __typename: 'CustomTheme', readonly luminance: Luminance, readonly key: string, readonly background: { readonly __typename: 'AnimatedBackground', readonly color: string, readonly style: BackgroundStyle, readonly type: BackgroundType } | { readonly __typename: 'ColorBackground', readonly color: string, readonly style: BackgroundStyle, readonly type: BackgroundType } | { readonly __typename: 'DefaultBackground' } | { readonly __typename: 'GradientBackground', readonly colors: ReadonlyArray<string | null>, readonly style: BackgroundStyle, readonly type: BackgroundType, readonly animated?: boolean | null, readonly noise: boolean, readonly name: BackgroundGradientStyle } | { readonly __typename: 'ImageBackground', readonly color: string, readonly imageUrl: string, readonly type: BackgroundType, readonly tint: string, readonly noise: boolean, readonly effect: BackgroundImageEffect } | { readonly __typename: 'VideoBackground', readonly color: string, readonly imageUrl: string, readonly posterUrl?: string | null, readonly type: BackgroundType, readonly tint: string, readonly noise: boolean }, readonly buttonStyle: { readonly __typename: 'ButtonStyle', readonly type: ButtonType, readonly backgroundStyle: { readonly __typename: 'ButtonBackgroundStyle', readonly color: string }, readonly cornerStyle?: { readonly __typename: 'ButtonCornerStyle', readonly type: ButtonCornerType } | null, readonly shadowStyle?: { readonly __typename: 'ButtonShadowStyle', readonly type: ButtonShadowType, readonly color: string } | null, readonly textStyle?: { readonly __typename: 'ButtonTextStyle', readonly color: string } | null }, readonly socialStyle: { readonly __typename: 'SocialStyle', readonly color?: string | null }, readonly typeface: { readonly __typename: 'Typeface', readonly color?: string | null, readonly family: string }, readonly heading: { readonly __typename: 'HeadingOptions', readonly type: HeadingType, readonly font?: string | null, readonly color?: string | null, readonly size: HeadingSize, readonly effect: HeadingEffect, readonly logo?: string | null, readonly logoSize?: HeadingLogoSize | null }, readonly footer: { readonly __typename: 'Footer', readonly logoUrl?: string | null, readonly url?: string | null, readonly color?: string | null } } | { readonly __typename: 'DefaultTheme', readonly key: string } } | null };

export type ProfileStoreQueryVariables = Exact<{
  accountUuid: Scalars['String']['input'];
}>;


export type ProfileStoreQuery = { readonly __typename: 'Query', readonly getCommerceStoreForProfile?: { readonly __typename: 'CommerceStoreForProfile', readonly shopEntryPointOnLinksEnabled?: boolean | null } | null, readonly getCommerceStoreItemsForProfile?: { readonly __typename: 'CommerceStorefrontItems', readonly hasCommissionProducts: boolean, readonly posts?: ReadonlyArray<{ readonly __typename: 'CommerceStorefrontPost', readonly id: string, readonly hasCommissionProducts: boolean, readonly title?: string | null, readonly type: string, readonly ugcContent: ReadonlyArray<{ readonly __typename: 'UgcContent', readonly id: string, readonly provider: string, readonly contentId: string, readonly url: string, readonly thumbnailSrc: string, readonly embedUrl?: string | null, readonly videoUrl?: string | null, readonly position: number }>, readonly storeProducts: ReadonlyArray<{ readonly __typename: 'CommerceStoreProduct', readonly currency?: string | null, readonly id: string, readonly accountProductId?: string | null, readonly image?: string | null, readonly price?: number | null, readonly salePrice?: number | null, readonly title?: string | null, readonly url: string, readonly hasCommission: boolean, readonly vendor?: string | null, readonly vendorDisplayName?: string | null, readonly comoAction?: string | null }> }> | null, readonly items?: ReadonlyArray<{ readonly __typename: 'CommerceCollection', readonly id: string, readonly hasCommissionProducts: boolean, readonly title?: string | null, readonly type: string, readonly storeProducts: ReadonlyArray<{ readonly __typename: 'CommerceStoreProduct', readonly currency?: string | null, readonly id: string, readonly accountProductId?: string | null, readonly image?: string | null, readonly price?: number | null, readonly salePrice?: number | null, readonly title?: string | null, readonly url: string, readonly hasCommission: boolean, readonly vendor?: string | null, readonly vendorDisplayName?: string | null, readonly comoAction?: string | null }> } | { readonly __typename: 'CommerceStoreProduct', readonly type: string, readonly currency?: string | null, readonly id: string, readonly image?: string | null, readonly price?: number | null, readonly salePrice?: number | null, readonly title?: string | null, readonly url: string, readonly comoAction?: string | null, readonly hasCommission: boolean, readonly vendor?: string | null, readonly vendorDisplayName?: string | null } | { readonly __typename: 'CommerceStorefrontPost' }> | null } | null };

export const AccountForPreviewFragmentDoc = gql`
    fragment AccountForPreview on Account {
  id
  uuid
  username
  realName
  customAvatar(isProfilePreview: $returnProfilePreview)
  customAvatarVideo(isProfilePreview: $returnProfilePreview)
  customAvatarAttributes(isProfilePreview: $returnProfilePreview)
  profilePicture
  profilePictureUrl(isProfilePreview: $returnProfilePreview)
  avatarType(isProfilePreview: $returnProfilePreview)
  avatarMode(isProfilePreview: $returnProfilePreview)
  avatarModes
  backgroundHeroColor(isProfilePreview: $returnProfilePreview)
  pageTitle(isProfilePreview: $returnProfilePreview)
  description(isProfilePreview: $returnProfilePreview)
  backgroundImage(isProfilePreview: $returnProfilePreview)
  backgroundPoster(isProfilePreview: $returnProfilePreview)
  shadowColor(isProfilePreview: $returnProfilePreview)
  isLogoVisible(isProfilePreview: $returnProfilePreview)
  luminance(isProfilePreview: $returnProfilePreview)
  tier
  createdAt
  backgroundColor(isProfilePreview: $returnProfilePreview)
  buttonColor(isProfilePreview: $returnProfilePreview)
  buttonStyle(isProfilePreview: $returnProfilePreview)
  buttonCornerStyle(isProfilePreview: $returnProfilePreview)
  buttonShadowStyle(isProfilePreview: $returnProfilePreview)
  backgroundStyle(isProfilePreview: $returnProfilePreview)
  buttonTextColor(isProfilePreview: $returnProfilePreview)
  fontStyle(isProfilePreview: $returnProfilePreview)
  fontColor(isProfilePreview: $returnProfilePreview)
  headingType(isProfilePreview: $returnProfilePreview)
  headingLogo(isProfilePreview: $returnProfilePreview)
  headingFont(isProfilePreview: $returnProfilePreview)
  headingColor(isProfilePreview: $returnProfilePreview)
  headingSize(isProfilePreview: $returnProfilePreview)
  headingEffect(isProfilePreview: $returnProfilePreview)
  headingLogoSize(isProfilePreview: $returnProfilePreview)
  colorSchema
  theme(isProfilePreview: $returnProfilePreview) {
    key
    ... on CustomTheme {
      luminance
      background(isProfilePreview: $returnProfilePreview) {
        ... on ColorBackground {
          color
          style
          type
          noise
        }
        ... on ImageBackground {
          color
          imageUrl
          type
          tint
          noise
          effect
        }
        ... on GradientBackground {
          colors
          style
          type
          animated
          noise
          name
        }
        ... on VideoBackground {
          color
          imageUrl
          posterUrl
          type
          tint
          noise
        }
        ... on AnimatedBackground {
          color
          style
          type
        }
      }
      heading(isProfilePreview: $returnProfilePreview) {
        type
        font
        color
        size
        effect
        logo
        logoSize
      }
      buttonStyle(isProfilePreview: $returnProfilePreview) {
        type
        backgroundStyle {
          color
        }
        shadowStyle {
          type
          color
        }
        cornerStyle {
          type
        }
        textStyle {
          color
        }
      }
      socialStyle {
        color
      }
      typeface {
        color
        family
      }
      footer {
        logoUrl
        url
        color
      }
    }
  }
  hasAccountPreviewChanges
  accountPreviewPaidChanges {
    hasProFeatures
    hasPremiumFeatures
  }
  metaAttributes {
    ogImageBackgroundType
    ogImageBackgroundColor
  }
  hasUndoChanges
  hasRedoChanges
}
    `;
export const LinkFragmentDoc = gql`
    fragment LinkFragment on Link {
  id
  type
  title
  url(appendUtm: true)
  active
  position
  modifiers {
    animation
    isForwarding
    isForwardingActive
    thumbnailUrl
    amazonAffiliate {
      type
      style
    }
    layoutOption
    sponsorshipId
  }
  rules(validOnly: true) {
    gate {
      activeOrder
      age {
        message
        minAge
      }
      passcode {
        message
        code
      }
      nft {
        contractAddress
        collectionName
        message
      }
      payment {
        amount
        successMessage
        descriptionMessage
        helpCoverFees
        isValid
        serviceIntegration {
          id
          type
          title
          status
          ... on PaypalIntegration {
            paypalIntegrationId
            currencyCode
          }
          ... on SquareIntegration {
            squareIntegrationId
            currencyCode
          }
        }
      }
    }
  }
  context {
    ... on HeaderLinkContext {
      headerLayoutOption: layoutOption
    }
    ... on GroupLinkContext {
      layoutOption
    }
    ... on YoutubeVideoLinkContext {
      embedOption
      autoplay
      mute
      videoId(evaluateGate: false)
      startTime
    }
    ... on YoutubePlaylistLinkContext {
      embedOption
      autoplay
      mute
      videoId(evaluateGate: false)
      startTime
      list(evaluateGate: false)
    }
    ... on YoutubeChannelLinkContext {
      channelId
      subscribe
      embedOption
    }
    ... on TwitchVideoLinkContext {
      embedOption
      autoplay
      mute
      videoId
    }
    ... on TwitchCollectionLinkContext {
      embedOption
      autoplay
      mute
      videoId
      collectionId
    }
    ... on TwitchChannelLinkContext {
      embedOption
      autoplay
      mute
      channelId
    }
    ... on FacebookLinkContext {
      embedOption
      autoplay
      mute
    }
    ... on TikTokLinkContext {
      embedOption
    }
    ... on TikTokJumpLinkContext {
      firstProfile
      secondProfile
      thirdProfile
      forthProfile
      videoId
      description
    }
    ... on ClubhouseLinkContext {
      embedOption
    }
    ... on TwitterLinkContext {
      embedOption
    }
    ... on ThreadsLinkContext {
      embedOption
    }
    ... on InstagramProfileLinkContext {
      embedOption
      integrationId
      instagramBusinessAccountId
      displayType
      mediaType
    }
    ... on InstagramPostLinkContext {
      embedOption
    }
    ... on VimeoLinkContext {
      embedOption
      autoplay
      mute
    }
    ... on RssFeedLinkContext {
      embedOption
      itemCount
      includeThumbnails
    }
    ... on SpringLinkContext {
      embedOption
      message
    }
    ... on ProductLinkContext {
      descriptionMessage
      productIds
      collectionId
      embedOption
      products {
        shopUrl
        id
        title
        description
        price
        currencyCode
        url
        imageUrl
        promotionalBanner
        salePrice
        image {
          id
          src
        }
      }
      collection {
        id
        shopName
        shopUrl
        products {
          id
          title
          description
          price
          currencyCode
          url
          image {
            id
            src
          }
        }
      }
      providerServiceIntegration {
        id
        status
        type
        ... on ShopifyIntegration {
          externalIntegrationId
          status
        }
        ... on SpringIntegration {
          externalIntegrationId
        }
      }
      paymentServiceIntegration {
        id
      }
    }
    ... on SpotifyLinkContext {
      embedOption
      useLatestEpisode
      options(evaluateGate: false) {
        type
        visible
        url
      }
    }
    ... on PinterestLinkContext {
      embedOption
    }
    ... on MusicLinkContext {
      embedOption
      options {
        type
        visible
        url
      }
    }
    ... on PodcastLinkContext {
      embedOption
      useLatestEpisode
      options(evaluateGate: false) {
        type
        visible
        url
      }
    }
    ... on MobileAppLinkContext {
      embedOption
      options {
        type
        visible
        url
      }
    }
    ... on BookLinkContext {
      embedOption
      productReference(evaluateGate: false)
      displayPrices
      includeUsedCopiesInResult
      options {
        type
        visible
        formats {
          format
          visible
          url
        }
      }
    }
    ... on KajabiCourseLinkContext {
      course(includeHidden: false) {
        id
        title
        description
        thumbnailUrl
        amount
        currency
        paymentType
        listingId
        modules {
          id
          name
          numberOfLessons
          length
          thumbnailUrl
        }
      }
      v2FormId
    }
    ... on DigitalDownloadLinkContext {
      v2FormId
      listing {
        id
        name
        description
        imageUrl
        paymentType
        currency
        amount
      }
      product {
        id
        items {
          id
          displayName
          extension
          mimeType
          size
        }
      }
    }
    ... on PreSaveLinkContext {
      releaseDateTime
      releaseDateTimeZone
      alertSubscribers
      uniqueId
      artist
      songTitle
      description
      confirmationMessage
      userUploadedCoverArt
      options {
        type
        visible
      }
    }
    ... on EmailLinkContext {
      embedOption
    }
    ... on ChatbotLinkContext {
      embedOption
      examplePrompts
      initialMessage
      inputPlaceholder
    }
    ... on ExtensionLinkContext {
      linkTypeId
      data(evaluateGate: false)
      embedOption
      isValid
    }
    ... on TikTokProfileLinkContext {
      embedOption
      tiktokIntegrationId(evaluateGate: false)
      videoIds(evaluateGate: false)
    }
    ... on NftGalleryLinkContext {
      walletProvider
      walletAddress
      marketplace
      lastUpdated
      assets {
        openseaId
        name
        tokenId
        imageUrl
        description
        externalLink
        contractAddress
        openseaLink
        collectionName
        collectionSymbol
        ownerName
        ownerAddress
        collectionVerified
        creatorVerified
      }
    }
    ... on CommercePayLinkContext {
      serviceIntegration {
        ... on SquareIntegration {
          id
          type
          title
          status
          currencyCode
          locationId
          squareApplicationId
          squareIntegrationId
        }
        ... on StripeIntegration {
          id
          type
          title
          status
          currencyCode
          stripeIntegrationId
        }
        ... on PaypalIntegration {
          id
          type
          title
          status
          currencyCode
          merchantId
        }
      }
      presetAmounts
      allowCustomAmount
      descriptionMessage
      successMessage
      allowNote
    }
    ... on ContactDetailsLinkContext {
      firstName
      lastName
      organization
      position
      emailPrimary
      emailPrimaryType
      emailSecondary
      emailSecondaryType
      phonePrimary
      phonePrimaryType
      phoneSecondary
      phoneSecondaryType
      addressLine1
      addressLine2
      addressCity
      addressCountry
      addressState
      addressPostcode
      openingHours
    }
    ... on RequestLinkContext {
      serviceIntegration {
        ... on SquareIntegration {
          id
          type
          title
          status
          currencyCode
          locationId
          squareApplicationId
          squareIntegrationId
        }
        ... on StripeIntegration {
          id
          type
          title
          status
          currencyCode
          stripeIntegrationId
        }
        ... on PaypalIntegration {
          id
          type
          title
          status
          currencyCode
          merchantId
          paypalIntegrationId
        }
      }
      options {
        title
        amount
      }
      descriptionMessage
      successMessage
      requireDetails
      requireTax
      taxRate
    }
    ... on LinkerRecommendationsLinkContext {
      recommendedAccounts {
        username
        accountUuid
        profileTitle
        customAvatarUrl
        invalidUsername
      }
    }
    ... on TipGiftLinkContext {
      serviceIntegration {
        ... on SquareIntegration {
          id
          type
          title
          status
          currencyCode
          locationId
          squareApplicationId
          squareIntegrationId
        }
        ... on StripeIntegration {
          id
          type
          title
          status
          currencyCode
          stripeIntegrationId
        }
        ... on PaypalIntegration {
          id
          type
          title
          status
          currencyCode
          merchantId
          paypalIntegrationId
        }
      }
      emoji
      amount
      descriptionMessage
      successMessage
      helpCoverFees
    }
    ... on FormLinkContext {
      formType
      fields {
        label
        name
        type
        enabled
        required
      }
      submissionMethod
      emailRecipient
      linkDescription
      confirmationMessage
      termsConditions
      termsConditionsLabel
      termsConditionsUrl
      v2FormId
    }
    ... on TemplateLinkContext {
      isIncompleteTemplateLink
    }
    ... on CommerceProductLinkContext {
      accountProductId
      product {
        id
        url
        title
        price
        salePrice
        image
        currency
        vendorDisplayName
      }
    }
    ... on CommunityLinkContext {
      linkType
      linkBehaviour
      communityDescription
      communitySubscriptionId
      communityTitle
      communityImage
      communityInviteUrl
      v2FormId
      listingId
    }
    ... on CoachingLinkContext {
      campaignId
    }
  }
}
    `;
export const BulkUpdateLinkPreviewTitlesDocument = gql`
    mutation BulkUpdateLinkPreviewTitles($linkUpdates: [BulkUpdateLinkTitlesInput!]!, $glowUp: GlowUpInput!, $isGlowUpPreview: Boolean) {
  bulkUpdateLinkPreviewTitlesMutation(
    linkUpdates: $linkUpdates
    glowUp: $glowUp
    isGlowUpPreview: $isGlowUpPreview
  ) {
    id
    uuid
  }
}
    `;
export type BulkUpdateLinkPreviewTitlesMutationFn = Apollo.MutationFunction<BulkUpdateLinkPreviewTitlesMutation, BulkUpdateLinkPreviewTitlesMutationVariables>;

/**
 * __useBulkUpdateLinkPreviewTitlesMutation__
 *
 * To run a mutation, you first call `useBulkUpdateLinkPreviewTitlesMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useBulkUpdateLinkPreviewTitlesMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [bulkUpdateLinkPreviewTitlesMutation, { data, loading, error }] = useBulkUpdateLinkPreviewTitlesMutation({
 *   variables: {
 *      linkUpdates: // value for 'linkUpdates'
 *      glowUp: // value for 'glowUp'
 *      isGlowUpPreview: // value for 'isGlowUpPreview'
 *   },
 * });
 */
export function useBulkUpdateLinkPreviewTitlesMutation(baseOptions?: Apollo.MutationHookOptions<BulkUpdateLinkPreviewTitlesMutation, BulkUpdateLinkPreviewTitlesMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<BulkUpdateLinkPreviewTitlesMutation, BulkUpdateLinkPreviewTitlesMutationVariables>(BulkUpdateLinkPreviewTitlesDocument, options);
      }
export type BulkUpdateLinkPreviewTitlesMutationHookResult = ReturnType<typeof useBulkUpdateLinkPreviewTitlesMutation>;
export type BulkUpdateLinkPreviewTitlesMutationResult = Apollo.MutationResult<BulkUpdateLinkPreviewTitlesMutation>;
export type BulkUpdateLinkPreviewTitlesMutationOptions = Apollo.BaseMutationOptions<BulkUpdateLinkPreviewTitlesMutation, BulkUpdateLinkPreviewTitlesMutationVariables>;
export const CreateCanvaAssetUploadJobDocument = gql`
    mutation CreateCanvaAssetUploadJob($input: CreateCanvaAssetUploadJobInput!) {
  createCanvaAssetUploadJob(input: $input) {
    jobId
    status
    error
    canvaAsset {
      id
    }
  }
}
    `;
export type CreateCanvaAssetUploadJobMutationFn = Apollo.MutationFunction<CreateCanvaAssetUploadJobMutation, CreateCanvaAssetUploadJobMutationVariables>;

/**
 * __useCreateCanvaAssetUploadJobMutation__
 *
 * To run a mutation, you first call `useCreateCanvaAssetUploadJobMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateCanvaAssetUploadJobMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createCanvaAssetUploadJobMutation, { data, loading, error }] = useCreateCanvaAssetUploadJobMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateCanvaAssetUploadJobMutation(baseOptions?: Apollo.MutationHookOptions<CreateCanvaAssetUploadJobMutation, CreateCanvaAssetUploadJobMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateCanvaAssetUploadJobMutation, CreateCanvaAssetUploadJobMutationVariables>(CreateCanvaAssetUploadJobDocument, options);
      }
export type CreateCanvaAssetUploadJobMutationHookResult = ReturnType<typeof useCreateCanvaAssetUploadJobMutation>;
export type CreateCanvaAssetUploadJobMutationResult = Apollo.MutationResult<CreateCanvaAssetUploadJobMutation>;
export type CreateCanvaAssetUploadJobMutationOptions = Apollo.BaseMutationOptions<CreateCanvaAssetUploadJobMutation, CreateCanvaAssetUploadJobMutationVariables>;
export const CreateCanvaDesignDocument = gql`
    mutation CreateCanvaDesign($input: CreateCanvaDesignInput!) {
  createCanvaDesign(input: $input) {
    design {
      id
      title
      thumbnailUrl
      editUrl
      viewUrl
    }
  }
}
    `;
export type CreateCanvaDesignMutationFn = Apollo.MutationFunction<CreateCanvaDesignMutation, CreateCanvaDesignMutationVariables>;

/**
 * __useCreateCanvaDesignMutation__
 *
 * To run a mutation, you first call `useCreateCanvaDesignMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateCanvaDesignMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createCanvaDesignMutation, { data, loading, error }] = useCreateCanvaDesignMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateCanvaDesignMutation(baseOptions?: Apollo.MutationHookOptions<CreateCanvaDesignMutation, CreateCanvaDesignMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateCanvaDesignMutation, CreateCanvaDesignMutationVariables>(CreateCanvaDesignDocument, options);
      }
export type CreateCanvaDesignMutationHookResult = ReturnType<typeof useCreateCanvaDesignMutation>;
export type CreateCanvaDesignMutationResult = Apollo.MutationResult<CreateCanvaDesignMutation>;
export type CreateCanvaDesignMutationOptions = Apollo.BaseMutationOptions<CreateCanvaDesignMutation, CreateCanvaDesignMutationVariables>;
export const CreateCanvaDesignExportJobDocument = gql`
    mutation CreateCanvaDesignExportJob($input: CreateCanvaDesignOutputJobInput!) {
  createCanvaDesignExportJob(input: $input) {
    jobId
    status
    error
    canvaDesignUrls
  }
}
    `;
export type CreateCanvaDesignExportJobMutationFn = Apollo.MutationFunction<CreateCanvaDesignExportJobMutation, CreateCanvaDesignExportJobMutationVariables>;

/**
 * __useCreateCanvaDesignExportJobMutation__
 *
 * To run a mutation, you first call `useCreateCanvaDesignExportJobMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateCanvaDesignExportJobMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createCanvaDesignExportJobMutation, { data, loading, error }] = useCreateCanvaDesignExportJobMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateCanvaDesignExportJobMutation(baseOptions?: Apollo.MutationHookOptions<CreateCanvaDesignExportJobMutation, CreateCanvaDesignExportJobMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateCanvaDesignExportJobMutation, CreateCanvaDesignExportJobMutationVariables>(CreateCanvaDesignExportJobDocument, options);
      }
export type CreateCanvaDesignExportJobMutationHookResult = ReturnType<typeof useCreateCanvaDesignExportJobMutation>;
export type CreateCanvaDesignExportJobMutationResult = Apollo.MutationResult<CreateCanvaDesignExportJobMutation>;
export type CreateCanvaDesignExportJobMutationOptions = Apollo.BaseMutationOptions<CreateCanvaDesignExportJobMutation, CreateCanvaDesignExportJobMutationVariables>;
export const CreateInAppMessageDocument = gql`
    mutation CreateInAppMessage($code: String!, $level: String!, $count: Int) {
  createInAppMessage(code: $code, level: $level, count: $count) {
    code
    level
    count
  }
}
    `;
export type CreateInAppMessageMutationFn = Apollo.MutationFunction<CreateInAppMessageMutation, CreateInAppMessageMutationVariables>;

/**
 * __useCreateInAppMessageMutation__
 *
 * To run a mutation, you first call `useCreateInAppMessageMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateInAppMessageMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createInAppMessageMutation, { data, loading, error }] = useCreateInAppMessageMutation({
 *   variables: {
 *      code: // value for 'code'
 *      level: // value for 'level'
 *      count: // value for 'count'
 *   },
 * });
 */
export function useCreateInAppMessageMutation(baseOptions?: Apollo.MutationHookOptions<CreateInAppMessageMutation, CreateInAppMessageMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateInAppMessageMutation, CreateInAppMessageMutationVariables>(CreateInAppMessageDocument, options);
      }
export type CreateInAppMessageMutationHookResult = ReturnType<typeof useCreateInAppMessageMutation>;
export type CreateInAppMessageMutationResult = Apollo.MutationResult<CreateInAppMessageMutation>;
export type CreateInAppMessageMutationOptions = Apollo.BaseMutationOptions<CreateInAppMessageMutation, CreateInAppMessageMutationVariables>;
export const DeleteAccountPreviewChangesDocument = gql`
    mutation deleteAccountPreviewChanges($returnProfilePreview: Boolean!) {
  deleteAccountPreviewChanges {
    ...AccountForPreview
  }
}
    ${AccountForPreviewFragmentDoc}`;
export type DeleteAccountPreviewChangesMutationFn = Apollo.MutationFunction<DeleteAccountPreviewChangesMutation, DeleteAccountPreviewChangesMutationVariables>;

/**
 * __useDeleteAccountPreviewChangesMutation__
 *
 * To run a mutation, you first call `useDeleteAccountPreviewChangesMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteAccountPreviewChangesMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteAccountPreviewChangesMutation, { data, loading, error }] = useDeleteAccountPreviewChangesMutation({
 *   variables: {
 *      returnProfilePreview: // value for 'returnProfilePreview'
 *   },
 * });
 */
export function useDeleteAccountPreviewChangesMutation(baseOptions?: Apollo.MutationHookOptions<DeleteAccountPreviewChangesMutation, DeleteAccountPreviewChangesMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteAccountPreviewChangesMutation, DeleteAccountPreviewChangesMutationVariables>(DeleteAccountPreviewChangesDocument, options);
      }
export type DeleteAccountPreviewChangesMutationHookResult = ReturnType<typeof useDeleteAccountPreviewChangesMutation>;
export type DeleteAccountPreviewChangesMutationResult = Apollo.MutationResult<DeleteAccountPreviewChangesMutation>;
export type DeleteAccountPreviewChangesMutationOptions = Apollo.BaseMutationOptions<DeleteAccountPreviewChangesMutation, DeleteAccountPreviewChangesMutationVariables>;
export const DeleteGlowUpStateDocument = gql`
    mutation DeleteGlowUpState {
  deleteGlowUpState {
    id
    uuid
    glowUp {
      conversationId
      data {
        toolId
        isToggled
        type
        paidChange {
          isPro
          isPremium
        }
      }
    }
  }
}
    `;
export type DeleteGlowUpStateMutationFn = Apollo.MutationFunction<DeleteGlowUpStateMutation, DeleteGlowUpStateMutationVariables>;

/**
 * __useDeleteGlowUpStateMutation__
 *
 * To run a mutation, you first call `useDeleteGlowUpStateMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteGlowUpStateMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteGlowUpStateMutation, { data, loading, error }] = useDeleteGlowUpStateMutation({
 *   variables: {
 *   },
 * });
 */
export function useDeleteGlowUpStateMutation(baseOptions?: Apollo.MutationHookOptions<DeleteGlowUpStateMutation, DeleteGlowUpStateMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteGlowUpStateMutation, DeleteGlowUpStateMutationVariables>(DeleteGlowUpStateDocument, options);
      }
export type DeleteGlowUpStateMutationHookResult = ReturnType<typeof useDeleteGlowUpStateMutation>;
export type DeleteGlowUpStateMutationResult = Apollo.MutationResult<DeleteGlowUpStateMutation>;
export type DeleteGlowUpStateMutationOptions = Apollo.BaseMutationOptions<DeleteGlowUpStateMutation, DeleteGlowUpStateMutationVariables>;
export const GlowUpMutationDocument = gql`
    mutation GlowUpMutation($isGlowUpPreview: Boolean!) {
  glowUp(isGlowUpPreview: $isGlowUpPreview) {
    colorPalette {
      palette
      alternatePalette
    }
    id
    uuid
    username
    isActive
    pageTitle
    contentWarning
    description
    isLogoVisible(isProfilePreview: true)
    socialLinksPosition
    profilePictureUrl(isProfilePreview: true)
    customAvatar(isProfilePreview: true)
    customAvatarVideo(isProfilePreview: true)
    customAvatarAttributes(isProfilePreview: true)
    backgroundImageAttributes
    backgroundHeroColor
    backgroundGradient
    backgroundImage
    backgroundStyle(isProfilePreview: true)
    avatarMode(isProfilePreview: true)
    avatarType(isProfilePreview: true)
    socialIntegrations {
      type
      id
    }
    socialLinks(filter: {active: true}) {
      id
      type
      url
      active
      position
    }
    glowUp {
      status
      conversationId
      data {
        toolId
        isToggled
        type
        paidChange {
          isPro
          isPremium
        }
        incompleteGlowUpData {
          message
        }
        previousState {
          ... on GlowUpToolHeroPreviousState {
            avatarMode
          }
          ... on GlowUpToolFeaturedLayoutPreviousState {
            links {
              linkId
              layoutOption
            }
          }
          ... on GlowUpToolAnimateLinkPreviousState {
            links {
              linkId
              animation
            }
          }
        }
      }
    }
    colorPalette {
      palette
      alternatePalette
    }
    hasCustomBackgroundColor
    theme(isProfilePreview: true) {
      ... on CustomTheme {
        background(isProfilePreview: true) {
          ... on ColorBackground {
            color
            style
            type
          }
          ... on GradientBackground {
            colors
            style
            type
          }
          ... on ImageBackground {
            color
            imageUrl
            type
          }
          ... on VideoBackground {
            color
            imageUrl
            posterUrl
            type
          }
          ... on AnimatedBackground {
            color
            style
            type
          }
        }
      }
    }
  }
}
    `;
export type GlowUpMutationMutationFn = Apollo.MutationFunction<GlowUpMutation, GlowUpMutationVariables>;

/**
 * __useGlowUpMutation__
 *
 * To run a mutation, you first call `useGlowUpMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useGlowUpMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [glowUpMutation, { data, loading, error }] = useGlowUpMutation({
 *   variables: {
 *      isGlowUpPreview: // value for 'isGlowUpPreview'
 *   },
 * });
 */
export function useGlowUpMutation(baseOptions?: Apollo.MutationHookOptions<GlowUpMutation, GlowUpMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<GlowUpMutation, GlowUpMutationVariables>(GlowUpMutationDocument, options);
      }
export type GlowUpMutationHookResult = ReturnType<typeof useGlowUpMutation>;
export type GlowUpMutationMutationResult = Apollo.MutationResult<GlowUpMutation>;
export type GlowUpMutationMutationOptions = Apollo.BaseMutationOptions<GlowUpMutation, GlowUpMutationVariables>;
export const MarkAllNotificationsAsReadDocument = gql`
    mutation MarkAllNotificationsAsRead($accountUuid: String!) {
  markAllNotificationsRead(accountUuid: $accountUuid) {
    updated
  }
}
    `;
export type MarkAllNotificationsAsReadMutationFn = Apollo.MutationFunction<MarkAllNotificationsAsReadMutation, MarkAllNotificationsAsReadMutationVariables>;

/**
 * __useMarkAllNotificationsAsReadMutation__
 *
 * To run a mutation, you first call `useMarkAllNotificationsAsReadMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useMarkAllNotificationsAsReadMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [markAllNotificationsAsReadMutation, { data, loading, error }] = useMarkAllNotificationsAsReadMutation({
 *   variables: {
 *      accountUuid: // value for 'accountUuid'
 *   },
 * });
 */
export function useMarkAllNotificationsAsReadMutation(baseOptions?: Apollo.MutationHookOptions<MarkAllNotificationsAsReadMutation, MarkAllNotificationsAsReadMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<MarkAllNotificationsAsReadMutation, MarkAllNotificationsAsReadMutationVariables>(MarkAllNotificationsAsReadDocument, options);
      }
export type MarkAllNotificationsAsReadMutationHookResult = ReturnType<typeof useMarkAllNotificationsAsReadMutation>;
export type MarkAllNotificationsAsReadMutationResult = Apollo.MutationResult<MarkAllNotificationsAsReadMutation>;
export type MarkAllNotificationsAsReadMutationOptions = Apollo.BaseMutationOptions<MarkAllNotificationsAsReadMutation, MarkAllNotificationsAsReadMutationVariables>;
export const MarkNotificationAsReadDocument = gql`
    mutation MarkNotificationAsRead($notificationId: ID!, $accountUuid: String!) {
  markNotificationAsRead(
    notificationId: $notificationId
    accountUuid: $accountUuid
  ) {
    success
    readAt
  }
}
    `;
export type MarkNotificationAsReadMutationFn = Apollo.MutationFunction<MarkNotificationAsReadMutation, MarkNotificationAsReadMutationVariables>;

/**
 * __useMarkNotificationAsReadMutation__
 *
 * To run a mutation, you first call `useMarkNotificationAsReadMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useMarkNotificationAsReadMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [markNotificationAsReadMutation, { data, loading, error }] = useMarkNotificationAsReadMutation({
 *   variables: {
 *      notificationId: // value for 'notificationId'
 *      accountUuid: // value for 'accountUuid'
 *   },
 * });
 */
export function useMarkNotificationAsReadMutation(baseOptions?: Apollo.MutationHookOptions<MarkNotificationAsReadMutation, MarkNotificationAsReadMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<MarkNotificationAsReadMutation, MarkNotificationAsReadMutationVariables>(MarkNotificationAsReadDocument, options);
      }
export type MarkNotificationAsReadMutationHookResult = ReturnType<typeof useMarkNotificationAsReadMutation>;
export type MarkNotificationAsReadMutationResult = Apollo.MutationResult<MarkNotificationAsReadMutation>;
export type MarkNotificationAsReadMutationOptions = Apollo.BaseMutationOptions<MarkNotificationAsReadMutation, MarkNotificationAsReadMutationVariables>;
export const RedoProfilePreviewChangesMutationDocument = gql`
    mutation RedoProfilePreviewChangesMutation($returnProfilePreview: Boolean!) {
  redoProfilePreviewChanges {
    ...AccountForPreview
  }
}
    ${AccountForPreviewFragmentDoc}`;
export type RedoProfilePreviewChangesMutationMutationFn = Apollo.MutationFunction<RedoProfilePreviewChangesMutation, RedoProfilePreviewChangesMutationVariables>;

/**
 * __useRedoProfilePreviewChangesMutation__
 *
 * To run a mutation, you first call `useRedoProfilePreviewChangesMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useRedoProfilePreviewChangesMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [redoProfilePreviewChangesMutation, { data, loading, error }] = useRedoProfilePreviewChangesMutation({
 *   variables: {
 *      returnProfilePreview: // value for 'returnProfilePreview'
 *   },
 * });
 */
export function useRedoProfilePreviewChangesMutation(baseOptions?: Apollo.MutationHookOptions<RedoProfilePreviewChangesMutation, RedoProfilePreviewChangesMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<RedoProfilePreviewChangesMutation, RedoProfilePreviewChangesMutationVariables>(RedoProfilePreviewChangesMutationDocument, options);
      }
export type RedoProfilePreviewChangesMutationHookResult = ReturnType<typeof useRedoProfilePreviewChangesMutation>;
export type RedoProfilePreviewChangesMutationMutationResult = Apollo.MutationResult<RedoProfilePreviewChangesMutation>;
export type RedoProfilePreviewChangesMutationMutationOptions = Apollo.BaseMutationOptions<RedoProfilePreviewChangesMutation, RedoProfilePreviewChangesMutationVariables>;
export const ReorderSocialLinksDocument = gql`
    mutation ReorderSocialLinks($reorderSocialLinks: SocialLinkReorderInput!) {
  reorderSocialLinks(reorderSocialLinks: $reorderSocialLinks) {
    user {
      id
      selectedAccount {
        id
        uuid
        socialLinks {
          id
          type
          url
          active
          position
          moderationAction
        }
      }
    }
  }
}
    `;
export type ReorderSocialLinksMutationFn = Apollo.MutationFunction<ReorderSocialLinksMutation, ReorderSocialLinksMutationVariables>;

/**
 * __useReorderSocialLinksMutation__
 *
 * To run a mutation, you first call `useReorderSocialLinksMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useReorderSocialLinksMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [reorderSocialLinksMutation, { data, loading, error }] = useReorderSocialLinksMutation({
 *   variables: {
 *      reorderSocialLinks: // value for 'reorderSocialLinks'
 *   },
 * });
 */
export function useReorderSocialLinksMutation(baseOptions?: Apollo.MutationHookOptions<ReorderSocialLinksMutation, ReorderSocialLinksMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<ReorderSocialLinksMutation, ReorderSocialLinksMutationVariables>(ReorderSocialLinksDocument, options);
      }
export type ReorderSocialLinksMutationHookResult = ReturnType<typeof useReorderSocialLinksMutation>;
export type ReorderSocialLinksMutationResult = Apollo.MutationResult<ReorderSocialLinksMutation>;
export type ReorderSocialLinksMutationOptions = Apollo.BaseMutationOptions<ReorderSocialLinksMutation, ReorderSocialLinksMutationVariables>;
export const RequestEmailVerificationDocument = gql`
    mutation RequestEmailVerification {
  requestEmailVerification {
    result
  }
}
    `;
export type RequestEmailVerificationMutationFn = Apollo.MutationFunction<RequestEmailVerificationMutation, RequestEmailVerificationMutationVariables>;

/**
 * __useRequestEmailVerificationMutation__
 *
 * To run a mutation, you first call `useRequestEmailVerificationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useRequestEmailVerificationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [requestEmailVerificationMutation, { data, loading, error }] = useRequestEmailVerificationMutation({
 *   variables: {
 *   },
 * });
 */
export function useRequestEmailVerificationMutation(baseOptions?: Apollo.MutationHookOptions<RequestEmailVerificationMutation, RequestEmailVerificationMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<RequestEmailVerificationMutation, RequestEmailVerificationMutationVariables>(RequestEmailVerificationDocument, options);
      }
export type RequestEmailVerificationMutationHookResult = ReturnType<typeof useRequestEmailVerificationMutation>;
export type RequestEmailVerificationMutationResult = Apollo.MutationResult<RequestEmailVerificationMutation>;
export type RequestEmailVerificationMutationOptions = Apollo.BaseMutationOptions<RequestEmailVerificationMutation, RequestEmailVerificationMutationVariables>;
export const SaveGlowUpToProfileDocument = gql`
    mutation SaveGlowUpToProfile {
  saveGlowUpToProfile {
    id
    uuid
    glowUp {
      conversationId
      data {
        toolId
        isToggled
        type
        paidChange {
          isPro
          isPremium
        }
      }
    }
  }
}
    `;
export type SaveGlowUpToProfileMutationFn = Apollo.MutationFunction<SaveGlowUpToProfileMutation, SaveGlowUpToProfileMutationVariables>;

/**
 * __useSaveGlowUpToProfileMutation__
 *
 * To run a mutation, you first call `useSaveGlowUpToProfileMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSaveGlowUpToProfileMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [saveGlowUpToProfileMutation, { data, loading, error }] = useSaveGlowUpToProfileMutation({
 *   variables: {
 *   },
 * });
 */
export function useSaveGlowUpToProfileMutation(baseOptions?: Apollo.MutationHookOptions<SaveGlowUpToProfileMutation, SaveGlowUpToProfileMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<SaveGlowUpToProfileMutation, SaveGlowUpToProfileMutationVariables>(SaveGlowUpToProfileDocument, options);
      }
export type SaveGlowUpToProfileMutationHookResult = ReturnType<typeof useSaveGlowUpToProfileMutation>;
export type SaveGlowUpToProfileMutationResult = Apollo.MutationResult<SaveGlowUpToProfileMutation>;
export type SaveGlowUpToProfileMutationOptions = Apollo.BaseMutationOptions<SaveGlowUpToProfileMutation, SaveGlowUpToProfileMutationVariables>;
export const SetLinkModifiersDocument = gql`
    mutation SetLinkModifiers($id: Int!, $modifiers: LinkModifiersInput!) {
  setLinkModifiers(id: $id, modifiers: $modifiers) {
    id
    modifiers {
      thumbnailUrl
      layoutOption
    }
  }
}
    `;
export type SetLinkModifiersMutationFn = Apollo.MutationFunction<SetLinkModifiersMutation, SetLinkModifiersMutationVariables>;

/**
 * __useSetLinkModifiersMutation__
 *
 * To run a mutation, you first call `useSetLinkModifiersMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSetLinkModifiersMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [setLinkModifiersMutation, { data, loading, error }] = useSetLinkModifiersMutation({
 *   variables: {
 *      id: // value for 'id'
 *      modifiers: // value for 'modifiers'
 *   },
 * });
 */
export function useSetLinkModifiersMutation(baseOptions?: Apollo.MutationHookOptions<SetLinkModifiersMutation, SetLinkModifiersMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<SetLinkModifiersMutation, SetLinkModifiersMutationVariables>(SetLinkModifiersDocument, options);
      }
export type SetLinkModifiersMutationHookResult = ReturnType<typeof useSetLinkModifiersMutation>;
export type SetLinkModifiersMutationResult = Apollo.MutationResult<SetLinkModifiersMutation>;
export type SetLinkModifiersMutationOptions = Apollo.BaseMutationOptions<SetLinkModifiersMutation, SetLinkModifiersMutationVariables>;
export const SetMultipleLinkPreviewGroupLinkContextDocument = gql`
    mutation SetMultipleLinkPreviewGroupLinkContext($context: GroupLinkContextInput!) {
  setMultipleLinkPreviewGroupLinkContext(context: $context) {
    id
    glowUp {
      status
      conversationId
      data {
        toolId
        isToggled
        type
        paidChange {
          isPro
          isPremium
        }
      }
    }
  }
}
    `;
export type SetMultipleLinkPreviewGroupLinkContextMutationFn = Apollo.MutationFunction<SetMultipleLinkPreviewGroupLinkContextMutation, SetMultipleLinkPreviewGroupLinkContextMutationVariables>;

/**
 * __useSetMultipleLinkPreviewGroupLinkContextMutation__
 *
 * To run a mutation, you first call `useSetMultipleLinkPreviewGroupLinkContextMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSetMultipleLinkPreviewGroupLinkContextMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [setMultipleLinkPreviewGroupLinkContextMutation, { data, loading, error }] = useSetMultipleLinkPreviewGroupLinkContextMutation({
 *   variables: {
 *      context: // value for 'context'
 *   },
 * });
 */
export function useSetMultipleLinkPreviewGroupLinkContextMutation(baseOptions?: Apollo.MutationHookOptions<SetMultipleLinkPreviewGroupLinkContextMutation, SetMultipleLinkPreviewGroupLinkContextMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<SetMultipleLinkPreviewGroupLinkContextMutation, SetMultipleLinkPreviewGroupLinkContextMutationVariables>(SetMultipleLinkPreviewGroupLinkContextDocument, options);
      }
export type SetMultipleLinkPreviewGroupLinkContextMutationHookResult = ReturnType<typeof useSetMultipleLinkPreviewGroupLinkContextMutation>;
export type SetMultipleLinkPreviewGroupLinkContextMutationResult = Apollo.MutationResult<SetMultipleLinkPreviewGroupLinkContextMutation>;
export type SetMultipleLinkPreviewGroupLinkContextMutationOptions = Apollo.BaseMutationOptions<SetMultipleLinkPreviewGroupLinkContextMutation, SetMultipleLinkPreviewGroupLinkContextMutationVariables>;
export const ToggleGlowUpChangeDocument = gql`
    mutation ToggleGlowUpChange($input: ToggleGlowUpChangeInput!, $linksFilter: LinksFilterInput!, $isProfilePreview: Boolean, $isGlowUpPreview: Boolean) {
  toggleGlowUpChange(input: $input, isGlowUpPreview: $isGlowUpPreview) {
    id
    uuid
    colorPalette {
      palette
      alternatePalette
    }
    username
    isActive
    pageTitle
    contentWarning
    description
    isLogoVisible(isProfilePreview: $isProfilePreview)
    socialLinksPosition
    profilePictureUrl(isProfilePreview: $isProfilePreview)
    customAvatar(isProfilePreview: $isProfilePreview)
    customAvatarVideo(isProfilePreview: $isProfilePreview)
    customAvatarAttributes(isProfilePreview: $isProfilePreview)
    backgroundImageAttributes
    backgroundHeroColor
    backgroundGradient
    avatarMode(isProfilePreview: $isProfilePreview)
    avatarType(isProfilePreview: $isProfilePreview)
    socialIntegrations {
      type
      id
    }
    links(filter: $linksFilter, isGlowUpPreview: $isGlowUpPreview) {
      ...LinkFragment
      parent {
        id
      }
    }
    socialLinks(filter: {active: true}) {
      id
      type
      url
      active
      position
    }
    glowUp {
      status
      conversationId
      data {
        toolId
        isToggled
        type
        paidChange {
          isPro
          isPremium
        }
        incompleteGlowUpData {
          message
        }
        previousState {
          ... on GlowUpToolHeroPreviousState {
            avatarMode
          }
          ... on GlowUpToolFeaturedLayoutPreviousState {
            links {
              linkId
              layoutOption
            }
          }
          ... on GlowUpToolAnimateLinkPreviousState {
            links {
              linkId
              animation
            }
          }
          ... on GlowUpToolUpdateLinkTitlePreviousState {
            updatedLinks: links {
              linkId
              title
            }
          }
          ... on GlowUpToolUpdateBioPreviousState {
            account {
              pageTitle
              description
            }
          }
          ... on GlowUpToolUpdateAppearancePreviousState {
            backgroundColor
            backgroundGradient
            backgroundGradientStyle
            backgroundTint
            buttonColor
            buttonStyle
            buttonShadowStyle
            buttonCornerStyle
            buttonTextColor
            fontStyle
            fontColor
            customAvatar
            backgroundStyle
            colourway
            colorPalette
            whiteLabel
            backgroundHeroColor
            luminance
            customAvatarAttributes
            canvaAvatarDesignId
            canvaBackgroundDesignId
            customAvatarVideo
            shadowColor
            backgroundPoster
            backgroundImage
            backgroundImageAttributes
            colorSchema
          }
          ... on GlowUpToolSetThumbnailPreviousState {
            links {
              linkId
              thumbnailUrl
            }
          }
          ... on GlowUpToolRichMediaYoutubePreviousState {
            links {
              linkId
              linkType
              embedOption
              autoplay
              mute
              videoId
              channelId
              playlistId
            }
          }
          ... on GlowUpToolRichMediaSpotifyPreviousState {
            links {
              linkId
              linkType
              embedOption
              useLatestEpisode
            }
          }
          ... on GlowUpToolCreateSocialLinkPreviousState {
            socialLinks {
              id
              type
              url
              active
              position
            }
          }
          ... on GlowUpToolUpdateHeadingOptionsPreviousState {
            headingType
            headingLogoSize
            headingEffect
            headingFont
            headingColor
            headingSize
            headingLogo
          }
        }
      }
    }
    colorPalette {
      palette
      alternatePalette
    }
    theme(isProfilePreview: $isProfilePreview, isGlowUpPreview: $isGlowUpPreview) {
      key
      ... on CustomTheme {
        luminance
        background(isProfilePreview: true) {
          ... on ColorBackground {
            color
            style
            type
          }
          ... on GradientBackground {
            colors
            style
            type
            animated
            noise
            name
          }
          ... on ImageBackground {
            color
            imageUrl
            type
            tint
            noise
            effect
          }
          ... on AnimatedBackground {
            color
            style
            type
          }
          ... on VideoBackground {
            color
            imageUrl
            posterUrl
            type
            tint
            noise
          }
        }
        buttonStyle {
          type
          backgroundStyle {
            color
          }
          cornerStyle {
            type
          }
          shadowStyle {
            type
            color
          }
          textStyle {
            color
          }
        }
        socialStyle {
          color
        }
        typeface {
          color
          family
        }
        heading {
          type
          font
          color
          size
          effect
          logo
          logoSize
        }
        footer {
          logoUrl
          url
          color
        }
      }
    }
  }
}
    ${LinkFragmentDoc}`;
export type ToggleGlowUpChangeMutationFn = Apollo.MutationFunction<ToggleGlowUpChangeMutation, ToggleGlowUpChangeMutationVariables>;

/**
 * __useToggleGlowUpChangeMutation__
 *
 * To run a mutation, you first call `useToggleGlowUpChangeMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useToggleGlowUpChangeMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [toggleGlowUpChangeMutation, { data, loading, error }] = useToggleGlowUpChangeMutation({
 *   variables: {
 *      input: // value for 'input'
 *      linksFilter: // value for 'linksFilter'
 *      isProfilePreview: // value for 'isProfilePreview'
 *      isGlowUpPreview: // value for 'isGlowUpPreview'
 *   },
 * });
 */
export function useToggleGlowUpChangeMutation(baseOptions?: Apollo.MutationHookOptions<ToggleGlowUpChangeMutation, ToggleGlowUpChangeMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<ToggleGlowUpChangeMutation, ToggleGlowUpChangeMutationVariables>(ToggleGlowUpChangeDocument, options);
      }
export type ToggleGlowUpChangeMutationHookResult = ReturnType<typeof useToggleGlowUpChangeMutation>;
export type ToggleGlowUpChangeMutationResult = Apollo.MutationResult<ToggleGlowUpChangeMutation>;
export type ToggleGlowUpChangeMutationOptions = Apollo.BaseMutationOptions<ToggleGlowUpChangeMutation, ToggleGlowUpChangeMutationVariables>;
export const UndoProfilePreviewChangesDocument = gql`
    mutation undoProfilePreviewChanges($returnProfilePreview: Boolean!) {
  undoProfilePreviewChanges {
    ...AccountForPreview
  }
}
    ${AccountForPreviewFragmentDoc}`;
export type UndoProfilePreviewChangesMutationFn = Apollo.MutationFunction<UndoProfilePreviewChangesMutation, UndoProfilePreviewChangesMutationVariables>;

/**
 * __useUndoProfilePreviewChangesMutation__
 *
 * To run a mutation, you first call `useUndoProfilePreviewChangesMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUndoProfilePreviewChangesMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [undoProfilePreviewChangesMutation, { data, loading, error }] = useUndoProfilePreviewChangesMutation({
 *   variables: {
 *      returnProfilePreview: // value for 'returnProfilePreview'
 *   },
 * });
 */
export function useUndoProfilePreviewChangesMutation(baseOptions?: Apollo.MutationHookOptions<UndoProfilePreviewChangesMutation, UndoProfilePreviewChangesMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UndoProfilePreviewChangesMutation, UndoProfilePreviewChangesMutationVariables>(UndoProfilePreviewChangesDocument, options);
      }
export type UndoProfilePreviewChangesMutationHookResult = ReturnType<typeof useUndoProfilePreviewChangesMutation>;
export type UndoProfilePreviewChangesMutationResult = Apollo.MutationResult<UndoProfilePreviewChangesMutation>;
export type UndoProfilePreviewChangesMutationOptions = Apollo.BaseMutationOptions<UndoProfilePreviewChangesMutation, UndoProfilePreviewChangesMutationVariables>;
export const UpdateAccountAppearanceDocument = gql`
    mutation UpdateAccountAppearance($input: UpdateAccountAppearanceInput!, $glowUp: GlowUpInput, $isProfilePreview: Boolean) {
  updateAccountAppearance(appearance: $input, glowUp: $glowUp) {
    id
    uuid
    customAvatar(isProfilePreview: $isProfilePreview)
    avatarType(isProfilePreview: $isProfilePreview)
    customAvatarAttributes(isProfilePreview: $isProfilePreview)
    customAvatarVideo(isProfilePreview: $isProfilePreview)
    accountPreviewPaidChanges {
      hasProFeatures
      hasPremiumFeatures
    }
    hasAccountPreviewChanges
  }
}
    `;
export type UpdateAccountAppearanceMutationFn = Apollo.MutationFunction<UpdateAccountAppearanceMutation, UpdateAccountAppearanceMutationVariables>;

/**
 * __useUpdateAccountAppearanceMutation__
 *
 * To run a mutation, you first call `useUpdateAccountAppearanceMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateAccountAppearanceMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateAccountAppearanceMutation, { data, loading, error }] = useUpdateAccountAppearanceMutation({
 *   variables: {
 *      input: // value for 'input'
 *      glowUp: // value for 'glowUp'
 *      isProfilePreview: // value for 'isProfilePreview'
 *   },
 * });
 */
export function useUpdateAccountAppearanceMutation(baseOptions?: Apollo.MutationHookOptions<UpdateAccountAppearanceMutation, UpdateAccountAppearanceMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateAccountAppearanceMutation, UpdateAccountAppearanceMutationVariables>(UpdateAccountAppearanceDocument, options);
      }
export type UpdateAccountAppearanceMutationHookResult = ReturnType<typeof useUpdateAccountAppearanceMutation>;
export type UpdateAccountAppearanceMutationResult = Apollo.MutationResult<UpdateAccountAppearanceMutation>;
export type UpdateAccountAppearanceMutationOptions = Apollo.BaseMutationOptions<UpdateAccountAppearanceMutation, UpdateAccountAppearanceMutationVariables>;
export const UpdateProfileWithPreviewStateDocument = gql`
    mutation updateProfileWithPreviewState {
  updateProfileWithPreviewState {
    id
    uuid
  }
}
    `;
export type UpdateProfileWithPreviewStateMutationFn = Apollo.MutationFunction<UpdateProfileWithPreviewStateMutation, UpdateProfileWithPreviewStateMutationVariables>;

/**
 * __useUpdateProfileWithPreviewStateMutation__
 *
 * To run a mutation, you first call `useUpdateProfileWithPreviewStateMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateProfileWithPreviewStateMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateProfileWithPreviewStateMutation, { data, loading, error }] = useUpdateProfileWithPreviewStateMutation({
 *   variables: {
 *   },
 * });
 */
export function useUpdateProfileWithPreviewStateMutation(baseOptions?: Apollo.MutationHookOptions<UpdateProfileWithPreviewStateMutation, UpdateProfileWithPreviewStateMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateProfileWithPreviewStateMutation, UpdateProfileWithPreviewStateMutationVariables>(UpdateProfileWithPreviewStateDocument, options);
      }
export type UpdateProfileWithPreviewStateMutationHookResult = ReturnType<typeof useUpdateProfileWithPreviewStateMutation>;
export type UpdateProfileWithPreviewStateMutationResult = Apollo.MutationResult<UpdateProfileWithPreviewStateMutation>;
export type UpdateProfileWithPreviewStateMutationOptions = Apollo.BaseMutationOptions<UpdateProfileWithPreviewStateMutation, UpdateProfileWithPreviewStateMutationVariables>;
export const UpdateSocialLinkDocument = gql`
    mutation UpdateSocialLink($updateSocialLink: SocialLinkInput!) {
  updateSocialLink(updateSocialLink: $updateSocialLink) {
    user {
      id
      selectedAccount {
        id
        uuid
        socialLinks {
          id
          url
          type
          active
          position
          moderationAction
        }
      }
    }
  }
}
    `;
export type UpdateSocialLinkMutationFn = Apollo.MutationFunction<UpdateSocialLinkMutation, UpdateSocialLinkMutationVariables>;

/**
 * __useUpdateSocialLinkMutation__
 *
 * To run a mutation, you first call `useUpdateSocialLinkMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateSocialLinkMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateSocialLinkMutation, { data, loading, error }] = useUpdateSocialLinkMutation({
 *   variables: {
 *      updateSocialLink: // value for 'updateSocialLink'
 *   },
 * });
 */
export function useUpdateSocialLinkMutation(baseOptions?: Apollo.MutationHookOptions<UpdateSocialLinkMutation, UpdateSocialLinkMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateSocialLinkMutation, UpdateSocialLinkMutationVariables>(UpdateSocialLinkDocument, options);
      }
export type UpdateSocialLinkMutationHookResult = ReturnType<typeof useUpdateSocialLinkMutation>;
export type UpdateSocialLinkMutationResult = Apollo.MutationResult<UpdateSocialLinkMutation>;
export type UpdateSocialLinkMutationOptions = Apollo.BaseMutationOptions<UpdateSocialLinkMutation, UpdateSocialLinkMutationVariables>;
export const UpdateSocialLinksPositionDocument = gql`
    mutation UpdateSocialLinksPosition($updateSocialLinksPosition: UpdateSocialLinksPositionInput!) {
  updateSocialLinksPosition(updateSocialLinksPosition: $updateSocialLinksPosition) {
    user {
      id
      selectedAccount {
        id
        uuid
        socialLinksPosition
      }
    }
  }
}
    `;
export type UpdateSocialLinksPositionMutationFn = Apollo.MutationFunction<UpdateSocialLinksPositionMutation, UpdateSocialLinksPositionMutationVariables>;

/**
 * __useUpdateSocialLinksPositionMutation__
 *
 * To run a mutation, you first call `useUpdateSocialLinksPositionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateSocialLinksPositionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateSocialLinksPositionMutation, { data, loading, error }] = useUpdateSocialLinksPositionMutation({
 *   variables: {
 *      updateSocialLinksPosition: // value for 'updateSocialLinksPosition'
 *   },
 * });
 */
export function useUpdateSocialLinksPositionMutation(baseOptions?: Apollo.MutationHookOptions<UpdateSocialLinksPositionMutation, UpdateSocialLinksPositionMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateSocialLinksPositionMutation, UpdateSocialLinksPositionMutationVariables>(UpdateSocialLinksPositionDocument, options);
      }
export type UpdateSocialLinksPositionMutationHookResult = ReturnType<typeof useUpdateSocialLinksPositionMutation>;
export type UpdateSocialLinksPositionMutationResult = Apollo.MutationResult<UpdateSocialLinksPositionMutation>;
export type UpdateSocialLinksPositionMutationOptions = Apollo.BaseMutationOptions<UpdateSocialLinksPositionMutation, UpdateSocialLinksPositionMutationVariables>;
export const SetHasVisitedDesignPageDocument = gql`
    mutation SetHasVisitedDesignPage {
  setHasVisitedDesignPage {
    hasVisitedDesignPage
    id
  }
}
    `;
export type SetHasVisitedDesignPageMutationFn = Apollo.MutationFunction<SetHasVisitedDesignPageMutation, SetHasVisitedDesignPageMutationVariables>;

/**
 * __useSetHasVisitedDesignPageMutation__
 *
 * To run a mutation, you first call `useSetHasVisitedDesignPageMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSetHasVisitedDesignPageMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [setHasVisitedDesignPageMutation, { data, loading, error }] = useSetHasVisitedDesignPageMutation({
 *   variables: {
 *   },
 * });
 */
export function useSetHasVisitedDesignPageMutation(baseOptions?: Apollo.MutationHookOptions<SetHasVisitedDesignPageMutation, SetHasVisitedDesignPageMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<SetHasVisitedDesignPageMutation, SetHasVisitedDesignPageMutationVariables>(SetHasVisitedDesignPageDocument, options);
      }
export type SetHasVisitedDesignPageMutationHookResult = ReturnType<typeof useSetHasVisitedDesignPageMutation>;
export type SetHasVisitedDesignPageMutationResult = Apollo.MutationResult<SetHasVisitedDesignPageMutation>;
export type SetHasVisitedDesignPageMutationOptions = Apollo.BaseMutationOptions<SetHasVisitedDesignPageMutation, SetHasVisitedDesignPageMutationVariables>;
export const CommerceAccountRewardsDocument = gql`
    query CommerceAccountRewards($accountUuid: String!) {
  commerceAccountRewards(accountUuid: $accountUuid) {
    tier {
      id
      name
      primaryColor
      secondaryColor
    }
  }
}
    `;

/**
 * __useCommerceAccountRewardsQuery__
 *
 * To run a query within a React component, call `useCommerceAccountRewardsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCommerceAccountRewardsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCommerceAccountRewardsQuery({
 *   variables: {
 *      accountUuid: // value for 'accountUuid'
 *   },
 * });
 */
export function useCommerceAccountRewardsQuery(baseOptions: Apollo.QueryHookOptions<CommerceAccountRewardsQuery, CommerceAccountRewardsQueryVariables> & ({ variables: CommerceAccountRewardsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<CommerceAccountRewardsQuery, CommerceAccountRewardsQueryVariables>(CommerceAccountRewardsDocument, options);
      }
export function useCommerceAccountRewardsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CommerceAccountRewardsQuery, CommerceAccountRewardsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<CommerceAccountRewardsQuery, CommerceAccountRewardsQueryVariables>(CommerceAccountRewardsDocument, options);
        }
export function useCommerceAccountRewardsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<CommerceAccountRewardsQuery, CommerceAccountRewardsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<CommerceAccountRewardsQuery, CommerceAccountRewardsQueryVariables>(CommerceAccountRewardsDocument, options);
        }
export type CommerceAccountRewardsQueryHookResult = ReturnType<typeof useCommerceAccountRewardsQuery>;
export type CommerceAccountRewardsLazyQueryHookResult = ReturnType<typeof useCommerceAccountRewardsLazyQuery>;
export type CommerceAccountRewardsSuspenseQueryHookResult = ReturnType<typeof useCommerceAccountRewardsSuspenseQuery>;
export type CommerceAccountRewardsQueryResult = Apollo.QueryResult<CommerceAccountRewardsQuery, CommerceAccountRewardsQueryVariables>;
export const GetRewardsNotificationsDocument = gql`
    query GetRewardsNotifications($accountUuid: String!, $timestamp: DateTime) {
  commercePollRewardsNotifications(
    accountUuid: $accountUuid
    timestamp: $timestamp
  ) {
    timestamp
    notifications {
      text
      points
    }
    notificationsV2 {
      title
      description
    }
  }
}
    `;

/**
 * __useGetRewardsNotificationsQuery__
 *
 * To run a query within a React component, call `useGetRewardsNotificationsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetRewardsNotificationsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetRewardsNotificationsQuery({
 *   variables: {
 *      accountUuid: // value for 'accountUuid'
 *      timestamp: // value for 'timestamp'
 *   },
 * });
 */
export function useGetRewardsNotificationsQuery(baseOptions: Apollo.QueryHookOptions<GetRewardsNotificationsQuery, GetRewardsNotificationsQueryVariables> & ({ variables: GetRewardsNotificationsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetRewardsNotificationsQuery, GetRewardsNotificationsQueryVariables>(GetRewardsNotificationsDocument, options);
      }
export function useGetRewardsNotificationsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetRewardsNotificationsQuery, GetRewardsNotificationsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetRewardsNotificationsQuery, GetRewardsNotificationsQueryVariables>(GetRewardsNotificationsDocument, options);
        }
export function useGetRewardsNotificationsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetRewardsNotificationsQuery, GetRewardsNotificationsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetRewardsNotificationsQuery, GetRewardsNotificationsQueryVariables>(GetRewardsNotificationsDocument, options);
        }
export type GetRewardsNotificationsQueryHookResult = ReturnType<typeof useGetRewardsNotificationsQuery>;
export type GetRewardsNotificationsLazyQueryHookResult = ReturnType<typeof useGetRewardsNotificationsLazyQuery>;
export type GetRewardsNotificationsSuspenseQueryHookResult = ReturnType<typeof useGetRewardsNotificationsSuspenseQuery>;
export type GetRewardsNotificationsQueryResult = Apollo.QueryResult<GetRewardsNotificationsQuery, GetRewardsNotificationsQueryVariables>;
export const FollowersAreEnabledDocument = gql`
    query FollowersAreEnabled($uuid: String!) {
  followersAreEnabled(account: {uuid: $uuid}) {
    hasFeatureAccess
    enabled
  }
}
    `;

/**
 * __useFollowersAreEnabledQuery__
 *
 * To run a query within a React component, call `useFollowersAreEnabledQuery` and pass it any options that fit your needs.
 * When your component renders, `useFollowersAreEnabledQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useFollowersAreEnabledQuery({
 *   variables: {
 *      uuid: // value for 'uuid'
 *   },
 * });
 */
export function useFollowersAreEnabledQuery(baseOptions: Apollo.QueryHookOptions<FollowersAreEnabledQuery, FollowersAreEnabledQueryVariables> & ({ variables: FollowersAreEnabledQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<FollowersAreEnabledQuery, FollowersAreEnabledQueryVariables>(FollowersAreEnabledDocument, options);
      }
export function useFollowersAreEnabledLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<FollowersAreEnabledQuery, FollowersAreEnabledQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<FollowersAreEnabledQuery, FollowersAreEnabledQueryVariables>(FollowersAreEnabledDocument, options);
        }
export function useFollowersAreEnabledSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<FollowersAreEnabledQuery, FollowersAreEnabledQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<FollowersAreEnabledQuery, FollowersAreEnabledQueryVariables>(FollowersAreEnabledDocument, options);
        }
export type FollowersAreEnabledQueryHookResult = ReturnType<typeof useFollowersAreEnabledQuery>;
export type FollowersAreEnabledLazyQueryHookResult = ReturnType<typeof useFollowersAreEnabledLazyQuery>;
export type FollowersAreEnabledSuspenseQueryHookResult = ReturnType<typeof useFollowersAreEnabledSuspenseQuery>;
export type FollowersAreEnabledQueryResult = Apollo.QueryResult<FollowersAreEnabledQuery, FollowersAreEnabledQueryVariables>;
export const GetAccountAnalyticsDocument = gql`
    query GetAccountAnalytics($account: AccountAnalyticsInput, $includeStorefront: Boolean) {
  getAccountAnalytics(account: $account, includeStorefront: $includeStorefront) {
    lifetime {
      views {
        total
      }
      clicks {
        total
        profile
      }
      subscribers {
        total
      }
      clickThroughRate
    }
  }
}
    `;

/**
 * __useGetAccountAnalyticsQuery__
 *
 * To run a query within a React component, call `useGetAccountAnalyticsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAccountAnalyticsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAccountAnalyticsQuery({
 *   variables: {
 *      account: // value for 'account'
 *      includeStorefront: // value for 'includeStorefront'
 *   },
 * });
 */
export function useGetAccountAnalyticsQuery(baseOptions?: Apollo.QueryHookOptions<GetAccountAnalyticsQuery, GetAccountAnalyticsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetAccountAnalyticsQuery, GetAccountAnalyticsQueryVariables>(GetAccountAnalyticsDocument, options);
      }
export function useGetAccountAnalyticsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAccountAnalyticsQuery, GetAccountAnalyticsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetAccountAnalyticsQuery, GetAccountAnalyticsQueryVariables>(GetAccountAnalyticsDocument, options);
        }
export function useGetAccountAnalyticsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetAccountAnalyticsQuery, GetAccountAnalyticsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetAccountAnalyticsQuery, GetAccountAnalyticsQueryVariables>(GetAccountAnalyticsDocument, options);
        }
export type GetAccountAnalyticsQueryHookResult = ReturnType<typeof useGetAccountAnalyticsQuery>;
export type GetAccountAnalyticsLazyQueryHookResult = ReturnType<typeof useGetAccountAnalyticsLazyQuery>;
export type GetAccountAnalyticsSuspenseQueryHookResult = ReturnType<typeof useGetAccountAnalyticsSuspenseQuery>;
export type GetAccountAnalyticsQueryResult = Apollo.QueryResult<GetAccountAnalyticsQuery, GetAccountAnalyticsQueryVariables>;
export const GetAccountAnalyticsWithReferrersDocument = gql`
    query GetAccountAnalyticsWithReferrers($account: AccountAnalyticsInput, $includeStorefront: Boolean, $includeReferrers: Boolean = false, $range: Range) {
  getAccountAnalytics(
    account: $account
    includeStorefront: $includeStorefront
    range: $range
  ) {
    lifetime {
      views {
        total
      }
      clicks {
        total
        profile
      }
      subscribers {
        total
      }
      timeToClick
      clickThroughRate
      payments {
        revenueNet
        currency
      }
    }
    referrers @include(if: $includeReferrers) {
      referrers {
        name
        views {
          total
        }
        clicks {
          total
          profile
        }
        clickThroughRate
      }
    }
  }
}
    `;

/**
 * __useGetAccountAnalyticsWithReferrersQuery__
 *
 * To run a query within a React component, call `useGetAccountAnalyticsWithReferrersQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAccountAnalyticsWithReferrersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAccountAnalyticsWithReferrersQuery({
 *   variables: {
 *      account: // value for 'account'
 *      includeStorefront: // value for 'includeStorefront'
 *      includeReferrers: // value for 'includeReferrers'
 *      range: // value for 'range'
 *   },
 * });
 */
export function useGetAccountAnalyticsWithReferrersQuery(baseOptions?: Apollo.QueryHookOptions<GetAccountAnalyticsWithReferrersQuery, GetAccountAnalyticsWithReferrersQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetAccountAnalyticsWithReferrersQuery, GetAccountAnalyticsWithReferrersQueryVariables>(GetAccountAnalyticsWithReferrersDocument, options);
      }
export function useGetAccountAnalyticsWithReferrersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAccountAnalyticsWithReferrersQuery, GetAccountAnalyticsWithReferrersQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetAccountAnalyticsWithReferrersQuery, GetAccountAnalyticsWithReferrersQueryVariables>(GetAccountAnalyticsWithReferrersDocument, options);
        }
export function useGetAccountAnalyticsWithReferrersSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetAccountAnalyticsWithReferrersQuery, GetAccountAnalyticsWithReferrersQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetAccountAnalyticsWithReferrersQuery, GetAccountAnalyticsWithReferrersQueryVariables>(GetAccountAnalyticsWithReferrersDocument, options);
        }
export type GetAccountAnalyticsWithReferrersQueryHookResult = ReturnType<typeof useGetAccountAnalyticsWithReferrersQuery>;
export type GetAccountAnalyticsWithReferrersLazyQueryHookResult = ReturnType<typeof useGetAccountAnalyticsWithReferrersLazyQuery>;
export type GetAccountAnalyticsWithReferrersSuspenseQueryHookResult = ReturnType<typeof useGetAccountAnalyticsWithReferrersSuspenseQuery>;
export type GetAccountAnalyticsWithReferrersQueryResult = Apollo.QueryResult<GetAccountAnalyticsWithReferrersQuery, GetAccountAnalyticsWithReferrersQueryVariables>;
export const GetAccountAvatarPropertiesDocument = gql`
    query GetAccountAvatarProperties($isProfilePreview: Boolean!) {
  currentUser {
    id
    selectedAccount {
      id
      customAvatarAttributes
      customAvatar(isProfilePreview: $isProfilePreview)
      avatarType(isProfilePreview: $isProfilePreview)
      avatarMode(isProfilePreview: $isProfilePreview)
    }
  }
}
    `;

/**
 * __useGetAccountAvatarPropertiesQuery__
 *
 * To run a query within a React component, call `useGetAccountAvatarPropertiesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAccountAvatarPropertiesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAccountAvatarPropertiesQuery({
 *   variables: {
 *      isProfilePreview: // value for 'isProfilePreview'
 *   },
 * });
 */
export function useGetAccountAvatarPropertiesQuery(baseOptions: Apollo.QueryHookOptions<GetAccountAvatarPropertiesQuery, GetAccountAvatarPropertiesQueryVariables> & ({ variables: GetAccountAvatarPropertiesQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetAccountAvatarPropertiesQuery, GetAccountAvatarPropertiesQueryVariables>(GetAccountAvatarPropertiesDocument, options);
      }
export function useGetAccountAvatarPropertiesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAccountAvatarPropertiesQuery, GetAccountAvatarPropertiesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetAccountAvatarPropertiesQuery, GetAccountAvatarPropertiesQueryVariables>(GetAccountAvatarPropertiesDocument, options);
        }
export function useGetAccountAvatarPropertiesSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetAccountAvatarPropertiesQuery, GetAccountAvatarPropertiesQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetAccountAvatarPropertiesQuery, GetAccountAvatarPropertiesQueryVariables>(GetAccountAvatarPropertiesDocument, options);
        }
export type GetAccountAvatarPropertiesQueryHookResult = ReturnType<typeof useGetAccountAvatarPropertiesQuery>;
export type GetAccountAvatarPropertiesLazyQueryHookResult = ReturnType<typeof useGetAccountAvatarPropertiesLazyQuery>;
export type GetAccountAvatarPropertiesSuspenseQueryHookResult = ReturnType<typeof useGetAccountAvatarPropertiesSuspenseQuery>;
export type GetAccountAvatarPropertiesQueryResult = Apollo.QueryResult<GetAccountAvatarPropertiesQuery, GetAccountAvatarPropertiesQueryVariables>;
export const GetActiveSponsoredOffersDocument = gql`
    query GetActiveSponsoredOffers($accountUuid: String!) {
  getActiveSponsoredOffers(accountUuid: $accountUuid) {
    id
    isNew
  }
}
    `;

/**
 * __useGetActiveSponsoredOffersQuery__
 *
 * To run a query within a React component, call `useGetActiveSponsoredOffersQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetActiveSponsoredOffersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetActiveSponsoredOffersQuery({
 *   variables: {
 *      accountUuid: // value for 'accountUuid'
 *   },
 * });
 */
export function useGetActiveSponsoredOffersQuery(baseOptions: Apollo.QueryHookOptions<GetActiveSponsoredOffersQuery, GetActiveSponsoredOffersQueryVariables> & ({ variables: GetActiveSponsoredOffersQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetActiveSponsoredOffersQuery, GetActiveSponsoredOffersQueryVariables>(GetActiveSponsoredOffersDocument, options);
      }
export function useGetActiveSponsoredOffersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetActiveSponsoredOffersQuery, GetActiveSponsoredOffersQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetActiveSponsoredOffersQuery, GetActiveSponsoredOffersQueryVariables>(GetActiveSponsoredOffersDocument, options);
        }
export function useGetActiveSponsoredOffersSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetActiveSponsoredOffersQuery, GetActiveSponsoredOffersQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetActiveSponsoredOffersQuery, GetActiveSponsoredOffersQueryVariables>(GetActiveSponsoredOffersDocument, options);
        }
export type GetActiveSponsoredOffersQueryHookResult = ReturnType<typeof useGetActiveSponsoredOffersQuery>;
export type GetActiveSponsoredOffersLazyQueryHookResult = ReturnType<typeof useGetActiveSponsoredOffersLazyQuery>;
export type GetActiveSponsoredOffersSuspenseQueryHookResult = ReturnType<typeof useGetActiveSponsoredOffersSuspenseQuery>;
export type GetActiveSponsoredOffersQueryResult = Apollo.QueryResult<GetActiveSponsoredOffersQuery, GetActiveSponsoredOffersQueryVariables>;
export const GetCanvaAssetUploadJobDocument = gql`
    query GetCanvaAssetUploadJob($input: GetCanvaAssetUploadJobInput!) {
  getCanvaAssetUploadJob(input: $input) {
    jobId
    status
    error
    canvaAsset {
      id
    }
  }
}
    `;

/**
 * __useGetCanvaAssetUploadJobQuery__
 *
 * To run a query within a React component, call `useGetCanvaAssetUploadJobQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCanvaAssetUploadJobQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCanvaAssetUploadJobQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useGetCanvaAssetUploadJobQuery(baseOptions: Apollo.QueryHookOptions<GetCanvaAssetUploadJobQuery, GetCanvaAssetUploadJobQueryVariables> & ({ variables: GetCanvaAssetUploadJobQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCanvaAssetUploadJobQuery, GetCanvaAssetUploadJobQueryVariables>(GetCanvaAssetUploadJobDocument, options);
      }
export function useGetCanvaAssetUploadJobLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCanvaAssetUploadJobQuery, GetCanvaAssetUploadJobQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCanvaAssetUploadJobQuery, GetCanvaAssetUploadJobQueryVariables>(GetCanvaAssetUploadJobDocument, options);
        }
export function useGetCanvaAssetUploadJobSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetCanvaAssetUploadJobQuery, GetCanvaAssetUploadJobQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetCanvaAssetUploadJobQuery, GetCanvaAssetUploadJobQueryVariables>(GetCanvaAssetUploadJobDocument, options);
        }
export type GetCanvaAssetUploadJobQueryHookResult = ReturnType<typeof useGetCanvaAssetUploadJobQuery>;
export type GetCanvaAssetUploadJobLazyQueryHookResult = ReturnType<typeof useGetCanvaAssetUploadJobLazyQuery>;
export type GetCanvaAssetUploadJobSuspenseQueryHookResult = ReturnType<typeof useGetCanvaAssetUploadJobSuspenseQuery>;
export type GetCanvaAssetUploadJobQueryResult = Apollo.QueryResult<GetCanvaAssetUploadJobQuery, GetCanvaAssetUploadJobQueryVariables>;
export const GetCanvaDesignDocument = gql`
    query GetCanvaDesign($id: String!, $accountUuid: String!, $returnNavigation: String) {
  accountFromUuid(uuid: $accountUuid) {
    id
    integrations(filter: {types: [CANVA_DESIGN]}) {
      id
      active
      type
      context {
        ... on CanvaIntegrationContext {
          isAuthenticated
          design(id: $id, returnNavigation: $returnNavigation) {
            id
            title
            thumbnailUrl
            editUrl
            viewUrl
            pageCount
            pages {
              index
              thumbnailUrl
            }
          }
          __typename
        }
      }
    }
  }
}
    `;

/**
 * __useGetCanvaDesignQuery__
 *
 * To run a query within a React component, call `useGetCanvaDesignQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCanvaDesignQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCanvaDesignQuery({
 *   variables: {
 *      id: // value for 'id'
 *      accountUuid: // value for 'accountUuid'
 *      returnNavigation: // value for 'returnNavigation'
 *   },
 * });
 */
export function useGetCanvaDesignQuery(baseOptions: Apollo.QueryHookOptions<GetCanvaDesignQuery, GetCanvaDesignQueryVariables> & ({ variables: GetCanvaDesignQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCanvaDesignQuery, GetCanvaDesignQueryVariables>(GetCanvaDesignDocument, options);
      }
export function useGetCanvaDesignLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCanvaDesignQuery, GetCanvaDesignQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCanvaDesignQuery, GetCanvaDesignQueryVariables>(GetCanvaDesignDocument, options);
        }
export function useGetCanvaDesignSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetCanvaDesignQuery, GetCanvaDesignQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetCanvaDesignQuery, GetCanvaDesignQueryVariables>(GetCanvaDesignDocument, options);
        }
export type GetCanvaDesignQueryHookResult = ReturnType<typeof useGetCanvaDesignQuery>;
export type GetCanvaDesignLazyQueryHookResult = ReturnType<typeof useGetCanvaDesignLazyQuery>;
export type GetCanvaDesignSuspenseQueryHookResult = ReturnType<typeof useGetCanvaDesignSuspenseQuery>;
export type GetCanvaDesignQueryResult = Apollo.QueryResult<GetCanvaDesignQuery, GetCanvaDesignQueryVariables>;
export const GetCanvaDesignExportJobDocument = gql`
    query GetCanvaDesignExportJob($input: GetCanvaDesignExportJobInput!) {
  getCanvaDesignExportJob(input: $input) {
    jobId
    status
    error
    canvaDesignUrls
  }
}
    `;

/**
 * __useGetCanvaDesignExportJobQuery__
 *
 * To run a query within a React component, call `useGetCanvaDesignExportJobQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCanvaDesignExportJobQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCanvaDesignExportJobQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useGetCanvaDesignExportJobQuery(baseOptions: Apollo.QueryHookOptions<GetCanvaDesignExportJobQuery, GetCanvaDesignExportJobQueryVariables> & ({ variables: GetCanvaDesignExportJobQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCanvaDesignExportJobQuery, GetCanvaDesignExportJobQueryVariables>(GetCanvaDesignExportJobDocument, options);
      }
export function useGetCanvaDesignExportJobLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCanvaDesignExportJobQuery, GetCanvaDesignExportJobQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCanvaDesignExportJobQuery, GetCanvaDesignExportJobQueryVariables>(GetCanvaDesignExportJobDocument, options);
        }
export function useGetCanvaDesignExportJobSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetCanvaDesignExportJobQuery, GetCanvaDesignExportJobQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetCanvaDesignExportJobQuery, GetCanvaDesignExportJobQueryVariables>(GetCanvaDesignExportJobDocument, options);
        }
export type GetCanvaDesignExportJobQueryHookResult = ReturnType<typeof useGetCanvaDesignExportJobQuery>;
export type GetCanvaDesignExportJobLazyQueryHookResult = ReturnType<typeof useGetCanvaDesignExportJobLazyQuery>;
export type GetCanvaDesignExportJobSuspenseQueryHookResult = ReturnType<typeof useGetCanvaDesignExportJobSuspenseQuery>;
export type GetCanvaDesignExportJobQueryResult = Apollo.QueryResult<GetCanvaDesignExportJobQuery, GetCanvaDesignExportJobQueryVariables>;
export const GetCanvaIntegrationDocument = gql`
    query GetCanvaIntegration($accountUuid: String!, $query: String, $continuation: String, $returnNavigation: String, $includeDesigns: Boolean = false, $includeUser: Boolean = false) {
  accountFromUuid(uuid: $accountUuid) {
    id
    uuid
    integrations(filter: {types: [CANVA_DESIGN]}) {
      id
      active
      type
      context {
        ... on CanvaIntegrationContext {
          isAuthenticated
          user @include(if: $includeUser) {
            userId
          }
          designs(
            query: $query
            continuation: $continuation
            returnNavigation: $returnNavigation
          ) @include(if: $includeDesigns) {
            continuation
            items {
              id
              title
              thumbnailUrl
              editUrl
              viewUrl
              pageCount
            }
          }
          __typename
        }
      }
    }
  }
}
    `;

/**
 * __useGetCanvaIntegrationQuery__
 *
 * To run a query within a React component, call `useGetCanvaIntegrationQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCanvaIntegrationQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCanvaIntegrationQuery({
 *   variables: {
 *      accountUuid: // value for 'accountUuid'
 *      query: // value for 'query'
 *      continuation: // value for 'continuation'
 *      returnNavigation: // value for 'returnNavigation'
 *      includeDesigns: // value for 'includeDesigns'
 *      includeUser: // value for 'includeUser'
 *   },
 * });
 */
export function useGetCanvaIntegrationQuery(baseOptions: Apollo.QueryHookOptions<GetCanvaIntegrationQuery, GetCanvaIntegrationQueryVariables> & ({ variables: GetCanvaIntegrationQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCanvaIntegrationQuery, GetCanvaIntegrationQueryVariables>(GetCanvaIntegrationDocument, options);
      }
export function useGetCanvaIntegrationLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCanvaIntegrationQuery, GetCanvaIntegrationQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCanvaIntegrationQuery, GetCanvaIntegrationQueryVariables>(GetCanvaIntegrationDocument, options);
        }
export function useGetCanvaIntegrationSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetCanvaIntegrationQuery, GetCanvaIntegrationQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetCanvaIntegrationQuery, GetCanvaIntegrationQueryVariables>(GetCanvaIntegrationDocument, options);
        }
export type GetCanvaIntegrationQueryHookResult = ReturnType<typeof useGetCanvaIntegrationQuery>;
export type GetCanvaIntegrationLazyQueryHookResult = ReturnType<typeof useGetCanvaIntegrationLazyQuery>;
export type GetCanvaIntegrationSuspenseQueryHookResult = ReturnType<typeof useGetCanvaIntegrationSuspenseQuery>;
export type GetCanvaIntegrationQueryResult = Apollo.QueryResult<GetCanvaIntegrationQuery, GetCanvaIntegrationQueryVariables>;
export const GetCommerceBrandProfileForDisplayDocument = gql`
    query GetCommerceBrandProfileForDisplay($accountUuid: String!) {
  commerceBrandProfile(accountUuid: $accountUuid) {
    id
    accountUuid
    setupStatus {
      hasConnectedSocials
      cards {
        id
        icon
        isComplete
        title
      }
    }
  }
}
    `;

/**
 * __useGetCommerceBrandProfileForDisplayQuery__
 *
 * To run a query within a React component, call `useGetCommerceBrandProfileForDisplayQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCommerceBrandProfileForDisplayQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCommerceBrandProfileForDisplayQuery({
 *   variables: {
 *      accountUuid: // value for 'accountUuid'
 *   },
 * });
 */
export function useGetCommerceBrandProfileForDisplayQuery(baseOptions: Apollo.QueryHookOptions<GetCommerceBrandProfileForDisplayQuery, GetCommerceBrandProfileForDisplayQueryVariables> & ({ variables: GetCommerceBrandProfileForDisplayQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCommerceBrandProfileForDisplayQuery, GetCommerceBrandProfileForDisplayQueryVariables>(GetCommerceBrandProfileForDisplayDocument, options);
      }
export function useGetCommerceBrandProfileForDisplayLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCommerceBrandProfileForDisplayQuery, GetCommerceBrandProfileForDisplayQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCommerceBrandProfileForDisplayQuery, GetCommerceBrandProfileForDisplayQueryVariables>(GetCommerceBrandProfileForDisplayDocument, options);
        }
export function useGetCommerceBrandProfileForDisplaySuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetCommerceBrandProfileForDisplayQuery, GetCommerceBrandProfileForDisplayQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetCommerceBrandProfileForDisplayQuery, GetCommerceBrandProfileForDisplayQueryVariables>(GetCommerceBrandProfileForDisplayDocument, options);
        }
export type GetCommerceBrandProfileForDisplayQueryHookResult = ReturnType<typeof useGetCommerceBrandProfileForDisplayQuery>;
export type GetCommerceBrandProfileForDisplayLazyQueryHookResult = ReturnType<typeof useGetCommerceBrandProfileForDisplayLazyQuery>;
export type GetCommerceBrandProfileForDisplaySuspenseQueryHookResult = ReturnType<typeof useGetCommerceBrandProfileForDisplaySuspenseQuery>;
export type GetCommerceBrandProfileForDisplayQueryResult = Apollo.QueryResult<GetCommerceBrandProfileForDisplayQuery, GetCommerceBrandProfileForDisplayQueryVariables>;
export const CommerceChatSessionTokenDocument = gql`
    query CommerceChatSessionToken($userId: String!) {
  commerceChatSessionToken(accountUuid: $userId) {
    token
  }
}
    `;

/**
 * __useCommerceChatSessionTokenQuery__
 *
 * To run a query within a React component, call `useCommerceChatSessionTokenQuery` and pass it any options that fit your needs.
 * When your component renders, `useCommerceChatSessionTokenQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCommerceChatSessionTokenQuery({
 *   variables: {
 *      userId: // value for 'userId'
 *   },
 * });
 */
export function useCommerceChatSessionTokenQuery(baseOptions: Apollo.QueryHookOptions<CommerceChatSessionTokenQuery, CommerceChatSessionTokenQueryVariables> & ({ variables: CommerceChatSessionTokenQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<CommerceChatSessionTokenQuery, CommerceChatSessionTokenQueryVariables>(CommerceChatSessionTokenDocument, options);
      }
export function useCommerceChatSessionTokenLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CommerceChatSessionTokenQuery, CommerceChatSessionTokenQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<CommerceChatSessionTokenQuery, CommerceChatSessionTokenQueryVariables>(CommerceChatSessionTokenDocument, options);
        }
export function useCommerceChatSessionTokenSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<CommerceChatSessionTokenQuery, CommerceChatSessionTokenQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<CommerceChatSessionTokenQuery, CommerceChatSessionTokenQueryVariables>(CommerceChatSessionTokenDocument, options);
        }
export type CommerceChatSessionTokenQueryHookResult = ReturnType<typeof useCommerceChatSessionTokenQuery>;
export type CommerceChatSessionTokenLazyQueryHookResult = ReturnType<typeof useCommerceChatSessionTokenLazyQuery>;
export type CommerceChatSessionTokenSuspenseQueryHookResult = ReturnType<typeof useCommerceChatSessionTokenSuspenseQuery>;
export type CommerceChatSessionTokenQueryResult = Apollo.QueryResult<CommerceChatSessionTokenQuery, CommerceChatSessionTokenQueryVariables>;
export const GetCommerceWalletDocument = gql`
    query GetCommerceWallet($accountUuid: String!, $country: String!) {
  getCommerceWallet(accountUuid: $accountUuid, country: $country) {
    accountUuid
    balances {
      currency
      amount
    }
  }
  allCommissions: getCommerceCommissionsByAccountUuid(accountUuid: $accountUuid) {
    summary {
      displayValue
    }
  }
  getWalletStateV3(accountUuid: $accountUuid) {
    digitalCardInfo {
      balance
      currency
    }
  }
}
    `;

/**
 * __useGetCommerceWalletQuery__
 *
 * To run a query within a React component, call `useGetCommerceWalletQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCommerceWalletQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCommerceWalletQuery({
 *   variables: {
 *      accountUuid: // value for 'accountUuid'
 *      country: // value for 'country'
 *   },
 * });
 */
export function useGetCommerceWalletQuery(baseOptions: Apollo.QueryHookOptions<GetCommerceWalletQuery, GetCommerceWalletQueryVariables> & ({ variables: GetCommerceWalletQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCommerceWalletQuery, GetCommerceWalletQueryVariables>(GetCommerceWalletDocument, options);
      }
export function useGetCommerceWalletLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCommerceWalletQuery, GetCommerceWalletQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCommerceWalletQuery, GetCommerceWalletQueryVariables>(GetCommerceWalletDocument, options);
        }
export function useGetCommerceWalletSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetCommerceWalletQuery, GetCommerceWalletQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetCommerceWalletQuery, GetCommerceWalletQueryVariables>(GetCommerceWalletDocument, options);
        }
export type GetCommerceWalletQueryHookResult = ReturnType<typeof useGetCommerceWalletQuery>;
export type GetCommerceWalletLazyQueryHookResult = ReturnType<typeof useGetCommerceWalletLazyQuery>;
export type GetCommerceWalletSuspenseQueryHookResult = ReturnType<typeof useGetCommerceWalletSuspenseQuery>;
export type GetCommerceWalletQueryResult = Apollo.QueryResult<GetCommerceWalletQuery, GetCommerceWalletQueryVariables>;
export const GetCurrentUserDocument = gql`
    query GetCurrentUser($isGlowUpPreview: Boolean = false) {
  currentCountryCode {
    countryCode
  }
  currentUser {
    id
    uuid
    emailVerified
    email
    canCreateMultiProfile
    username
    signupMethod
    accounts {
      id
      uuid
      username
      status
      customAvatar
      pageTitle
      tier
      theme {
        key
      }
    }
    selectedAccount(isGlowUpPreview: $isGlowUpPreview) {
      id
      tier
      uuid
      eligibleForMonetization
      canvaAvatarDesignId
      backgroundImage
      backgroundImageAttributes
      canvaBackgroundDesignId
      isSensitiveWithGracePeriod
      customAvatar
      customAvatarAttributes
      avatarType
      country
      isStoreTabEnabled
      hasUsedFreeProTier
      status
      verticals
      verticalsV2
      inAppMessages {
        code
        level
        dismissedAt
        count
      }
      username
      profilePicture
      realName
      pageTitle
      description
      headingType
      socialLinks {
        id
        type
        url
        position
      }
      theme {
        key
      }
      planSubscription {
        id
        paymentMethod
        isActive
        periodStart
        periodEnd
        couponId
        isNonRenewing
      }
      subscriptionV2 {
        id
        paymentMethod
        isActive
        periodEnd
        couponId
        isNonRenewing
        accountLimit
        activeAccount {
          id
        }
      }
      hasUndoChanges
      hasRedoChanges
      isPaymentWarning
      hasAccountPreviewChanges
      accountPreviewPaidChanges {
        hasProFeatures
        hasPremiumFeatures
      }
      isEnterprise
      hasVisitedDesignPage
    }
  }
}
    `;

/**
 * __useGetCurrentUserQuery__
 *
 * To run a query within a React component, call `useGetCurrentUserQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCurrentUserQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCurrentUserQuery({
 *   variables: {
 *      isGlowUpPreview: // value for 'isGlowUpPreview'
 *   },
 * });
 */
export function useGetCurrentUserQuery(baseOptions?: Apollo.QueryHookOptions<GetCurrentUserQuery, GetCurrentUserQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCurrentUserQuery, GetCurrentUserQueryVariables>(GetCurrentUserDocument, options);
      }
export function useGetCurrentUserLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCurrentUserQuery, GetCurrentUserQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCurrentUserQuery, GetCurrentUserQueryVariables>(GetCurrentUserDocument, options);
        }
export function useGetCurrentUserSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetCurrentUserQuery, GetCurrentUserQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetCurrentUserQuery, GetCurrentUserQueryVariables>(GetCurrentUserDocument, options);
        }
export type GetCurrentUserQueryHookResult = ReturnType<typeof useGetCurrentUserQuery>;
export type GetCurrentUserLazyQueryHookResult = ReturnType<typeof useGetCurrentUserLazyQuery>;
export type GetCurrentUserSuspenseQueryHookResult = ReturnType<typeof useGetCurrentUserSuspenseQuery>;
export type GetCurrentUserQueryResult = Apollo.QueryResult<GetCurrentUserQuery, GetCurrentUserQueryVariables>;
export const GetFollowersDocument = gql`
    query GetFollowers($account: AccountInput) {
  getFollowers(account: $account) {
    emailAgreeToShareCount
    phoneAgreeToShareCount
    totalCount
    totalCountTrend {
      diff
    }
    totalCountDiff
    totalCountDiffTrend {
      diff
    }
    totalSubscribedCount
    totalSubscribedCountTrend {
      diff
    }
    totalUnsubscribedCount
    totalUnsubscribedCountTrend {
      diff
    }
  }
}
    `;

/**
 * __useGetFollowersQuery__
 *
 * To run a query within a React component, call `useGetFollowersQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetFollowersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetFollowersQuery({
 *   variables: {
 *      account: // value for 'account'
 *   },
 * });
 */
export function useGetFollowersQuery(baseOptions?: Apollo.QueryHookOptions<GetFollowersQuery, GetFollowersQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetFollowersQuery, GetFollowersQueryVariables>(GetFollowersDocument, options);
      }
export function useGetFollowersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetFollowersQuery, GetFollowersQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetFollowersQuery, GetFollowersQueryVariables>(GetFollowersDocument, options);
        }
export function useGetFollowersSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetFollowersQuery, GetFollowersQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetFollowersQuery, GetFollowersQueryVariables>(GetFollowersDocument, options);
        }
export type GetFollowersQueryHookResult = ReturnType<typeof useGetFollowersQuery>;
export type GetFollowersLazyQueryHookResult = ReturnType<typeof useGetFollowersLazyQuery>;
export type GetFollowersSuspenseQueryHookResult = ReturnType<typeof useGetFollowersSuspenseQuery>;
export type GetFollowersQueryResult = Apollo.QueryResult<GetFollowersQuery, GetFollowersQueryVariables>;
export const GetFreeHomeAnalyticsDocument = gql`
    query GetFreeHomeAnalytics($accountId: Int!) {
  getAccountAnalytics(account: {accountId: $accountId}) {
    lifetime {
      views {
        total
      }
      clicks {
        total
      }
    }
  }
}
    `;

/**
 * __useGetFreeHomeAnalyticsQuery__
 *
 * To run a query within a React component, call `useGetFreeHomeAnalyticsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetFreeHomeAnalyticsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetFreeHomeAnalyticsQuery({
 *   variables: {
 *      accountId: // value for 'accountId'
 *   },
 * });
 */
export function useGetFreeHomeAnalyticsQuery(baseOptions: Apollo.QueryHookOptions<GetFreeHomeAnalyticsQuery, GetFreeHomeAnalyticsQueryVariables> & ({ variables: GetFreeHomeAnalyticsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetFreeHomeAnalyticsQuery, GetFreeHomeAnalyticsQueryVariables>(GetFreeHomeAnalyticsDocument, options);
      }
export function useGetFreeHomeAnalyticsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetFreeHomeAnalyticsQuery, GetFreeHomeAnalyticsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetFreeHomeAnalyticsQuery, GetFreeHomeAnalyticsQueryVariables>(GetFreeHomeAnalyticsDocument, options);
        }
export function useGetFreeHomeAnalyticsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetFreeHomeAnalyticsQuery, GetFreeHomeAnalyticsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetFreeHomeAnalyticsQuery, GetFreeHomeAnalyticsQueryVariables>(GetFreeHomeAnalyticsDocument, options);
        }
export type GetFreeHomeAnalyticsQueryHookResult = ReturnType<typeof useGetFreeHomeAnalyticsQuery>;
export type GetFreeHomeAnalyticsLazyQueryHookResult = ReturnType<typeof useGetFreeHomeAnalyticsLazyQuery>;
export type GetFreeHomeAnalyticsSuspenseQueryHookResult = ReturnType<typeof useGetFreeHomeAnalyticsSuspenseQuery>;
export type GetFreeHomeAnalyticsQueryResult = Apollo.QueryResult<GetFreeHomeAnalyticsQuery, GetFreeHomeAnalyticsQueryVariables>;
export const GetGlowUpStatusDocument = gql`
    query GetGlowUpStatus {
  currentUser {
    id
    selectedAccount {
      id
      uuid
      colorPalette {
        palette
        alternatePalette
      }
      hasCustomBackgroundColor
      backgroundImage
      backgroundStyle
      glowUp {
        status
        conversationId
        data {
          toolId
          isToggled
          type
          paidChange {
            isPro
            isPremium
          }
          incompleteGlowUpData {
            message
          }
          previousState {
            ... on GlowUpToolHeroPreviousState {
              avatarMode
            }
            ... on GlowUpToolFeaturedLayoutPreviousState {
              links {
                linkId
                layoutOption
              }
            }
            ... on GlowUpToolAnimateLinkPreviousState {
              links {
                linkId
                animation
              }
            }
            ... on GlowUpToolUpdateLinkTitlePreviousState {
              updatedLinks: links {
                linkId
                title
              }
            }
            ... on GlowUpToolUpdateBioPreviousState {
              account {
                pageTitle
                description
              }
            }
            ... on GlowUpToolUpdateAppearancePreviousState {
              backgroundColor
              backgroundGradient
              backgroundGradientStyle
              backgroundTint
              buttonColor
              buttonStyle
              buttonShadowStyle
              buttonCornerStyle
              buttonTextColor
              fontStyle
              fontColor
              customAvatar
              backgroundStyle
              colourway
              colorPalette
              whiteLabel
              backgroundHeroColor
              luminance
              customAvatarAttributes
              canvaAvatarDesignId
              canvaBackgroundDesignId
              customAvatarVideo
              shadowColor
              backgroundPoster
              backgroundImage
              backgroundImageAttributes
              colorSchema
            }
            ... on GlowUpToolSetThumbnailPreviousState {
              links {
                linkId
                thumbnailUrl
              }
            }
            ... on GlowUpToolRichMediaYoutubePreviousState {
              links {
                linkId
                linkType
                embedOption
                autoplay
                mute
                videoId
                channelId
                playlistId
              }
            }
            ... on GlowUpToolRichMediaSpotifyPreviousState {
              links {
                linkId
                linkType
                embedOption
                useLatestEpisode
              }
            }
            ... on GlowUpToolCreateSocialLinkPreviousState {
              socialLinks {
                type
                url
                id
                active
                position
              }
            }
            ... on GlowUpToolUpdateHeadingOptionsPreviousState {
              headingType
              headingLogoSize
              headingEffect
              headingFont
              headingColor
              headingSize
              headingLogo
            }
          }
        }
      }
      colorPalette {
        palette
        alternatePalette
      }
      theme(isGlowUpPreview: true) {
        key
        ... on CustomTheme {
          luminance
          background(isGlowUpPreview: true) {
            ... on ColorBackground {
              color
              style
              type
            }
            ... on GradientBackground {
              colors
              style
              type
              animated
              noise
              name
            }
            ... on ImageBackground {
              color
              imageUrl
              type
              tint
              noise
              effect
            }
            ... on AnimatedBackground {
              color
              style
              type
            }
            ... on VideoBackground {
              color
              imageUrl
              posterUrl
              type
              tint
              noise
            }
          }
          buttonStyle(isGlowUpPreview: true) {
            type
            backgroundStyle {
              color
            }
            cornerStyle {
              type
            }
            shadowStyle {
              type
              color
            }
            textStyle {
              color
            }
          }
          socialStyle {
            color
          }
          typeface {
            color
            family
          }
          heading(isGlowUpPreview: true) {
            type
            font
            color
            size
            effect
            logo
            logoSize
          }
          footer {
            logoUrl
            url
            color
          }
        }
      }
    }
  }
}
    `;

/**
 * __useGetGlowUpStatusQuery__
 *
 * To run a query within a React component, call `useGetGlowUpStatusQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetGlowUpStatusQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetGlowUpStatusQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetGlowUpStatusQuery(baseOptions?: Apollo.QueryHookOptions<GetGlowUpStatusQuery, GetGlowUpStatusQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetGlowUpStatusQuery, GetGlowUpStatusQueryVariables>(GetGlowUpStatusDocument, options);
      }
export function useGetGlowUpStatusLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetGlowUpStatusQuery, GetGlowUpStatusQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetGlowUpStatusQuery, GetGlowUpStatusQueryVariables>(GetGlowUpStatusDocument, options);
        }
export function useGetGlowUpStatusSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetGlowUpStatusQuery, GetGlowUpStatusQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetGlowUpStatusQuery, GetGlowUpStatusQueryVariables>(GetGlowUpStatusDocument, options);
        }
export type GetGlowUpStatusQueryHookResult = ReturnType<typeof useGetGlowUpStatusQuery>;
export type GetGlowUpStatusLazyQueryHookResult = ReturnType<typeof useGetGlowUpStatusLazyQuery>;
export type GetGlowUpStatusSuspenseQueryHookResult = ReturnType<typeof useGetGlowUpStatusSuspenseQuery>;
export type GetGlowUpStatusQueryResult = Apollo.QueryResult<GetGlowUpStatusQuery, GetGlowUpStatusQueryVariables>;
export const IsWalletViewableDocument = gql`
    query isWalletViewable($accountUuid: String!, $country: String) {
  isWalletViewableV3(accountUuid: $accountUuid, country: $country) {
    isDigitalWalletViewable
    isLegacyViewable
  }
}
    `;

/**
 * __useIsWalletViewableQuery__
 *
 * To run a query within a React component, call `useIsWalletViewableQuery` and pass it any options that fit your needs.
 * When your component renders, `useIsWalletViewableQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useIsWalletViewableQuery({
 *   variables: {
 *      accountUuid: // value for 'accountUuid'
 *      country: // value for 'country'
 *   },
 * });
 */
export function useIsWalletViewableQuery(baseOptions: Apollo.QueryHookOptions<IsWalletViewableQuery, IsWalletViewableQueryVariables> & ({ variables: IsWalletViewableQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<IsWalletViewableQuery, IsWalletViewableQueryVariables>(IsWalletViewableDocument, options);
      }
export function useIsWalletViewableLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<IsWalletViewableQuery, IsWalletViewableQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<IsWalletViewableQuery, IsWalletViewableQueryVariables>(IsWalletViewableDocument, options);
        }
export function useIsWalletViewableSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<IsWalletViewableQuery, IsWalletViewableQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<IsWalletViewableQuery, IsWalletViewableQueryVariables>(IsWalletViewableDocument, options);
        }
export type IsWalletViewableQueryHookResult = ReturnType<typeof useIsWalletViewableQuery>;
export type IsWalletViewableLazyQueryHookResult = ReturnType<typeof useIsWalletViewableLazyQuery>;
export type IsWalletViewableSuspenseQueryHookResult = ReturnType<typeof useIsWalletViewableSuspenseQuery>;
export type IsWalletViewableQueryResult = Apollo.QueryResult<IsWalletViewableQuery, IsWalletViewableQueryVariables>;
export const GetLinksDocument = gql`
    query getLinks($numberOfLinks: Int, $skip: Int, $status: LinkStatus) {
  getLinks(numberOfLinks: $numberOfLinks, skip: $skip, status: $status) {
    items {
      id
      title
      url
      active
      position
      type
      status
      modifiers {
        thumbnailUrl
      }
    }
    totalCount
  }
}
    `;

/**
 * __useGetLinksQuery__
 *
 * To run a query within a React component, call `useGetLinksQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetLinksQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetLinksQuery({
 *   variables: {
 *      numberOfLinks: // value for 'numberOfLinks'
 *      skip: // value for 'skip'
 *      status: // value for 'status'
 *   },
 * });
 */
export function useGetLinksQuery(baseOptions?: Apollo.QueryHookOptions<GetLinksQuery, GetLinksQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetLinksQuery, GetLinksQueryVariables>(GetLinksDocument, options);
      }
export function useGetLinksLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetLinksQuery, GetLinksQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetLinksQuery, GetLinksQueryVariables>(GetLinksDocument, options);
        }
export function useGetLinksSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetLinksQuery, GetLinksQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetLinksQuery, GetLinksQueryVariables>(GetLinksDocument, options);
        }
export type GetLinksQueryHookResult = ReturnType<typeof useGetLinksQuery>;
export type GetLinksLazyQueryHookResult = ReturnType<typeof useGetLinksLazyQuery>;
export type GetLinksSuspenseQueryHookResult = ReturnType<typeof useGetLinksSuspenseQuery>;
export type GetLinksQueryResult = Apollo.QueryResult<GetLinksQuery, GetLinksQueryVariables>;
export const GetNotificationCountsDocument = gql`
    query GetNotificationCounts($accountUuid: String!) {
  getNotificationCounts(accountUuid: $accountUuid) {
    summary {
      unreadCount
    }
  }
}
    `;

/**
 * __useGetNotificationCountsQuery__
 *
 * To run a query within a React component, call `useGetNotificationCountsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetNotificationCountsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetNotificationCountsQuery({
 *   variables: {
 *      accountUuid: // value for 'accountUuid'
 *   },
 * });
 */
export function useGetNotificationCountsQuery(baseOptions: Apollo.QueryHookOptions<GetNotificationCountsQuery, GetNotificationCountsQueryVariables> & ({ variables: GetNotificationCountsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetNotificationCountsQuery, GetNotificationCountsQueryVariables>(GetNotificationCountsDocument, options);
      }
export function useGetNotificationCountsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetNotificationCountsQuery, GetNotificationCountsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetNotificationCountsQuery, GetNotificationCountsQueryVariables>(GetNotificationCountsDocument, options);
        }
export function useGetNotificationCountsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetNotificationCountsQuery, GetNotificationCountsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetNotificationCountsQuery, GetNotificationCountsQueryVariables>(GetNotificationCountsDocument, options);
        }
export type GetNotificationCountsQueryHookResult = ReturnType<typeof useGetNotificationCountsQuery>;
export type GetNotificationCountsLazyQueryHookResult = ReturnType<typeof useGetNotificationCountsLazyQuery>;
export type GetNotificationCountsSuspenseQueryHookResult = ReturnType<typeof useGetNotificationCountsSuspenseQuery>;
export type GetNotificationCountsQueryResult = Apollo.QueryResult<GetNotificationCountsQuery, GetNotificationCountsQueryVariables>;
export const GetNotificationsDocument = gql`
    query GetNotifications($accountUuid: String!, $first: Int! = 25, $after: String, $status: String! = "ALL", $category: String! = "ALL") {
  getNotifications(
    accountUuid: $accountUuid
    first: $first
    after: $after
    status: $status
    category: $category
  ) {
    edges {
      cursor
      node {
        id
        category
        type
        eventName
        title
        body
        imageUrl
        deepLink {
          mobile {
            url
            fallback
          }
          web {
            url
          }
        }
        createdAt
        readAt
        status
      }
    }
    pageInfo {
      startCursor
      endCursor
      hasPreviousPage
      hasNextPage
    }
  }
}
    `;

/**
 * __useGetNotificationsQuery__
 *
 * To run a query within a React component, call `useGetNotificationsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetNotificationsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetNotificationsQuery({
 *   variables: {
 *      accountUuid: // value for 'accountUuid'
 *      first: // value for 'first'
 *      after: // value for 'after'
 *      status: // value for 'status'
 *      category: // value for 'category'
 *   },
 * });
 */
export function useGetNotificationsQuery(baseOptions: Apollo.QueryHookOptions<GetNotificationsQuery, GetNotificationsQueryVariables> & ({ variables: GetNotificationsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetNotificationsQuery, GetNotificationsQueryVariables>(GetNotificationsDocument, options);
      }
export function useGetNotificationsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetNotificationsQuery, GetNotificationsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetNotificationsQuery, GetNotificationsQueryVariables>(GetNotificationsDocument, options);
        }
export function useGetNotificationsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetNotificationsQuery, GetNotificationsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetNotificationsQuery, GetNotificationsQueryVariables>(GetNotificationsDocument, options);
        }
export type GetNotificationsQueryHookResult = ReturnType<typeof useGetNotificationsQuery>;
export type GetNotificationsLazyQueryHookResult = ReturnType<typeof useGetNotificationsLazyQuery>;
export type GetNotificationsSuspenseQueryHookResult = ReturnType<typeof useGetNotificationsSuspenseQuery>;
export type GetNotificationsQueryResult = Apollo.QueryResult<GetNotificationsQuery, GetNotificationsQueryVariables>;
export const GetPlansWithPricesQueryDocument = gql`
    query getPlansWithPricesQuery($countryCode: String!) {
  getPlansWithPrices(countryCode: $countryCode) {
    id
    tier
    displayName
    frequency
    currency
    price
    formattedPrice
    formattedPriceFrequency
    currencySymbol
  }
}
    `;

/**
 * __useGetPlansWithPricesQuery__
 *
 * To run a query within a React component, call `useGetPlansWithPricesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPlansWithPricesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPlansWithPricesQuery({
 *   variables: {
 *      countryCode: // value for 'countryCode'
 *   },
 * });
 */
export function useGetPlansWithPricesQuery(baseOptions: Apollo.QueryHookOptions<GetPlansWithPricesQuery, GetPlansWithPricesQueryVariables> & ({ variables: GetPlansWithPricesQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetPlansWithPricesQuery, GetPlansWithPricesQueryVariables>(GetPlansWithPricesQueryDocument, options);
      }
export function useGetPlansWithPricesQueryLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetPlansWithPricesQuery, GetPlansWithPricesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetPlansWithPricesQuery, GetPlansWithPricesQueryVariables>(GetPlansWithPricesQueryDocument, options);
        }
export function useGetPlansWithPricesQuerySuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetPlansWithPricesQuery, GetPlansWithPricesQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetPlansWithPricesQuery, GetPlansWithPricesQueryVariables>(GetPlansWithPricesQueryDocument, options);
        }
export type GetPlansWithPricesQueryHookResult = ReturnType<typeof useGetPlansWithPricesQuery>;
export type GetPlansWithPricesQueryLazyQueryHookResult = ReturnType<typeof useGetPlansWithPricesQueryLazyQuery>;
export type GetPlansWithPricesQuerySuspenseQueryHookResult = ReturnType<typeof useGetPlansWithPricesQuerySuspenseQuery>;
export type GetPlansWithPricesQueryQueryResult = Apollo.QueryResult<GetPlansWithPricesQuery, GetPlansWithPricesQueryVariables>;
export const GetSauceKeyDocument = gql`
    query getSauceKey {
  getSauceKey
}
    `;

/**
 * __useGetSauceKeyQuery__
 *
 * To run a query within a React component, call `useGetSauceKeyQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSauceKeyQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSauceKeyQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetSauceKeyQuery(baseOptions?: Apollo.QueryHookOptions<GetSauceKeyQuery, GetSauceKeyQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetSauceKeyQuery, GetSauceKeyQueryVariables>(GetSauceKeyDocument, options);
      }
export function useGetSauceKeyLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetSauceKeyQuery, GetSauceKeyQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetSauceKeyQuery, GetSauceKeyQueryVariables>(GetSauceKeyDocument, options);
        }
export function useGetSauceKeySuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetSauceKeyQuery, GetSauceKeyQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetSauceKeyQuery, GetSauceKeyQueryVariables>(GetSauceKeyDocument, options);
        }
export type GetSauceKeyQueryHookResult = ReturnType<typeof useGetSauceKeyQuery>;
export type GetSauceKeyLazyQueryHookResult = ReturnType<typeof useGetSauceKeyLazyQuery>;
export type GetSauceKeySuspenseQueryHookResult = ReturnType<typeof useGetSauceKeySuspenseQuery>;
export type GetSauceKeyQueryResult = Apollo.QueryResult<GetSauceKeyQuery, GetSauceKeyQueryVariables>;
export const GetSocialLinksDocument = gql`
    query GetSocialLinks {
  currentUser {
    id
    selectedAccount {
      id
      uuid
      socialLinksPosition
      isSocialLinksPositionEditable
      socialLinks {
        id
        type
        url
        active
        position
        moderationAction
      }
    }
  }
}
    `;

/**
 * __useGetSocialLinksQuery__
 *
 * To run a query within a React component, call `useGetSocialLinksQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSocialLinksQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSocialLinksQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetSocialLinksQuery(baseOptions?: Apollo.QueryHookOptions<GetSocialLinksQuery, GetSocialLinksQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetSocialLinksQuery, GetSocialLinksQueryVariables>(GetSocialLinksDocument, options);
      }
export function useGetSocialLinksLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetSocialLinksQuery, GetSocialLinksQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetSocialLinksQuery, GetSocialLinksQueryVariables>(GetSocialLinksDocument, options);
        }
export function useGetSocialLinksSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetSocialLinksQuery, GetSocialLinksQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetSocialLinksQuery, GetSocialLinksQueryVariables>(GetSocialLinksDocument, options);
        }
export type GetSocialLinksQueryHookResult = ReturnType<typeof useGetSocialLinksQuery>;
export type GetSocialLinksLazyQueryHookResult = ReturnType<typeof useGetSocialLinksLazyQuery>;
export type GetSocialLinksSuspenseQueryHookResult = ReturnType<typeof useGetSocialLinksSuspenseQuery>;
export type GetSocialLinksQueryResult = Apollo.QueryResult<GetSocialLinksQuery, GetSocialLinksQueryVariables>;
export const GetSponsoredOffersBySponsorshipIdsDocument = gql`
    query GetSponsoredOffersBySponsorshipIds($input: GetSponsoredOffersBySponsorshipIdsInput!) {
  getSponsoredOffersBySponsorshipIds(input: $input) {
    id
    title
    image
    url
    offerType
    marketplace
    metadata {
      vendorIcon
      description
      termsAndConditions
    }
  }
}
    `;

/**
 * __useGetSponsoredOffersBySponsorshipIdsQuery__
 *
 * To run a query within a React component, call `useGetSponsoredOffersBySponsorshipIdsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSponsoredOffersBySponsorshipIdsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSponsoredOffersBySponsorshipIdsQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useGetSponsoredOffersBySponsorshipIdsQuery(baseOptions: Apollo.QueryHookOptions<GetSponsoredOffersBySponsorshipIdsQuery, GetSponsoredOffersBySponsorshipIdsQueryVariables> & ({ variables: GetSponsoredOffersBySponsorshipIdsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetSponsoredOffersBySponsorshipIdsQuery, GetSponsoredOffersBySponsorshipIdsQueryVariables>(GetSponsoredOffersBySponsorshipIdsDocument, options);
      }
export function useGetSponsoredOffersBySponsorshipIdsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetSponsoredOffersBySponsorshipIdsQuery, GetSponsoredOffersBySponsorshipIdsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetSponsoredOffersBySponsorshipIdsQuery, GetSponsoredOffersBySponsorshipIdsQueryVariables>(GetSponsoredOffersBySponsorshipIdsDocument, options);
        }
export function useGetSponsoredOffersBySponsorshipIdsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetSponsoredOffersBySponsorshipIdsQuery, GetSponsoredOffersBySponsorshipIdsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetSponsoredOffersBySponsorshipIdsQuery, GetSponsoredOffersBySponsorshipIdsQueryVariables>(GetSponsoredOffersBySponsorshipIdsDocument, options);
        }
export type GetSponsoredOffersBySponsorshipIdsQueryHookResult = ReturnType<typeof useGetSponsoredOffersBySponsorshipIdsQuery>;
export type GetSponsoredOffersBySponsorshipIdsLazyQueryHookResult = ReturnType<typeof useGetSponsoredOffersBySponsorshipIdsLazyQuery>;
export type GetSponsoredOffersBySponsorshipIdsSuspenseQueryHookResult = ReturnType<typeof useGetSponsoredOffersBySponsorshipIdsSuspenseQuery>;
export type GetSponsoredOffersBySponsorshipIdsQueryResult = Apollo.QueryResult<GetSponsoredOffersBySponsorshipIdsQuery, GetSponsoredOffersBySponsorshipIdsQueryVariables>;
export const GetTotalBalanceByCurrencyDocument = gql`
    query getTotalBalanceByCurrency($accountUuid: String!) {
  getTotalBalanceByCurrency(accountUuid: $accountUuid) {
    amount
    currency
  }
}
    `;

/**
 * __useGetTotalBalanceByCurrencyQuery__
 *
 * To run a query within a React component, call `useGetTotalBalanceByCurrencyQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTotalBalanceByCurrencyQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTotalBalanceByCurrencyQuery({
 *   variables: {
 *      accountUuid: // value for 'accountUuid'
 *   },
 * });
 */
export function useGetTotalBalanceByCurrencyQuery(baseOptions: Apollo.QueryHookOptions<GetTotalBalanceByCurrencyQuery, GetTotalBalanceByCurrencyQueryVariables> & ({ variables: GetTotalBalanceByCurrencyQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetTotalBalanceByCurrencyQuery, GetTotalBalanceByCurrencyQueryVariables>(GetTotalBalanceByCurrencyDocument, options);
      }
export function useGetTotalBalanceByCurrencyLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetTotalBalanceByCurrencyQuery, GetTotalBalanceByCurrencyQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetTotalBalanceByCurrencyQuery, GetTotalBalanceByCurrencyQueryVariables>(GetTotalBalanceByCurrencyDocument, options);
        }
export function useGetTotalBalanceByCurrencySuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetTotalBalanceByCurrencyQuery, GetTotalBalanceByCurrencyQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetTotalBalanceByCurrencyQuery, GetTotalBalanceByCurrencyQueryVariables>(GetTotalBalanceByCurrencyDocument, options);
        }
export type GetTotalBalanceByCurrencyQueryHookResult = ReturnType<typeof useGetTotalBalanceByCurrencyQuery>;
export type GetTotalBalanceByCurrencyLazyQueryHookResult = ReturnType<typeof useGetTotalBalanceByCurrencyLazyQuery>;
export type GetTotalBalanceByCurrencySuspenseQueryHookResult = ReturnType<typeof useGetTotalBalanceByCurrencySuspenseQuery>;
export type GetTotalBalanceByCurrencyQueryResult = Apollo.QueryResult<GetTotalBalanceByCurrencyQuery, GetTotalBalanceByCurrencyQueryVariables>;
export const GetWalletExperienceDocument = gql`
    query GetWalletExperience($accountUuid: String!) {
  walletExperience(accountUuid: $accountUuid)
}
    `;

/**
 * __useGetWalletExperienceQuery__
 *
 * To run a query within a React component, call `useGetWalletExperienceQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetWalletExperienceQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetWalletExperienceQuery({
 *   variables: {
 *      accountUuid: // value for 'accountUuid'
 *   },
 * });
 */
export function useGetWalletExperienceQuery(baseOptions: Apollo.QueryHookOptions<GetWalletExperienceQuery, GetWalletExperienceQueryVariables> & ({ variables: GetWalletExperienceQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetWalletExperienceQuery, GetWalletExperienceQueryVariables>(GetWalletExperienceDocument, options);
      }
export function useGetWalletExperienceLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetWalletExperienceQuery, GetWalletExperienceQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetWalletExperienceQuery, GetWalletExperienceQueryVariables>(GetWalletExperienceDocument, options);
        }
export function useGetWalletExperienceSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetWalletExperienceQuery, GetWalletExperienceQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetWalletExperienceQuery, GetWalletExperienceQueryVariables>(GetWalletExperienceDocument, options);
        }
export type GetWalletExperienceQueryHookResult = ReturnType<typeof useGetWalletExperienceQuery>;
export type GetWalletExperienceLazyQueryHookResult = ReturnType<typeof useGetWalletExperienceLazyQuery>;
export type GetWalletExperienceSuspenseQueryHookResult = ReturnType<typeof useGetWalletExperienceSuspenseQuery>;
export type GetWalletExperienceQueryResult = Apollo.QueryResult<GetWalletExperienceQuery, GetWalletExperienceQueryVariables>;
export const GetWalletStateDocument = gql`
    query GetWalletState($accountUuid: String!) {
  getWalletStateV3(accountUuid: $accountUuid) {
    affiliateCardInfo {
      currency
      balance
      balanceV2
      available
      nextPayoutDate
      transferEligibilityErrors
    }
    digitalCardInfo {
      currency
      balance
      balanceV2
      available
      nextPayoutDate
      transferEligibilityErrors
    }
    items {
      id
      type
      saleType
      data {
        ... on AffiliateTransaction {
          id
          status
        }
        ... on DigitalTransaction {
          id
          status
        }
      }
    }
  }
}
    `;

/**
 * __useGetWalletStateQuery__
 *
 * To run a query within a React component, call `useGetWalletStateQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetWalletStateQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetWalletStateQuery({
 *   variables: {
 *      accountUuid: // value for 'accountUuid'
 *   },
 * });
 */
export function useGetWalletStateQuery(baseOptions: Apollo.QueryHookOptions<GetWalletStateQuery, GetWalletStateQueryVariables> & ({ variables: GetWalletStateQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetWalletStateQuery, GetWalletStateQueryVariables>(GetWalletStateDocument, options);
      }
export function useGetWalletStateLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetWalletStateQuery, GetWalletStateQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetWalletStateQuery, GetWalletStateQueryVariables>(GetWalletStateDocument, options);
        }
export function useGetWalletStateSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetWalletStateQuery, GetWalletStateQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetWalletStateQuery, GetWalletStateQueryVariables>(GetWalletStateDocument, options);
        }
export type GetWalletStateQueryHookResult = ReturnType<typeof useGetWalletStateQuery>;
export type GetWalletStateLazyQueryHookResult = ReturnType<typeof useGetWalletStateLazyQuery>;
export type GetWalletStateSuspenseQueryHookResult = ReturnType<typeof useGetWalletStateSuspenseQuery>;
export type GetWalletStateQueryResult = Apollo.QueryResult<GetWalletStateQuery, GetWalletStateQueryVariables>;
export const GetWorkspacesForCurrentUserDocument = gql`
    query GetWorkspacesForCurrentUser {
  getWorkspacesForCurrentUser {
    workspace {
      id
      name
      avatarUrl
      profiles(page: 1, limit: 5) {
        items {
          id
          uuid
          username
          customAvatar
        }
        pageInfo {
          totalCount
          currentPage
          totalPages
        }
      }
    }
    role
  }
}
    `;

/**
 * __useGetWorkspacesForCurrentUserQuery__
 *
 * To run a query within a React component, call `useGetWorkspacesForCurrentUserQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetWorkspacesForCurrentUserQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetWorkspacesForCurrentUserQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetWorkspacesForCurrentUserQuery(baseOptions?: Apollo.QueryHookOptions<GetWorkspacesForCurrentUserQuery, GetWorkspacesForCurrentUserQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetWorkspacesForCurrentUserQuery, GetWorkspacesForCurrentUserQueryVariables>(GetWorkspacesForCurrentUserDocument, options);
      }
export function useGetWorkspacesForCurrentUserLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetWorkspacesForCurrentUserQuery, GetWorkspacesForCurrentUserQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetWorkspacesForCurrentUserQuery, GetWorkspacesForCurrentUserQueryVariables>(GetWorkspacesForCurrentUserDocument, options);
        }
export function useGetWorkspacesForCurrentUserSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetWorkspacesForCurrentUserQuery, GetWorkspacesForCurrentUserQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetWorkspacesForCurrentUserQuery, GetWorkspacesForCurrentUserQueryVariables>(GetWorkspacesForCurrentUserDocument, options);
        }
export type GetWorkspacesForCurrentUserQueryHookResult = ReturnType<typeof useGetWorkspacesForCurrentUserQuery>;
export type GetWorkspacesForCurrentUserLazyQueryHookResult = ReturnType<typeof useGetWorkspacesForCurrentUserLazyQuery>;
export type GetWorkspacesForCurrentUserSuspenseQueryHookResult = ReturnType<typeof useGetWorkspacesForCurrentUserSuspenseQuery>;
export type GetWorkspacesForCurrentUserQueryResult = Apollo.QueryResult<GetWorkspacesForCurrentUserQuery, GetWorkspacesForCurrentUserQueryVariables>;
export const AssistantSendMessageDocument = gql`
    mutation AssistantSendMessage($accountUuid: String!, $conversationId: String, $message: ChatMessage!) {
  assistantSendMessage(
    accountUuid: $accountUuid
    conversationId: $conversationId
    message: $message
  ) {
    conversationId
    responseId
    toolId
    done
    chat {
      content
    }
  }
}
    `;
export type AssistantSendMessageMutationFn = Apollo.MutationFunction<AssistantSendMessageMutation, AssistantSendMessageMutationVariables>;

/**
 * __useAssistantSendMessageMutation__
 *
 * To run a mutation, you first call `useAssistantSendMessageMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAssistantSendMessageMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [assistantSendMessageMutation, { data, loading, error }] = useAssistantSendMessageMutation({
 *   variables: {
 *      accountUuid: // value for 'accountUuid'
 *      conversationId: // value for 'conversationId'
 *      message: // value for 'message'
 *   },
 * });
 */
export function useAssistantSendMessageMutation(baseOptions?: Apollo.MutationHookOptions<AssistantSendMessageMutation, AssistantSendMessageMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<AssistantSendMessageMutation, AssistantSendMessageMutationVariables>(AssistantSendMessageDocument, options);
      }
export type AssistantSendMessageMutationHookResult = ReturnType<typeof useAssistantSendMessageMutation>;
export type AssistantSendMessageMutationResult = Apollo.MutationResult<AssistantSendMessageMutation>;
export type AssistantSendMessageMutationOptions = Apollo.BaseMutationOptions<AssistantSendMessageMutation, AssistantSendMessageMutationVariables>;
export const AssistantPollResponseDocument = gql`
    query AssistantPollResponse($conversationId: String!, $responseId: String!) {
  assistantPollResponse(conversationId: $conversationId, responseId: $responseId) {
    conversationId
    chat {
      content
    }
    toolId
    done
  }
}
    `;

/**
 * __useAssistantPollResponseQuery__
 *
 * To run a query within a React component, call `useAssistantPollResponseQuery` and pass it any options that fit your needs.
 * When your component renders, `useAssistantPollResponseQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAssistantPollResponseQuery({
 *   variables: {
 *      conversationId: // value for 'conversationId'
 *      responseId: // value for 'responseId'
 *   },
 * });
 */
export function useAssistantPollResponseQuery(baseOptions: Apollo.QueryHookOptions<AssistantPollResponseQuery, AssistantPollResponseQueryVariables> & ({ variables: AssistantPollResponseQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AssistantPollResponseQuery, AssistantPollResponseQueryVariables>(AssistantPollResponseDocument, options);
      }
export function useAssistantPollResponseLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AssistantPollResponseQuery, AssistantPollResponseQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AssistantPollResponseQuery, AssistantPollResponseQueryVariables>(AssistantPollResponseDocument, options);
        }
export function useAssistantPollResponseSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<AssistantPollResponseQuery, AssistantPollResponseQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<AssistantPollResponseQuery, AssistantPollResponseQueryVariables>(AssistantPollResponseDocument, options);
        }
export type AssistantPollResponseQueryHookResult = ReturnType<typeof useAssistantPollResponseQuery>;
export type AssistantPollResponseLazyQueryHookResult = ReturnType<typeof useAssistantPollResponseLazyQuery>;
export type AssistantPollResponseSuspenseQueryHookResult = ReturnType<typeof useAssistantPollResponseSuspenseQuery>;
export type AssistantPollResponseQueryResult = Apollo.QueryResult<AssistantPollResponseQuery, AssistantPollResponseQueryVariables>;
export const AssistantFollowUpQuestionsDocument = gql`
    query AssistantFollowUpQuestions($conversationId: String!) {
  assistantFollowUpQuestions(conversationId: $conversationId)
}
    `;

/**
 * __useAssistantFollowUpQuestionsQuery__
 *
 * To run a query within a React component, call `useAssistantFollowUpQuestionsQuery` and pass it any options that fit your needs.
 * When your component renders, `useAssistantFollowUpQuestionsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAssistantFollowUpQuestionsQuery({
 *   variables: {
 *      conversationId: // value for 'conversationId'
 *   },
 * });
 */
export function useAssistantFollowUpQuestionsQuery(baseOptions: Apollo.QueryHookOptions<AssistantFollowUpQuestionsQuery, AssistantFollowUpQuestionsQueryVariables> & ({ variables: AssistantFollowUpQuestionsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AssistantFollowUpQuestionsQuery, AssistantFollowUpQuestionsQueryVariables>(AssistantFollowUpQuestionsDocument, options);
      }
export function useAssistantFollowUpQuestionsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AssistantFollowUpQuestionsQuery, AssistantFollowUpQuestionsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AssistantFollowUpQuestionsQuery, AssistantFollowUpQuestionsQueryVariables>(AssistantFollowUpQuestionsDocument, options);
        }
export function useAssistantFollowUpQuestionsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<AssistantFollowUpQuestionsQuery, AssistantFollowUpQuestionsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<AssistantFollowUpQuestionsQuery, AssistantFollowUpQuestionsQueryVariables>(AssistantFollowUpQuestionsDocument, options);
        }
export type AssistantFollowUpQuestionsQueryHookResult = ReturnType<typeof useAssistantFollowUpQuestionsQuery>;
export type AssistantFollowUpQuestionsLazyQueryHookResult = ReturnType<typeof useAssistantFollowUpQuestionsLazyQuery>;
export type AssistantFollowUpQuestionsSuspenseQueryHookResult = ReturnType<typeof useAssistantFollowUpQuestionsSuspenseQuery>;
export type AssistantFollowUpQuestionsQueryResult = Apollo.QueryResult<AssistantFollowUpQuestionsQuery, AssistantFollowUpQuestionsQueryVariables>;
export const AssistantLastMessageDocument = gql`
    query AssistantLastMessage($conversationId: String!) {
  assistantLastMessage(conversationId: $conversationId) {
    conversationId
    chat {
      content
    }
    done
    toolId
  }
}
    `;

/**
 * __useAssistantLastMessageQuery__
 *
 * To run a query within a React component, call `useAssistantLastMessageQuery` and pass it any options that fit your needs.
 * When your component renders, `useAssistantLastMessageQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAssistantLastMessageQuery({
 *   variables: {
 *      conversationId: // value for 'conversationId'
 *   },
 * });
 */
export function useAssistantLastMessageQuery(baseOptions: Apollo.QueryHookOptions<AssistantLastMessageQuery, AssistantLastMessageQueryVariables> & ({ variables: AssistantLastMessageQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AssistantLastMessageQuery, AssistantLastMessageQueryVariables>(AssistantLastMessageDocument, options);
      }
export function useAssistantLastMessageLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AssistantLastMessageQuery, AssistantLastMessageQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AssistantLastMessageQuery, AssistantLastMessageQueryVariables>(AssistantLastMessageDocument, options);
        }
export function useAssistantLastMessageSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<AssistantLastMessageQuery, AssistantLastMessageQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<AssistantLastMessageQuery, AssistantLastMessageQueryVariables>(AssistantLastMessageDocument, options);
        }
export type AssistantLastMessageQueryHookResult = ReturnType<typeof useAssistantLastMessageQuery>;
export type AssistantLastMessageLazyQueryHookResult = ReturnType<typeof useAssistantLastMessageLazyQuery>;
export type AssistantLastMessageSuspenseQueryHookResult = ReturnType<typeof useAssistantLastMessageSuspenseQuery>;
export type AssistantLastMessageQueryResult = Apollo.QueryResult<AssistantLastMessageQuery, AssistantLastMessageQueryVariables>;
export const ProfilePreviewFromUuidDocument = gql`
    query ProfilePreviewFromUuid($uuid: String!, $linksFilter: LinksFilterInput!, $integrationsFilter: IntegrationsFilterInput!, $isProfilePreview: Boolean, $isGlowUpPreview: Boolean, $isDowngradedPreview: Boolean) {
  accountFromUuid(
    uuid: $uuid
    isProfilePreview: $isProfilePreview
    isGlowUpPreview: $isGlowUpPreview
    isDowngradedPreview: $isDowngradedPreview
  ) {
    id
    uuid
    username
    isActive
    pageTitle(isProfilePreview: $isProfilePreview)
    googleAnalyticsId
    facebookPixelId
    donationsActive
    causeBanner
    contentWarning
    description(isProfilePreview: $isProfilePreview)
    isLogoVisible(isProfilePreview: $isProfilePreview)
    socialLinksPosition
    expandableLinkCaret
    profileBadges
    isShareButtonEnabled
    isShareWithEllipsis
    isInitialsProfileEnabled
    isAppearanceRebrandEnabled
    isWhatsappNotificationsEnabled
    isVenmoEnabled
    isSquareWalletEnabled
    profilePictureUrl(isProfilePreview: $isProfilePreview)
    customAvatar(isProfilePreview: $isProfilePreview)
    customAvatarVideo(isProfilePreview: $isProfilePreview)
    customAvatarAttributes(isProfilePreview: $isProfilePreview)
    backgroundImageAttributes
    isAmazonAffiliateEnabled
    profileLinkContentDisplayType
    groupsEnabled
    isVisualLinkPreviewsEnabled
    isStoreTabEnabled
    isProfilePreviewsLinkAppsEnabled
    eligibleForMonetization
    backgroundHeroColor
    backgroundGradient
    headingColor(isProfilePreview: $isProfilePreview)
    headingFont(isProfilePreview: $isProfilePreview)
    headingSize(isProfilePreview: $isProfilePreview)
    headingEffect(isProfilePreview: $isProfilePreview)
    headingLogo(isProfilePreview: $isProfilePreview)
    headingLogoSize(isProfilePreview: $isProfilePreview)
    headingType(isProfilePreview: $isProfilePreview)
    avatarMode(isProfilePreview: $isProfilePreview)
    avatarType(isProfilePreview: $isProfilePreview)
    isEligibleForProfileLinkAppRebuild
    metaAttributes {
      ogImageBackgroundType
      ogImageBackgroundColor
    }
    colorPalette {
      palette
      alternatePalette
    }
    socialIntegrations {
      type
      id
    }
    socialFeeds(filter: {includeDisabled: false}) {
      id
      source
      type
      layout
      active
      socialIntegration {
        id
      }
      posts(filter: {includeHidden: false}) {
        id
        externalId
        postType
        mediaUrl
        thumbnailUrl
        url
        pinned
        visible
        timestamp
        caption
        media {
          id
          externalId
          mediaType
          mediaUrl
          thumbnailUrl
          links {
            title
            url
            id
            coordinates {
              x
              y
              top
              left
            }
          }
        }
      }
      title
      socialIntegration {
        id
      }
    }
    pageMeta {
      title
      description
    }
    affiliateTokens {
      program
      advertiser
      token
      aid
    }
    integrations(filter: $integrationsFilter) {
      id
      active
      type
      context {
        ... on GoogleSheetsIntegrationContext {
          position
          title
          message
          termsUrl
          termsLabel
        }
        ... on MailchimpIntegrationContext {
          position
          title
          message
          termsUrl
          termsLabel
        }
        ... on DotDigitalIntegrationContext {
          position
          title
          message
          termsUrl
          termsLabel
        }
        ... on ZapierIntegrationContext {
          position
          title
          message
          termsUrl
          termsLabel
        }
      }
    }
    links(filter: $linksFilter, isGlowUpPreview: $isGlowUpPreview) {
      ...LinkFragment
      parent {
        id
      }
    }
    socialLinks(filter: {active: true}) {
      id
      type
      url
      active
      position
    }
    theme(isProfilePreview: $isProfilePreview, isGlowUpPreview: $isGlowUpPreview) {
      key
      ... on CustomTheme {
        luminance
        background(
          isProfilePreview: $isProfilePreview
          isGlowUpPreview: $isGlowUpPreview
        ) {
          ... on ColorBackground {
            color
            style
            type
          }
          ... on GradientBackground {
            colors
            style
            type
            animated
            noise
            name
          }
          ... on ImageBackground {
            color
            imageUrl
            type
            tint
            noise
            effect
          }
          ... on AnimatedBackground {
            color
            style
            type
          }
          ... on VideoBackground {
            color
            imageUrl
            posterUrl
            type
            tint
            noise
          }
        }
        buttonStyle(
          isProfilePreview: $isProfilePreview
          isGlowUpPreview: $isGlowUpPreview
        ) {
          type
          backgroundStyle {
            color
          }
          cornerStyle {
            type
          }
          shadowStyle {
            type
            color
          }
          textStyle {
            color
          }
        }
        socialStyle {
          color
        }
        typeface {
          color
          family
        }
        heading(isProfilePreview: $isProfilePreview, isGlowUpPreview: $isGlowUpPreview) {
          type
          font
          color
          size
          effect
          logo
          logoSize
        }
        footer {
          logoUrl
          url
          color
        }
      }
    }
  }
}
    ${LinkFragmentDoc}`;

/**
 * __useProfilePreviewFromUuidQuery__
 *
 * To run a query within a React component, call `useProfilePreviewFromUuidQuery` and pass it any options that fit your needs.
 * When your component renders, `useProfilePreviewFromUuidQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useProfilePreviewFromUuidQuery({
 *   variables: {
 *      uuid: // value for 'uuid'
 *      linksFilter: // value for 'linksFilter'
 *      integrationsFilter: // value for 'integrationsFilter'
 *      isProfilePreview: // value for 'isProfilePreview'
 *      isGlowUpPreview: // value for 'isGlowUpPreview'
 *      isDowngradedPreview: // value for 'isDowngradedPreview'
 *   },
 * });
 */
export function useProfilePreviewFromUuidQuery(baseOptions: Apollo.QueryHookOptions<ProfilePreviewFromUuidQuery, ProfilePreviewFromUuidQueryVariables> & ({ variables: ProfilePreviewFromUuidQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<ProfilePreviewFromUuidQuery, ProfilePreviewFromUuidQueryVariables>(ProfilePreviewFromUuidDocument, options);
      }
export function useProfilePreviewFromUuidLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ProfilePreviewFromUuidQuery, ProfilePreviewFromUuidQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<ProfilePreviewFromUuidQuery, ProfilePreviewFromUuidQueryVariables>(ProfilePreviewFromUuidDocument, options);
        }
export function useProfilePreviewFromUuidSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<ProfilePreviewFromUuidQuery, ProfilePreviewFromUuidQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<ProfilePreviewFromUuidQuery, ProfilePreviewFromUuidQueryVariables>(ProfilePreviewFromUuidDocument, options);
        }
export type ProfilePreviewFromUuidQueryHookResult = ReturnType<typeof useProfilePreviewFromUuidQuery>;
export type ProfilePreviewFromUuidLazyQueryHookResult = ReturnType<typeof useProfilePreviewFromUuidLazyQuery>;
export type ProfilePreviewFromUuidSuspenseQueryHookResult = ReturnType<typeof useProfilePreviewFromUuidSuspenseQuery>;
export type ProfilePreviewFromUuidQueryResult = Apollo.QueryResult<ProfilePreviewFromUuidQuery, ProfilePreviewFromUuidQueryVariables>;
export const ProfileStoreDocument = gql`
    query ProfileStore($accountUuid: String!) {
  getCommerceStoreForProfile(accountUuid: $accountUuid) {
    shopEntryPointOnLinksEnabled
  }
  getCommerceStoreItemsForProfile(accountUuid: $accountUuid) {
    hasCommissionProducts
    posts {
      ... on CommerceStorefrontPost {
        id
        hasCommissionProducts
        title
        type
        ugcContent {
          id
          provider
          contentId
          url
          thumbnailSrc
          embedUrl
          videoUrl
          position
        }
        storeProducts {
          currency
          id
          accountProductId
          image
          price
          salePrice
          title
          url
          hasCommission
          vendor
          vendorDisplayName
          comoAction
        }
      }
    }
    items {
      ... on CommerceCollection {
        id
        hasCommissionProducts
        title
        type
        storeProducts {
          currency
          id
          accountProductId
          image
          price
          salePrice
          title
          url
          hasCommission
          vendor
          vendorDisplayName
          comoAction
        }
      }
      ... on CommerceStoreProduct {
        type
        currency
        id
        image
        price
        salePrice
        title
        url
        comoAction
        hasCommission
        vendor
        vendorDisplayName
      }
    }
  }
}
    `;

/**
 * __useProfileStoreQuery__
 *
 * To run a query within a React component, call `useProfileStoreQuery` and pass it any options that fit your needs.
 * When your component renders, `useProfileStoreQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useProfileStoreQuery({
 *   variables: {
 *      accountUuid: // value for 'accountUuid'
 *   },
 * });
 */
export function useProfileStoreQuery(baseOptions: Apollo.QueryHookOptions<ProfileStoreQuery, ProfileStoreQueryVariables> & ({ variables: ProfileStoreQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<ProfileStoreQuery, ProfileStoreQueryVariables>(ProfileStoreDocument, options);
      }
export function useProfileStoreLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ProfileStoreQuery, ProfileStoreQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<ProfileStoreQuery, ProfileStoreQueryVariables>(ProfileStoreDocument, options);
        }
export function useProfileStoreSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<ProfileStoreQuery, ProfileStoreQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<ProfileStoreQuery, ProfileStoreQueryVariables>(ProfileStoreDocument, options);
        }
export type ProfileStoreQueryHookResult = ReturnType<typeof useProfileStoreQuery>;
export type ProfileStoreLazyQueryHookResult = ReturnType<typeof useProfileStoreLazyQuery>;
export type ProfileStoreSuspenseQueryHookResult = ReturnType<typeof useProfileStoreSuspenseQuery>;
export type ProfileStoreQueryResult = Apollo.QueryResult<ProfileStoreQuery, ProfileStoreQueryVariables>;